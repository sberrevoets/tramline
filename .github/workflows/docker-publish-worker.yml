name: Publish Worker Docker Image

on:
  push:
    branches: [main]
  pull_request: # TODO: Remove this once we are ready to merge
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tramlinehq/tramline-worker

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=long

      - name: Set Ruby and Bundler versions
        id: versions
        run: |
          echo "ruby_version=$(cat .ruby-version)" >> $GITHUB_OUTPUT
          echo "bundler_version=$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n1 | xargs)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: worker.Dockerfile
          build-args: |
            RUBY_VERSION=${{ steps.versions.outputs.ruby_version }}
            BUNDLER_VERSION=${{ steps.versions.outputs.bundler_version }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          outputs: type=image,compression=zstd,compression-level=3
