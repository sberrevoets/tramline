# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `easymon` gem.
# Please instead update this file by running `bin/tapioca gem easymon`.


# source://easymon//lib/easymon/engine.rb#1
module Easymon
  class << self
    # source://easymon//lib/easymon.rb#85
    def authorize_with=(block); end

    # @return [Boolean]
    #
    # source://easymon//lib/easymon.rb#89
    def authorized?(request); end

    # @return [Boolean]
    #
    # source://easymon//lib/easymon.rb#49
    def has_before_action?; end

    # @return [Boolean]
    #
    # source://easymon//lib/easymon.rb#44
    def has_render_plain?; end

    # @return [Boolean]
    #
    # source://easymon//lib/easymon.rb#36
    def mountable_engine?; end

    # @return [Boolean]
    #
    # source://easymon//lib/easymon.rb#28
    def rails2?; end

    # @return [Boolean]
    #
    # source://easymon//lib/easymon.rb#32
    def rails30?; end

    # @return [Boolean]
    #
    # source://easymon//lib/easymon.rb#40
    def rails_newer_than?(version); end

    # source://easymon//lib/easymon.rb#24
    def rails_version; end

    # source://railties/7.0.8.4/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/7.0.8.4/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/7.0.8.4/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://easymon//lib/easymon.rb#53
    def routes(mapper, path = T.unsafe(nil)); end

    # source://railties/7.0.8.4/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://easymon//lib/easymon.rb#81
    def timing_to_ms(timing = T.unsafe(nil)); end

    # source://railties/7.0.8.4/lib/rails/engine.rb#401
    def use_relative_model_naming?; end
  end
end

# source://easymon//lib/easymon/checks/active_record_check.rb#2
class Easymon::ActiveRecordCheck
  # @return [ActiveRecordCheck] a new instance of ActiveRecordCheck
  #
  # source://easymon//lib/easymon/checks/active_record_check.rb#5
  def initialize(klass); end

  # source://easymon//lib/easymon/checks/active_record_check.rb#9
  def check; end

  # Returns the value of attribute klass.
  #
  # source://easymon//lib/easymon/checks/active_record_check.rb#3
  def klass; end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://easymon//lib/easymon/checks/active_record_check.rb#3
  def klass=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checks/active_record_check.rb#20
  def database_up?; end
end

# source://easymon//lib/easymon/checks/active_record_mysql_writeable_check.rb#2
class Easymon::ActiveRecordMysqlWriteableCheck
  # @return [ActiveRecordMysqlWriteableCheck] a new instance of ActiveRecordMysqlWriteableCheck
  #
  # source://easymon//lib/easymon/checks/active_record_mysql_writeable_check.rb#5
  def initialize(klass); end

  # source://easymon//lib/easymon/checks/active_record_mysql_writeable_check.rb#10
  def check; end

  # Returns the value of attribute klass.
  #
  # source://easymon//lib/easymon/checks/active_record_mysql_writeable_check.rb#3
  def klass; end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://easymon//lib/easymon/checks/active_record_mysql_writeable_check.rb#3
  def klass=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checks/active_record_mysql_writeable_check.rb#21
  def database_writeable?; end
end

class Easymon::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.0.8.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  class << self
    # source://actionpack/7.0.8.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

# source://easymon//lib/easymon/checklist.rb#4
class Easymon::Checklist
  extend ::Forwardable

  # @return [Checklist] a new instance of Checklist
  #
  # source://easymon//lib/easymon/checklist.rb#11
  def initialize(items = T.unsafe(nil)); end

  # source://easymon//lib/easymon/checklist.rb#47
  def as_json(*args); end

  # source://easymon//lib/easymon/checklist.rb#16
  def check; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # The following method could be implemented as a def_delegator by
  # extending Forwardable, but since we want to catch IndexError and
  # raise Easymon::NoSuchCheck, we'll be explicit here.
  #
  # source://easymon//lib/easymon/checklist.rb#64
  def fetch(name); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include?(*args, **_arg1, &block); end

  # Returns the value of attribute items.
  #
  # source://easymon//lib/easymon/checklist.rb#8
  def items; end

  # Sets the attribute items
  #
  # @param value the value to set the attribute items to.
  #
  # source://easymon//lib/easymon/checklist.rb#8
  def items=(_arg0); end

  # source://easymon//lib/easymon/checklist.rb#56
  def response_status; end

  # Returns the value of attribute results.
  #
  # source://easymon//lib/easymon/checklist.rb#9
  def results; end

  # Sets the attribute results
  #
  # @param value the value to set the attribute results to.
  #
  # source://easymon//lib/easymon/checklist.rb#9
  def results=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checklist.rb#51
  def success?; end

  # source://easymon//lib/easymon/checklist.rb#26
  def timing; end

  # source://easymon//lib/easymon/checklist.rb#39
  def to_hash; end

  # source://easymon//lib/easymon/checklist.rb#34
  def to_s; end

  # source://easymon//lib/easymon/checklist.rb#30
  def to_text; end
end

class Easymon::ChecksController < ::Easymon::ApplicationController
  def index; end
  def show; end

  private

  # source://actionview/7.0.8.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def add_prefix(result, message); end
  def authorize_request; end
  def render_result(message, status); end

  class << self
    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://activesupport/7.0.8.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end
  end
end

# source://easymon//lib/easymon/engine.rb#2
class Easymon::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://easymon//lib/easymon/checks/http_check.rb#4
class Easymon::HttpCheck
  # @return [HttpCheck] a new instance of HttpCheck
  #
  # source://easymon//lib/easymon/checks/http_check.rb#7
  def initialize(url); end

  # source://easymon//lib/easymon/checks/http_check.rb#11
  def check; end

  # Returns the value of attribute url.
  #
  # source://easymon//lib/easymon/checks/http_check.rb#5
  def url; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  #
  # source://easymon//lib/easymon/checks/http_check.rb#5
  def url=(_arg0); end

  private

  # source://easymon//lib/easymon/checks/http_check.rb#28
  def http_head(url); end

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checks/http_check.rb#22
  def http_up?(url); end
end

# source://easymon//lib/easymon/checks/memcached_check.rb#2
class Easymon::MemcachedCheck
  # @return [MemcachedCheck] a new instance of MemcachedCheck
  #
  # source://easymon//lib/easymon/checks/memcached_check.rb#5
  def initialize(cache); end

  # Returns the value of attribute cache.
  #
  # source://easymon//lib/easymon/checks/memcached_check.rb#3
  def cache; end

  # Sets the attribute cache
  #
  # @param value the value to set the attribute cache to.
  #
  # source://easymon//lib/easymon/checks/memcached_check.rb#3
  def cache=(_arg0); end

  # source://easymon//lib/easymon/checks/memcached_check.rb#9
  def check; end

  private

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checks/memcached_check.rb#20
  def memcached_up?; end
end

# source://easymon//lib/easymon.rb#22
class Easymon::NoSuchCheck < ::StandardError; end

# source://easymon//lib/easymon/checks/redis_check.rb#4
class Easymon::RedisCheck
  # @return [RedisCheck] a new instance of RedisCheck
  #
  # source://easymon//lib/easymon/checks/redis_check.rb#7
  def initialize(config); end

  # source://easymon//lib/easymon/checks/redis_check.rb#11
  def check; end

  # Returns the value of attribute config.
  #
  # source://easymon//lib/easymon/checks/redis_check.rb#5
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://easymon//lib/easymon/checks/redis_check.rb#5
  def config=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checks/redis_check.rb#22
  def redis_up?; end
end

# source://easymon//lib/easymon/checks/redis_writeable_check.rb#4
class Easymon::RedisWriteableCheck
  # @return [RedisWriteableCheck] a new instance of RedisWriteableCheck
  #
  # source://easymon//lib/easymon/checks/redis_writeable_check.rb#7
  def initialize(config); end

  # source://easymon//lib/easymon/checks/redis_writeable_check.rb#11
  def check; end

  # Returns the value of attribute config.
  #
  # source://easymon//lib/easymon/checks/redis_writeable_check.rb#5
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://easymon//lib/easymon/checks/redis_writeable_check.rb#5
  def config=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checks/redis_writeable_check.rb#19
  def redis_writeable?; end
end

# source://easymon//lib/easymon/repository.rb#2
class Easymon::Repository
  # Returns the value of attribute repository.
  #
  # source://easymon//lib/easymon/repository.rb#3
  def repository; end

  class << self
    # source://easymon//lib/easymon/repository.rb#19
    def add(name, check, is_critical = T.unsafe(nil)); end

    # source://easymon//lib/easymon/repository.rb#11
    def all; end

    # source://easymon//lib/easymon/repository.rb#32
    def critical; end

    # source://easymon//lib/easymon/repository.rb#5
    def fetch(name); end

    # source://easymon//lib/easymon/repository.rb#15
    def names; end

    # source://easymon//lib/easymon/repository.rb#24
    def remove(name); end

    # source://easymon//lib/easymon/repository.rb#28
    def repository; end
  end
end

# source://easymon//lib/easymon/result.rb#2
class Easymon::Result
  # @return [Result] a new instance of Result
  #
  # source://easymon//lib/easymon/result.rb#8
  def initialize(result, timing, is_critical = T.unsafe(nil)); end

  # source://easymon//lib/easymon/result.rb#31
  def as_json(options = T.unsafe(nil)); end

  # Returns the value of attribute critical.
  #
  # source://easymon//lib/easymon/result.rb#6
  def critical; end

  # Sets the attribute critical
  #
  # @param value the value to set the attribute critical to.
  #
  # source://easymon//lib/easymon/result.rb#6
  def critical=(_arg0); end

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/result.rb#19
  def is_critical?; end

  # Returns the value of attribute message.
  #
  # source://easymon//lib/easymon/result.rb#4
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://easymon//lib/easymon/result.rb#4
  def message=(_arg0); end

  # source://easymon//lib/easymon/result.rb#23
  def response_status; end

  # Returns the value of attribute success.
  #
  # source://easymon//lib/easymon/result.rb#3
  def success; end

  # Sets the attribute success
  #
  # @param value the value to set the attribute success to.
  #
  # source://easymon//lib/easymon/result.rb#3
  def success=(_arg0); end

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/result.rb#15
  def success?; end

  # Returns the value of attribute timing.
  #
  # source://easymon//lib/easymon/result.rb#5
  def timing; end

  # Sets the attribute timing
  #
  # @param value the value to set the attribute timing to.
  #
  # source://easymon//lib/easymon/result.rb#5
  def timing=(_arg0); end

  # source://easymon//lib/easymon/result.rb#35
  def to_hash; end

  # source://easymon//lib/easymon/result.rb#27
  def to_s; end
end

# source://easymon//lib/easymon/checks/semaphore_check.rb#2
class Easymon::SemaphoreCheck
  # @return [SemaphoreCheck] a new instance of SemaphoreCheck
  #
  # source://easymon//lib/easymon/checks/semaphore_check.rb#5
  def initialize(file_name); end

  # source://easymon//lib/easymon/checks/semaphore_check.rb#9
  def check; end

  # Returns the value of attribute file_name.
  #
  # source://easymon//lib/easymon/checks/semaphore_check.rb#3
  def file_name; end

  # Sets the attribute file_name
  #
  # @param value the value to set the attribute file_name to.
  #
  # source://easymon//lib/easymon/checks/semaphore_check.rb#3
  def file_name=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checks/semaphore_check.rb#20
  def semaphore_exists?; end
end

# source://easymon//lib/easymon/checks/split_active_record_check.rb#2
class Easymon::SplitActiveRecordCheck
  # Here we pass a block so we get a fresh instance of ActiveRecord::Base or
  # whatever other class we might be using to make database connections
  #
  # For example, given the following other class:
  # module Easymon
  #   class Base < ActiveRecord::Base
  #     def establish_connection(spec = nil)
  #       if spec
  #         super
  #       elsif config = Easymon.database_configuration
  #         super config
  #       end
  #     end
  #
  #     def database_configuration
  #       env = "#{Rails.env}_replica"
  #       config = YAML.load_file(Rails.root.join('config/database.yml'))[env]
  #     end
  #   end
  # end
  #
  # We would check both it and ActiveRecord::Base like so:
  # check = Easymon::SplitActiveRecordCheck.new {
  #   [ActiveRecord::Base.connection, Easymon::Base.connection]
  # }
  # Easymon::Repository.add("split-database", check)
  #
  # @return [SplitActiveRecordCheck] a new instance of SplitActiveRecordCheck
  #
  # source://easymon//lib/easymon/checks/split_active_record_check.rb#32
  def initialize(&block); end

  # Returns the value of attribute block.
  #
  # source://easymon//lib/easymon/checks/split_active_record_check.rb#3
  def block; end

  # Sets the attribute block
  #
  # @param value the value to set the attribute block to.
  #
  # source://easymon//lib/easymon/checks/split_active_record_check.rb#3
  def block=(_arg0); end

  # Assumes only 2 connections
  #
  # source://easymon//lib/easymon/checks/split_active_record_check.rb#37
  def check; end

  # Returns the value of attribute results.
  #
  # source://easymon//lib/easymon/checks/split_active_record_check.rb#4
  def results; end

  # Sets the attribute results
  #
  # @param value the value to set the attribute results to.
  #
  # source://easymon//lib/easymon/checks/split_active_record_check.rb#4
  def results=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://easymon//lib/easymon/checks/split_active_record_check.rb#49
  def database_up?(connection); end
end

# source://easymon//lib/easymon/testing.rb#2
module Easymon::Testing
  extend ::Easymon::Testing

  # source://easymon//lib/easymon/testing.rb#5
  def stub_check(name); end

  # source://easymon//lib/easymon/testing.rb#13
  def stub_service_failure(name); end

  # source://easymon//lib/easymon/testing.rb#9
  def stub_service_success(name); end
end

# source://easymon//lib/easymon/checks/traffic_enabled_check.rb#2
class Easymon::TrafficEnabledCheck < ::Easymon::SemaphoreCheck
  # source://easymon//lib/easymon/checks/traffic_enabled_check.rb#3
  def check; end
end
