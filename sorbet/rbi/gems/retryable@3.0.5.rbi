# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `retryable` gem.
# Please instead update this file by running `bin/tapioca gem retryable`.


# Runs a code block, and retries it when an exception occurs. It's great when working with flakey webservices (for example).
#
# source://retryable//lib/retryable/version.rb#1
module Retryable
  class << self
    # The configuration object.
    #
    # @see Retryable.configure
    #
    # source://retryable//lib/retryable.rb#35
    def configuration; end

    # A Retryable configuration object. Must act like a hash and return sensible
    # values for all Retryable configuration options. See Retryable::Configuration.
    #
    # source://retryable//lib/retryable.rb#12
    def configuration=(_arg0); end

    # Call this method to modify defaults in your initializers.
    #
    # @example
    #   Retryable.configure do |config|
    #   config.contexts     = {}
    #   config.ensure       = proc {}
    #   config.exception_cb = proc {}
    #   config.log_method   = proc {}
    #   config.matching     = /.*/
    #   config.not          = []
    #   config.on           = StandardError
    #   config.sleep        = 1
    #   config.sleep_method = ->(seconds) { Kernel.sleep(seconds) }
    #   config.tries        = 2
    #   end
    # @yield [configuration]
    #
    # source://retryable//lib/retryable.rb#29
    def configure; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def disable(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enabled?(*args, **_arg1, &block); end

    # source://retryable//lib/retryable.rb#52
    def retryable(options = T.unsafe(nil)); end

    # source://retryable//lib/retryable.rb#41
    def retryable_with_context(context_key, options = T.unsafe(nil), &block); end

    # source://retryable//lib/retryable.rb#41
    def with_context(context_key, options = T.unsafe(nil), &block); end

    private

    # @raise [ArgumentError]
    #
    # source://retryable//lib/retryable.rb#104
    def check_for_invalid_options(custom_options, default_options); end

    # @return [Boolean]
    #
    # source://retryable//lib/retryable.rb#110
    def matches?(message, candidates); end
  end
end

# Used to set up and modify settings for the retryable.
#
# source://retryable//lib/retryable/configuration.rb#3
class Retryable::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://retryable//lib/retryable/configuration.rb#21
  def initialize; end

  # Allows config options to be read like a hash
  #
  # @param option [Symbol] Key for a given attribute
  #
  # source://retryable//lib/retryable/configuration.rb#48
  def [](option); end

  # source://retryable//lib/retryable/configuration.rb#17
  def contexts; end

  # source://retryable//lib/retryable/configuration.rb#17
  def contexts=(_arg0); end

  # source://retryable//lib/retryable/configuration.rb#41
  def disable; end

  # source://retryable//lib/retryable/configuration.rb#36
  def enable; end

  # Returns the value of attribute enabled.
  #
  # source://retryable//lib/retryable/configuration.rb#19
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://retryable//lib/retryable/configuration.rb#19
  def enabled=(_arg0); end

  # Returns the value of attribute enabled.
  #
  # source://retryable//lib/retryable/configuration.rb#19
  def enabled?; end

  # source://retryable//lib/retryable/configuration.rb#17
  def ensure; end

  # source://retryable//lib/retryable/configuration.rb#17
  def ensure=(_arg0); end

  # source://retryable//lib/retryable/configuration.rb#17
  def exception_cb; end

  # source://retryable//lib/retryable/configuration.rb#17
  def exception_cb=(_arg0); end

  # source://retryable//lib/retryable/configuration.rb#17
  def log_method; end

  # source://retryable//lib/retryable/configuration.rb#17
  def log_method=(_arg0); end

  # source://retryable//lib/retryable/configuration.rb#17
  def matching; end

  # source://retryable//lib/retryable/configuration.rb#17
  def matching=(_arg0); end

  # Returns a hash of all configurable options merged with +hash+
  #
  # @param hash [Hash] A set of configuration options that will take precedence over the defaults
  #
  # source://retryable//lib/retryable/configuration.rb#62
  def merge(hash); end

  # source://retryable//lib/retryable/configuration.rb#17
  def not; end

  # source://retryable//lib/retryable/configuration.rb#17
  def not=(_arg0); end

  # source://retryable//lib/retryable/configuration.rb#17
  def on; end

  # source://retryable//lib/retryable/configuration.rb#17
  def on=(_arg0); end

  # source://retryable//lib/retryable/configuration.rb#17
  def sleep; end

  # source://retryable//lib/retryable/configuration.rb#17
  def sleep=(_arg0); end

  # source://retryable//lib/retryable/configuration.rb#17
  def sleep_method; end

  # source://retryable//lib/retryable/configuration.rb#17
  def sleep_method=(_arg0); end

  # Returns a hash of all configurable options
  #
  # source://retryable//lib/retryable/configuration.rb#53
  def to_hash; end

  # source://retryable//lib/retryable/configuration.rb#17
  def tries; end

  # source://retryable//lib/retryable/configuration.rb#17
  def tries=(_arg0); end
end

# source://retryable//lib/retryable/configuration.rb#4
Retryable::Configuration::VALID_OPTION_KEYS = T.let(T.unsafe(nil), Array)

# This module holds the Retryable version information.
#
# source://retryable//lib/retryable/version.rb#3
module Retryable::Version
  private

  # @return [Integer]
  #
  # source://retryable//lib/retryable/version.rb#7
  def major; end

  # @return [Integer]
  #
  # source://retryable//lib/retryable/version.rb#12
  def minor; end

  # @return [Integer]
  #
  # source://retryable//lib/retryable/version.rb#17
  def patch; end

  # @return [Hash]
  #
  # source://retryable//lib/retryable/version.rb#31
  def to_a; end

  # @return [Hash]
  #
  # source://retryable//lib/retryable/version.rb#22
  def to_h; end

  # @return [String]
  #
  # source://retryable//lib/retryable/version.rb#36
  def to_s; end

  class << self
    # @return [Integer]
    #
    # source://retryable//lib/retryable/version.rb#7
    def major; end

    # @return [Integer]
    #
    # source://retryable//lib/retryable/version.rb#12
    def minor; end

    # @return [Integer]
    #
    # source://retryable//lib/retryable/version.rb#17
    def patch; end

    # @return [Hash]
    #
    # source://retryable//lib/retryable/version.rb#31
    def to_a; end

    # @return [Hash]
    #
    # source://retryable//lib/retryable/version.rb#22
    def to_h; end

    # @return [String]
    #
    # source://retryable//lib/retryable/version.rb#36
    def to_s; end
  end
end
