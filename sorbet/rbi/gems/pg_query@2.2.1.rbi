# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pg_query` gem.
# Please instead update this file by running `bin/tapioca gem pg_query`.


# source://pg_query//lib/pg_query/version.rb#1
module PgQuery
  class << self
    def _raw_scan(_arg0); end

    # Reconstruct all of the parsed queries into their original form
    #
    # source://pg_query//lib/pg_query/deparse.rb#9
    def deparse(tree); end

    # Convenience method for deparsing an expression
    #
    # source://pg_query//lib/pg_query/deparse.rb#25
    def deparse_expr(expr); end

    def deparse_protobuf(_arg0); end

    # Convenience method for deparsing a statement of a specific type
    #
    # source://pg_query//lib/pg_query/deparse.rb#20
    def deparse_stmt(stmt); end

    def fingerprint(_arg0); end
    def hash_xxh3_64(_arg0, _arg1); end
    def normalize(_arg0); end

    # source://pg_query//lib/pg_query/parse.rb#2
    def parse(query); end

    def parse_protobuf(_arg0); end

    # source://pg_query//lib/pg_query/scan.rb#10
    def scan(query); end
  end
end

class PgQuery::A_ArrayExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::A_Const
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::A_Expr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::A_Expr_Kind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_BETWEEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_BETWEEN_SYM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_DISTINCT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_ILIKE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_IN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_LIKE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_NOT_BETWEEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_NOT_BETWEEN_SYM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_NOT_DISTINCT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_NULLIF = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_OF = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_OP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_OP_ALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_OP_ANY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_PAREN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::AEXPR_SIMILAR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3161
PgQuery::A_Expr_Kind::A_EXPR_KIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::A_Indices
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::A_Indirection
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::A_Star
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AccessPriv
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::AggSplit
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3204
PgQuery::AggSplit::AGGSPLIT_FINAL_DESERIAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3204
PgQuery::AggSplit::AGGSPLIT_INITIAL_SERIAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3204
PgQuery::AggSplit::AGGSPLIT_SIMPLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3204
PgQuery::AggSplit::AGG_SPLIT_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::AggStrategy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3203
PgQuery::AggStrategy::AGG_HASHED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3203
PgQuery::AggStrategy::AGG_MIXED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3203
PgQuery::AggStrategy::AGG_PLAIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3203
PgQuery::AggStrategy::AGG_SORTED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3203
PgQuery::AggStrategy::AGG_STRATEGY_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::Aggref
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::Alias
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterCollationStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterDatabaseSetStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterDatabaseStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterDefaultPrivilegesStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterDomainStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterEnumStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterEventTrigStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterExtensionContentsStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterExtensionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterFdwStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterForeignServerStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterFunctionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterObjectDependsStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterObjectSchemaStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterOpFamilyStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterOperatorStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterOwnerStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterPolicyStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterPublicationStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterRoleSetStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterRoleStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterSeqStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterStatsStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterSubscriptionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::AlterSubscriptionType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3187
PgQuery::AlterSubscriptionType::ALTER_SUBSCRIPTION_CONNECTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3187
PgQuery::AlterSubscriptionType::ALTER_SUBSCRIPTION_ENABLED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3187
PgQuery::AlterSubscriptionType::ALTER_SUBSCRIPTION_OPTIONS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3187
PgQuery::AlterSubscriptionType::ALTER_SUBSCRIPTION_PUBLICATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3187
PgQuery::AlterSubscriptionType::ALTER_SUBSCRIPTION_REFRESH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3187
PgQuery::AlterSubscriptionType::ALTER_SUBSCRIPTION_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::AlterSystemStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::AlterTSConfigType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3186
PgQuery::AlterTSConfigType::ALTER_TSCONFIG_ADD_MAPPING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3186
PgQuery::AlterTSConfigType::ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3186
PgQuery::AlterTSConfigType::ALTER_TSCONFIG_DROP_MAPPING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3186
PgQuery::AlterTSConfigType::ALTER_TSCONFIG_REPLACE_DICT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3186
PgQuery::AlterTSConfigType::ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3186
PgQuery::AlterTSConfigType::ALTER_TSCONFIG_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::AlterTSConfigurationStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterTSDictionaryStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterTableCmd
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterTableMoveAllStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterTableSpaceOptionsStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterTableStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::AlterTableType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::ALTER_TABLE_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddColumn = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddColumnRecurse = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddColumnToView = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddConstraint = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddConstraintRecurse = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddIdentity = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddIndex = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddIndexConstraint = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddInherit = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AddOf = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AlterColumnGenericOptions = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AlterColumnType = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AlterConstraint = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_AttachPartition = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ChangeOwner = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_CheckNotNull = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ClusterOn = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ColumnDefault = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_CookedColumnDefault = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DetachPartition = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DisableRowSecurity = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DisableRule = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DisableTrig = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DisableTrigAll = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DisableTrigUser = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropCluster = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropColumn = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropColumnRecurse = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropConstraint = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropConstraintRecurse = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropExpression = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropIdentity = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropInherit = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropNotNull = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropOf = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_DropOids = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableAlwaysRule = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableAlwaysTrig = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableReplicaRule = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableReplicaTrig = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableRowSecurity = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableRule = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableTrig = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableTrigAll = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_EnableTrigUser = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ForceRowSecurity = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_GenericOptions = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_NoForceRowSecurity = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ReAddComment = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ReAddConstraint = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ReAddDomainConstraint = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ReAddIndex = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ReplaceRelOptions = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ReplicaIdentity = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ResetOptions = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ResetRelOptions = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetIdentity = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetLogged = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetNotNull = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetOptions = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetRelOptions = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetStatistics = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetStorage = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetTableSpace = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_SetUnLogged = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ValidateConstraint = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3173
PgQuery::AlterTableType::AT_ValidateConstraintRecurse = T.let(T.unsafe(nil), Integer)

class PgQuery::AlterTypeStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlterUserMappingStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::AlternativeSubPlan
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ArrayCoerceExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ArrayExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::BitString
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::BoolExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::BoolExprType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3192
PgQuery::BoolExprType::AND_EXPR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3192
PgQuery::BoolExprType::BOOL_EXPR_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3192
PgQuery::BoolExprType::NOT_EXPR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3192
PgQuery::BoolExprType::OR_EXPR = T.let(T.unsafe(nil), Integer)

module PgQuery::BoolTestType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3200
PgQuery::BoolTestType::BOOL_TEST_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3200
PgQuery::BoolTestType::IS_FALSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3200
PgQuery::BoolTestType::IS_NOT_FALSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3200
PgQuery::BoolTestType::IS_NOT_TRUE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3200
PgQuery::BoolTestType::IS_NOT_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3200
PgQuery::BoolTestType::IS_TRUE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3200
PgQuery::BoolTestType::IS_UNKNOWN = T.let(T.unsafe(nil), Integer)

class PgQuery::BooleanTest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::CTEMaterialize
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3169
PgQuery::CTEMaterialize::CTEMATERIALIZE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3169
PgQuery::CTEMaterialize::CTEMaterializeAlways = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3169
PgQuery::CTEMaterialize::CTEMaterializeDefault = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3169
PgQuery::CTEMaterialize::CTEMaterializeNever = T.let(T.unsafe(nil), Integer)

class PgQuery::CallContext
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CallStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CaseExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CaseTestExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CaseWhen
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CheckPointStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ClosePortalStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::ClusterOption
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3183
PgQuery::ClusterOption::CLUOPT_RECHECK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3183
PgQuery::ClusterOption::CLUOPT_VERBOSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3183
PgQuery::ClusterOption::CLUSTER_OPTION_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::ClusterStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::CmdType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3201
PgQuery::CmdType::CMD_DELETE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3201
PgQuery::CmdType::CMD_INSERT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3201
PgQuery::CmdType::CMD_NOTHING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3201
PgQuery::CmdType::CMD_SELECT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3201
PgQuery::CmdType::CMD_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3201
PgQuery::CmdType::CMD_UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3201
PgQuery::CmdType::CMD_UPDATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3201
PgQuery::CmdType::CMD_UTILITY = T.let(T.unsafe(nil), Integer)

class PgQuery::CoalesceExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CoerceToDomain
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CoerceToDomainValue
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CoerceViaIO
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::CoercionContext
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3190
PgQuery::CoercionContext::COERCION_ASSIGNMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3190
PgQuery::CoercionContext::COERCION_CONTEXT_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3190
PgQuery::CoercionContext::COERCION_EXPLICIT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3190
PgQuery::CoercionContext::COERCION_IMPLICIT = T.let(T.unsafe(nil), Integer)

module PgQuery::CoercionForm
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3191
PgQuery::CoercionForm::COERCE_EXPLICIT_CALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3191
PgQuery::CoercionForm::COERCE_EXPLICIT_CAST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3191
PgQuery::CoercionForm::COERCE_IMPLICIT_CAST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3191
PgQuery::CoercionForm::COERCION_FORM_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::CollateClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CollateExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ColumnDef
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ColumnRef
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CommentStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CommonTableExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CompositeTypeStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::ConstrType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_ATTR_DEFERRABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_ATTR_DEFERRED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_ATTR_IMMEDIATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_ATTR_NOT_DEFERRABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_CHECK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_EXCLUSION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_FOREIGN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_GENERATED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_IDENTITY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_NOTNULL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_NULL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_PRIMARY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3176
PgQuery::ConstrType::CONSTR_UNIQUE = T.let(T.unsafe(nil), Integer)

class PgQuery::Constraint
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ConstraintsSetStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ConvertRowtypeExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CopyStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateAmStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateCastStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateConversionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateDomainStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateEnumStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateEventTrigStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateExtensionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateFdwStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateForeignServerStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateForeignTableStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateFunctionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateOpClassItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateOpClassStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateOpFamilyStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreatePLangStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreatePolicyStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreatePublicationStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateRangeStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateRoleStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateSchemaStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateSeqStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateStatsStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateSubscriptionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateTableAsStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateTableSpaceStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateTransformStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateTrigStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreateUserMappingStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CreatedbStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::CurrentOfExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DeallocateStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DeclareCursorStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DefElem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::DefElemAction
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3164
PgQuery::DefElemAction::DEFELEM_ADD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3164
PgQuery::DefElemAction::DEFELEM_DROP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3164
PgQuery::DefElemAction::DEFELEM_SET = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3164
PgQuery::DefElemAction::DEFELEM_UNSPEC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3164
PgQuery::DefElemAction::DEF_ELEM_ACTION_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::DefineStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DeleteStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::DiscardMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3184
PgQuery::DiscardMode::DISCARD_ALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3184
PgQuery::DiscardMode::DISCARD_MODE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3184
PgQuery::DiscardMode::DISCARD_PLANS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3184
PgQuery::DiscardMode::DISCARD_SEQUENCES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3184
PgQuery::DiscardMode::DISCARD_TEMP = T.let(T.unsafe(nil), Integer)

class PgQuery::DiscardStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DistinctExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DoStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::DropBehavior
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3172
PgQuery::DropBehavior::DROP_BEHAVIOR_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3172
PgQuery::DropBehavior::DROP_CASCADE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3172
PgQuery::DropBehavior::DROP_RESTRICT = T.let(T.unsafe(nil), Integer)

class PgQuery::DropOwnedStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DropRoleStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DropStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DropSubscriptionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DropTableSpaceStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DropUserMappingStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::DropdbStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ExecuteStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ExplainStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::Expr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::FetchDirection
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3179
PgQuery::FetchDirection::FETCH_ABSOLUTE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3179
PgQuery::FetchDirection::FETCH_BACKWARD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3179
PgQuery::FetchDirection::FETCH_DIRECTION_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3179
PgQuery::FetchDirection::FETCH_FORWARD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3179
PgQuery::FetchDirection::FETCH_RELATIVE = T.let(T.unsafe(nil), Integer)

class PgQuery::FetchStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::FieldSelect
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::FieldStore
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::Float
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::FromExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::FuncCall
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::FuncExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::FunctionParameter
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::FunctionParameterMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3180
PgQuery::FunctionParameterMode::FUNCTION_PARAMETER_MODE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3180
PgQuery::FunctionParameterMode::FUNC_PARAM_IN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3180
PgQuery::FunctionParameterMode::FUNC_PARAM_INOUT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3180
PgQuery::FunctionParameterMode::FUNC_PARAM_OUT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3180
PgQuery::FunctionParameterMode::FUNC_PARAM_TABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3180
PgQuery::FunctionParameterMode::FUNC_PARAM_VARIADIC = T.let(T.unsafe(nil), Integer)

class PgQuery::GrantRoleStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::GrantStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::GrantTargetType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3174
PgQuery::GrantTargetType::ACL_TARGET_ALL_IN_SCHEMA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3174
PgQuery::GrantTargetType::ACL_TARGET_DEFAULTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3174
PgQuery::GrantTargetType::ACL_TARGET_OBJECT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3174
PgQuery::GrantTargetType::GRANT_TARGET_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::GroupingFunc
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::GroupingSet
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::GroupingSetKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3168
PgQuery::GroupingSetKind::GROUPING_SET_CUBE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3168
PgQuery::GroupingSetKind::GROUPING_SET_EMPTY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3168
PgQuery::GroupingSetKind::GROUPING_SET_KIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3168
PgQuery::GroupingSetKind::GROUPING_SET_ROLLUP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3168
PgQuery::GroupingSetKind::GROUPING_SET_SETS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3168
PgQuery::GroupingSetKind::GROUPING_SET_SIMPLE = T.let(T.unsafe(nil), Integer)

class PgQuery::ImportForeignSchemaStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::ImportForeignSchemaType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3177
PgQuery::ImportForeignSchemaType::FDW_IMPORT_SCHEMA_ALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3177
PgQuery::ImportForeignSchemaType::FDW_IMPORT_SCHEMA_EXCEPT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3177
PgQuery::ImportForeignSchemaType::FDW_IMPORT_SCHEMA_LIMIT_TO = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3177
PgQuery::ImportForeignSchemaType::IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::IndexElem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::IndexStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::InferClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::InferenceElem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::InlineCodeBlock
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::InsertStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::IntList
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::Integer
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::IntoClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::JoinExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::JoinType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_ANTI = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_FULL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_INNER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_LEFT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_RIGHT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_SEMI = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_UNIQUE_INNER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3202
PgQuery::JoinType::JOIN_UNIQUE_OUTER = T.let(T.unsafe(nil), Integer)

module PgQuery::KeywordKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3212
PgQuery::KeywordKind::COL_NAME_KEYWORD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3212
PgQuery::KeywordKind::NO_KEYWORD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3212
PgQuery::KeywordKind::RESERVED_KEYWORD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3212
PgQuery::KeywordKind::TYPE_FUNC_NAME_KEYWORD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3212
PgQuery::KeywordKind::UNRESERVED_KEYWORD = T.let(T.unsafe(nil), Integer)

# blocks ROW SHARE/SELECT...FOR UPDATE
#
# source://pg_query//lib/pg_query/constants.rb#11
PgQuery::LOCK_MODE_ACCESS_EXCLUSIVE_LOCK = T.let(T.unsafe(nil), Integer)

# NoLock is not a lock mode, but a flag value meaning "don't get a lock"
#
# source://pg_query//lib/pg_query/constants.rb#4
PgQuery::LOCK_MODE_ACCESS_SHARE_LOCK = T.let(T.unsafe(nil), Integer)

# like EXCLUSIVE MODE, but allows ROW SHARE
#
# source://pg_query//lib/pg_query/constants.rb#10
PgQuery::LOCK_MODE_EXCLUSIVE_LOCK = T.let(T.unsafe(nil), Integer)

# From Postgres source: src/include/storage/lockdefs.h
#
# source://pg_query//lib/pg_query/constants.rb#3
PgQuery::LOCK_MODE_NO_LOCK = T.let(T.unsafe(nil), Integer)

# SELECT FOR UPDATE/FOR SHARE
#
# source://pg_query//lib/pg_query/constants.rb#6
PgQuery::LOCK_MODE_ROW_EXCLUSIVE_LOCK = T.let(T.unsafe(nil), Integer)

# SELECT
#
# source://pg_query//lib/pg_query/constants.rb#5
PgQuery::LOCK_MODE_ROW_SHARE_LOCK = T.let(T.unsafe(nil), Integer)

# VACUUM (non-FULL),ANALYZE, CREATE INDEX CONCURRENTLY
#
# source://pg_query//lib/pg_query/constants.rb#8
PgQuery::LOCK_MODE_SHARE_LOCK = T.let(T.unsafe(nil), Integer)

# CREATE INDEX (WITHOUT CONCURRENTLY)
#
# source://pg_query//lib/pg_query/constants.rb#9
PgQuery::LOCK_MODE_SHARE_ROW_EXCLUSIVE_LOCK = T.let(T.unsafe(nil), Integer)

# INSERT, UPDATE, DELETE
#
# source://pg_query//lib/pg_query/constants.rb#7
PgQuery::LOCK_MODE_SHARE_UPDATE_EXCLUSIVE_LOCK = T.let(T.unsafe(nil), Integer)

module PgQuery::LimitOption
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3208
PgQuery::LimitOption::LIMIT_OPTION_COUNT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3208
PgQuery::LimitOption::LIMIT_OPTION_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3208
PgQuery::LimitOption::LIMIT_OPTION_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3208
PgQuery::LimitOption::LIMIT_OPTION_WITH_TIES = T.let(T.unsafe(nil), Integer)

class PgQuery::List
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ListenStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::LoadStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::LockClauseStrength
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3209
PgQuery::LockClauseStrength::LCS_FORKEYSHARE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3209
PgQuery::LockClauseStrength::LCS_FORNOKEYUPDATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3209
PgQuery::LockClauseStrength::LCS_FORSHARE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3209
PgQuery::LockClauseStrength::LCS_FORUPDATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3209
PgQuery::LockClauseStrength::LCS_NONE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3209
PgQuery::LockClauseStrength::LOCK_CLAUSE_STRENGTH_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::LockStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::LockTupleMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3211
PgQuery::LockTupleMode::LOCK_TUPLE_MODE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3211
PgQuery::LockTupleMode::LockTupleExclusive = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3211
PgQuery::LockTupleMode::LockTupleKeyShare = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3211
PgQuery::LockTupleMode::LockTupleNoKeyExclusive = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3211
PgQuery::LockTupleMode::LockTupleShare = T.let(T.unsafe(nil), Integer)

module PgQuery::LockWaitPolicy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3210
PgQuery::LockWaitPolicy::LOCK_WAIT_POLICY_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3210
PgQuery::LockWaitPolicy::LockWaitBlock = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3210
PgQuery::LockWaitPolicy::LockWaitError = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3210
PgQuery::LockWaitPolicy::LockWaitSkip = T.let(T.unsafe(nil), Integer)

class PgQuery::LockingClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::MinMaxExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::MinMaxOp
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3195
PgQuery::MinMaxOp::IS_GREATEST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3195
PgQuery::MinMaxOp::IS_LEAST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3195
PgQuery::MinMaxOp::MIN_MAX_OP_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::MultiAssignRef
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::NamedArgExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::NextValueExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# Patch the auto-generated generic node type with additional convenience functions
#
# source://pg_query//lib/pg_query/node.rb#3
class PgQuery::Node
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end

  # source://pg_query//lib/pg_query/node.rb#4
  def inspect; end

  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end

    # Make it easier to initialize nodes from a given node child object
    #
    # source://pg_query//lib/pg_query/node.rb#9
    def from(node_field_val); end

    # source://pg_query//lib/pg_query/node.rb#27
    def from_integer(ival); end

    # Make it easier to initialize value nodes
    #
    # source://pg_query//lib/pg_query/node.rb#23
    def from_string(str); end
  end
end

class PgQuery::NotifyStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::Null
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::NullIfExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::NullTest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::NullTestType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3199
PgQuery::NullTestType::IS_NOT_NULL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3199
PgQuery::NullTestType::IS_NULL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3199
PgQuery::NullTestType::NULL_TEST_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::ObjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_ACCESS_METHOD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_AGGREGATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_AMOP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_AMPROC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_ATTRIBUTE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_CAST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_COLLATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_COLUMN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_CONVERSION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_DATABASE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_DEFACL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_DOMAIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_DOMCONSTRAINT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_EVENT_TRIGGER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_EXTENSION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_FDW = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_FOREIGN_SERVER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_FOREIGN_TABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_FUNCTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_INDEX = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_LANGUAGE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_LARGEOBJECT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_MATVIEW = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_OPCLASS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_OPERATOR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_OPFAMILY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_POLICY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_PROCEDURE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_PUBLICATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_PUBLICATION_REL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_ROLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_ROUTINE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_RULE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_SCHEMA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_SEQUENCE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_STATISTIC_EXT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_SUBSCRIPTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TABCONSTRAINT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TABLESPACE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TRANSFORM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TRIGGER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TSCONFIGURATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TSDICTIONARY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TSPARSER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TSTEMPLATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TYPE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_USER_MAPPING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3171
PgQuery::ObjectType::OBJECT_VIEW = T.let(T.unsafe(nil), Integer)

class PgQuery::ObjectWithArgs
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::OidList
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::OnCommitAction
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3188
PgQuery::OnCommitAction::ONCOMMIT_DELETE_ROWS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3188
PgQuery::OnCommitAction::ONCOMMIT_DROP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3188
PgQuery::OnCommitAction::ONCOMMIT_NOOP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3188
PgQuery::OnCommitAction::ONCOMMIT_PRESERVE_ROWS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3188
PgQuery::OnCommitAction::ON_COMMIT_ACTION_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::OnConflictAction
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3207
PgQuery::OnConflictAction::ONCONFLICT_NONE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3207
PgQuery::OnConflictAction::ONCONFLICT_NOTHING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3207
PgQuery::OnConflictAction::ONCONFLICT_UPDATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3207
PgQuery::OnConflictAction::ON_CONFLICT_ACTION_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::OnConflictClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::OnConflictExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::OpExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::OverridingKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3157
PgQuery::OverridingKind::OVERRIDING_KIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3157
PgQuery::OverridingKind::OVERRIDING_NOT_SET = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3157
PgQuery::OverridingKind::OVERRIDING_SYSTEM_VALUE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3157
PgQuery::OverridingKind::OVERRIDING_USER_VALUE = T.let(T.unsafe(nil), Integer)

PgQuery::PG_MAJORVERSION = T.let(T.unsafe(nil), String)
PgQuery::PG_VERSION = T.let(T.unsafe(nil), String)
PgQuery::PG_VERSION_NUM = T.let(T.unsafe(nil), Integer)

class PgQuery::Param
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::ParamKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3189
PgQuery::ParamKind::PARAM_EXEC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3189
PgQuery::ParamKind::PARAM_EXTERN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3189
PgQuery::ParamKind::PARAM_KIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3189
PgQuery::ParamKind::PARAM_MULTIEXPR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3189
PgQuery::ParamKind::PARAM_SUBLINK = T.let(T.unsafe(nil), Integer)

class PgQuery::ParamRef
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://pg_query//lib/pg_query/parse_error.rb#2
class PgQuery::ParseError < ::ArgumentError
  # @return [ParseError] a new instance of ParseError
  #
  # source://pg_query//lib/pg_query/parse_error.rb#4
  def initialize(message, source_file, source_line, location); end

  # Returns the value of attribute location.
  #
  # source://pg_query//lib/pg_query/parse_error.rb#3
  def location; end
end

class PgQuery::ParseResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://pg_query//lib/pg_query/parse.rb#26
class PgQuery::ParserResult
  # @return [ParserResult] a new instance of ParserResult
  #
  # source://pg_query//lib/pg_query/parse.rb#31
  def initialize(query, tree, warnings = T.unsafe(nil)); end

  # source://pg_query//lib/pg_query/parse.rb#81
  def aliases; end

  # source://pg_query//lib/pg_query/parse.rb#72
  def call_functions; end

  # source://pg_query//lib/pg_query/parse.rb#76
  def cte_names; end

  # source://pg_query//lib/pg_query/parse.rb#68
  def ddl_functions; end

  # source://pg_query//lib/pg_query/parse.rb#57
  def ddl_tables; end

  # source://pg_query//lib/pg_query/deparse.rb#3
  def deparse; end

  # source://pg_query//lib/pg_query/parse.rb#53
  def dml_tables; end

  # source://pg_query//lib/pg_query/parse.rb#41
  def dup_tree; end

  # Returns a list of columns that the query filters by - this excludes the
  # target list, but includes things like JOIN condition and WHERE clause.
  #
  # Note: This also traverses into sub-selects.
  #
  # source://pg_query//lib/pg_query/filter_columns.rb#7
  def filter_columns; end

  # source://pg_query//lib/pg_query/fingerprint.rb#5
  def fingerprint; end

  # Returns function names, ignoring their argument types. This may be insufficient
  # if you need to disambiguate two functions with the same name but different argument
  # types.
  #
  # source://pg_query//lib/pg_query/parse.rb#64
  def functions; end

  # source://pg_query//lib/pg_query/parse.rb#91
  def functions_with_details; end

  # source://pg_query//lib/pg_query/param_refs.rb#3
  def param_refs; end

  # Returns the value of attribute query.
  #
  # source://pg_query//lib/pg_query/parse.rb#27
  def query; end

  # source://pg_query//lib/pg_query/parse.rb#49
  def select_tables; end

  # source://pg_query//lib/pg_query/parse.rb#45
  def tables; end

  # source://pg_query//lib/pg_query/parse.rb#86
  def tables_with_details; end

  # Returns the value of attribute tree.
  #
  # source://pg_query//lib/pg_query/parse.rb#28
  def tree; end

  # Truncates the query string to be below the specified length, first trying to
  # omit less important parts of the query, and only then cutting off the end.
  #
  # source://pg_query//lib/pg_query/truncate.rb#8
  def truncate(max_length); end

  # source://pg_query//lib/pg_query/treewalker.rb#3
  def walk!; end

  # Returns the value of attribute warnings.
  #
  # source://pg_query//lib/pg_query/parse.rb#29
  def warnings; end

  protected

  # source://pg_query//lib/pg_query/filter_columns.rb#95
  def conditions_from_join_clauses(from_clause); end

  # Parses the query and finds table and function references
  #
  # Note we use ".to_ary" on arrays from the Protobuf library before
  # passing them to concat, because of https://bugs.ruby-lang.org/issues/18140
  #
  # source://pg_query//lib/pg_query/parse.rb#102
  def load_objects!; end

  # FIXME
  #
  # source://pg_query//lib/pg_query/parse.rb#332
  def statements_and_cte_names_for_with_clause(with_clause); end

  private

  # source://pg_query//lib/pg_query/truncate.rb#125
  def cols_len(cols); end

  # source://pg_query//lib/pg_query/truncate.rb#60
  def find_possible_truncations; end

  # source://pg_query//lib/pg_query/treewalker.rb#36
  def find_tree_location(tree, searched_location); end

  # source://pg_query//lib/pg_query/fingerprint.rb#131
  def fingerprint_list(values, hash, parent_node_name, parent_field_name); end

  # source://pg_query//lib/pg_query/fingerprint.rb#71
  def fingerprint_node(node, hash, parent_node_name = T.unsafe(nil), parent_field_name = T.unsafe(nil)); end

  # source://pg_query//lib/pg_query/fingerprint.rb#152
  def fingerprint_tree(hash); end

  # source://pg_query//lib/pg_query/fingerprint.rb#38
  def fingerprint_value(val, hash, parent_node_name, parent_field_name, need_to_write_name); end

  # @return [Boolean]
  #
  # source://pg_query//lib/pg_query/fingerprint.rb#34
  def ignored_fingerprint_value?(val); end

  # @return [Boolean]
  #
  # source://pg_query//lib/pg_query/fingerprint.rb#62
  def ignored_node_type?(node); end

  # source://pg_query//lib/pg_query/fingerprint.rb#67
  def node_protobuf_field_name_to_json_name(node_class, field); end

  # source://pg_query//lib/pg_query/param_refs.rb#42
  def param_ref_length(paramref_node); end

  # source://pg_query//lib/pg_query/truncate.rb#97
  def select_target_list_len(target_list); end

  # source://pg_query//lib/pg_query/truncate.rb#106
  def select_values_lists_len(values_lists); end

  # source://pg_query//lib/pg_query/treewalker.rb#11
  def treewalker!(tree); end

  # source://pg_query//lib/pg_query/truncate.rb#115
  def update_target_list_len(target_list); end
end

# source://pg_query//lib/pg_query/fingerprint.rb#14
PgQuery::ParserResult::FINGERPRINT_VERSION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/fingerprint.rb#16
class PgQuery::ParserResult::FingerprintSubHash
  # @return [FingerprintSubHash] a new instance of FingerprintSubHash
  #
  # source://pg_query//lib/pg_query/fingerprint.rb#19
  def initialize; end

  # source://pg_query//lib/pg_query/fingerprint.rb#27
  def flush_to(hash); end

  # Returns the value of attribute parts.
  #
  # source://pg_query//lib/pg_query/fingerprint.rb#17
  def parts; end

  # source://pg_query//lib/pg_query/fingerprint.rb#23
  def update(part); end
end

# source://pg_query//lib/pg_query/truncate.rb#4
class PgQuery::ParserResult::PossibleTruncation < ::Struct
  # Returns the value of attribute is_array
  #
  # @return [Object] the current value of is_array
  def is_array; end

  # Sets the attribute is_array
  #
  # @param value [Object] the value to set the attribute is_array to.
  # @return [Object] the newly set value
  def is_array=(_); end

  # Returns the value of attribute length
  #
  # @return [Object] the current value of length
  def length; end

  # Sets the attribute length
  #
  # @param value [Object] the value to set the attribute length to.
  # @return [Object] the newly set value
  def length=(_); end

  # Returns the value of attribute location
  #
  # @return [Object] the current value of location
  def location; end

  # Sets the attribute location
  #
  # @param value [Object] the value to set the attribute location to.
  # @return [Object] the newly set value
  def location=(_); end

  # Returns the value of attribute node_type
  #
  # @return [Object] the current value of node_type
  def node_type; end

  # Sets the attribute node_type
  #
  # @param value [Object] the value to set the attribute node_type to.
  # @return [Object] the newly set value
  def node_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class PgQuery::PartitionBoundSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::PartitionCmd
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::PartitionElem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::PartitionRangeDatum
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::PartitionRangeDatumKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3165
PgQuery::PartitionRangeDatumKind::PARTITION_RANGE_DATUM_KIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3165
PgQuery::PartitionRangeDatumKind::PARTITION_RANGE_DATUM_MAXVALUE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3165
PgQuery::PartitionRangeDatumKind::PARTITION_RANGE_DATUM_MINVALUE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3165
PgQuery::PartitionRangeDatumKind::PARTITION_RANGE_DATUM_VALUE = T.let(T.unsafe(nil), Integer)

class PgQuery::PartitionSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::PrepareStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::Query
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::QuerySource
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3158
PgQuery::QuerySource::QSRC_INSTEAD_RULE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3158
PgQuery::QuerySource::QSRC_NON_INSTEAD_RULE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3158
PgQuery::QuerySource::QSRC_ORIGINAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3158
PgQuery::QuerySource::QSRC_PARSER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3158
PgQuery::QuerySource::QSRC_QUAL_INSTEAD_RULE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3158
PgQuery::QuerySource::QUERY_SOURCE_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::RTEKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTEKIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_CTE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_FUNCTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_JOIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_NAMEDTUPLESTORE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_RELATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_RESULT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_SUBQUERY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_TABLEFUNC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3166
PgQuery::RTEKind::RTE_VALUES = T.let(T.unsafe(nil), Integer)

class PgQuery::RangeFunction
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RangeSubselect
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RangeTableFunc
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RangeTableFuncCol
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RangeTableSample
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RangeTblEntry
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RangeTblFunction
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RangeTblRef
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RangeVar
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RawStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ReassignOwnedStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RefreshMatViewStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::ReindexObjectType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3185
PgQuery::ReindexObjectType::REINDEX_OBJECT_DATABASE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3185
PgQuery::ReindexObjectType::REINDEX_OBJECT_INDEX = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3185
PgQuery::ReindexObjectType::REINDEX_OBJECT_SCHEMA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3185
PgQuery::ReindexObjectType::REINDEX_OBJECT_SYSTEM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3185
PgQuery::ReindexObjectType::REINDEX_OBJECT_TABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3185
PgQuery::ReindexObjectType::REINDEX_OBJECT_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::ReindexStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RelabelType
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RenameStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ReplicaIdentityStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ResTarget
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RoleSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::RoleSpecType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3162
PgQuery::RoleSpecType::ROLESPEC_CSTRING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3162
PgQuery::RoleSpecType::ROLESPEC_CURRENT_USER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3162
PgQuery::RoleSpecType::ROLESPEC_PUBLIC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3162
PgQuery::RoleSpecType::ROLESPEC_SESSION_USER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3162
PgQuery::RoleSpecType::ROLE_SPEC_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::RoleStmtType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3178
PgQuery::RoleStmtType::ROLESTMT_GROUP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3178
PgQuery::RoleStmtType::ROLESTMT_ROLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3178
PgQuery::RoleStmtType::ROLESTMT_USER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3178
PgQuery::RoleStmtType::ROLE_STMT_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::RowCompareExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::RowCompareType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3194
PgQuery::RowCompareType::ROWCOMPARE_EQ = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3194
PgQuery::RowCompareType::ROWCOMPARE_GE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3194
PgQuery::RowCompareType::ROWCOMPARE_GT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3194
PgQuery::RowCompareType::ROWCOMPARE_LE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3194
PgQuery::RowCompareType::ROWCOMPARE_LT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3194
PgQuery::RowCompareType::ROWCOMPARE_NE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3194
PgQuery::RowCompareType::ROW_COMPARE_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::RowExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RowMarkClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::RuleStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::SQLValueFunction
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::SQLValueFunctionOp
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SQLVALUE_FUNCTION_OP_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_CATALOG = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_DATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_ROLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_SCHEMA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_TIME = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_TIMESTAMP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_TIMESTAMP_N = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_TIME_N = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_CURRENT_USER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_LOCALTIME = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_LOCALTIMESTAMP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_LOCALTIMESTAMP_N = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_LOCALTIME_N = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_SESSION_USER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3196
PgQuery::SQLValueFunctionOp::SVFOP_USER = T.let(T.unsafe(nil), Integer)

class PgQuery::ScalarArrayOpExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://pg_query//lib/pg_query/scan.rb#2
class PgQuery::ScanError < ::ArgumentError
  # @return [ScanError] a new instance of ScanError
  #
  # source://pg_query//lib/pg_query/scan.rb#4
  def initialize(message, source_file, source_line, location); end

  # Returns the value of attribute location.
  #
  # source://pg_query//lib/pg_query/scan.rb#3
  def location; end
end

class PgQuery::ScanResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::ScanToken
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::SecLabelStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::SelectStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::SetOpCmd
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3205
PgQuery::SetOpCmd::SETOPCMD_EXCEPT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3205
PgQuery::SetOpCmd::SETOPCMD_EXCEPT_ALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3205
PgQuery::SetOpCmd::SETOPCMD_INTERSECT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3205
PgQuery::SetOpCmd::SETOPCMD_INTERSECT_ALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3205
PgQuery::SetOpCmd::SET_OP_CMD_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::SetOpStrategy
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3206
PgQuery::SetOpStrategy::SETOP_HASHED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3206
PgQuery::SetOpStrategy::SETOP_SORTED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3206
PgQuery::SetOpStrategy::SET_OP_STRATEGY_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::SetOperation
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3170
PgQuery::SetOperation::SETOP_EXCEPT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3170
PgQuery::SetOperation::SETOP_INTERSECT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3170
PgQuery::SetOperation::SETOP_NONE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3170
PgQuery::SetOperation::SETOP_UNION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3170
PgQuery::SetOperation::SET_OPERATION_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::SetOperationStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::SetToDefault
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::SortBy
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::SortByDir
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3159
PgQuery::SortByDir::SORTBY_ASC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3159
PgQuery::SortByDir::SORTBY_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3159
PgQuery::SortByDir::SORTBY_DESC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3159
PgQuery::SortByDir::SORTBY_USING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3159
PgQuery::SortByDir::SORT_BY_DIR_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::SortByNulls
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3160
PgQuery::SortByNulls::SORTBY_NULLS_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3160
PgQuery::SortByNulls::SORTBY_NULLS_FIRST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3160
PgQuery::SortByNulls::SORTBY_NULLS_LAST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3160
PgQuery::SortByNulls::SORT_BY_NULLS_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::SortGroupClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::String
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::SubLink
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::SubLinkType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::ALL_SUBLINK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::ANY_SUBLINK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::ARRAY_SUBLINK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::CTE_SUBLINK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::EXISTS_SUBLINK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::EXPR_SUBLINK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::MULTIEXPR_SUBLINK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::ROWCOMPARE_SUBLINK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3193
PgQuery::SubLinkType::SUB_LINK_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::SubPlan
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::SubscriptingRef
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://pg_query//lib/pg_query/constants.rb#15
PgQuery::TRIGGER_TYPE_BEFORE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/constants.rb#17
PgQuery::TRIGGER_TYPE_DELETE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/constants.rb#16
PgQuery::TRIGGER_TYPE_INSERT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/constants.rb#20
PgQuery::TRIGGER_TYPE_INSTEAD = T.let(T.unsafe(nil), Integer)

# From Postgres source: src/include/catalog/pg_trigger.h
#
# source://pg_query//lib/pg_query/constants.rb#14
PgQuery::TRIGGER_TYPE_ROW = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/constants.rb#19
PgQuery::TRIGGER_TYPE_TRUNCATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/constants.rb#18
PgQuery::TRIGGER_TYPE_UPDATE = T.let(T.unsafe(nil), Integer)

class PgQuery::TableFunc
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::TableLikeClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::TableLikeOption
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_ALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_COMMENTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_CONSTRAINTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_DEFAULTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_GENERATED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_IDENTITY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_INDEXES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_STATISTICS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::CREATE_TABLE_LIKE_STORAGE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3163
PgQuery::TableLikeOption::TABLE_LIKE_OPTION_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::TableSampleClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::TargetEntry
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::Token
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ABORT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ABSOLUTE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ACCESS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ACTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ADD_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ADMIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::AFTER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::AGGREGATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ALSO = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ALTER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ALWAYS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ANALYSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ANALYZE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::AND = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ANY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ARRAY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::AS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_37 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_40 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_41 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_42 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_43 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_44 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_45 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_46 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_47 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_58 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_59 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_60 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_61 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_62 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_63 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_91 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_92 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_93 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASCII_94 = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASSERTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASSIGNMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ASYMMETRIC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::AT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ATTACH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ATTRIBUTE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::AUTHORIZATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BACKWARD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BCONST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BEFORE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BEGIN_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BETWEEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BIGINT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BINARY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BIT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BOOLEAN_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BOTH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::BY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CACHE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CALLED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CASCADE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CASCADED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CASE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CAST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CATALOG_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CHAIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CHARACTER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CHARACTERISTICS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CHAR_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CHECK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CHECKPOINT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CLASS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CLOSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CLUSTER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COALESCE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COLLATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COLLATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COLON_EQUALS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COLUMN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COLUMNS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COMMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COMMENTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COMMIT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COMMITTED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONCURRENTLY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONFIGURATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONFLICT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONNECTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONSTRAINT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONSTRAINTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONTENT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONTINUE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CONVERSION_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COPY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::COST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CREATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CROSS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CSV = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CUBE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURRENT_CATALOG = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURRENT_DATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURRENT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURRENT_ROLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURRENT_SCHEMA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURRENT_TIME = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURRENT_TIMESTAMP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURRENT_USER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CURSOR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::CYCLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::C_COMMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DATABASE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DATA_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DAY_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DEALLOCATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DEC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DECIMAL_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DECLARE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DEFAULT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DEFAULTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DEFERRABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DEFERRED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DEFINER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DELETE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DELIMITER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DELIMITERS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DEPENDS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DESC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DETACH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DICTIONARY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DISABLE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DISCARD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DISTINCT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DO = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DOCUMENT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DOMAIN_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DOT_DOT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DOUBLE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::DROP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EACH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ELSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ENABLE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ENCODING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ENCRYPTED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::END_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ENUM_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EQUALS_GREATER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ESCAPE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EVENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXCEPT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXCLUDE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXCLUDING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXCLUSIVE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXECUTE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXISTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXPLAIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXPRESSION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXTENSION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXTERNAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::EXTRACT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FALSE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FAMILY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FCONST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FETCH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FILTER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FIRST_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FLOAT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FOLLOWING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FOR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FORCE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FOREIGN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FORWARD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FREEZE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FROM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FULL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FUNCTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::FUNCTIONS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GENERATED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GLOBAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GRANT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GRANTED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GREATER_EQUALS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GREATEST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GROUPING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GROUPS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::GROUP_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::HANDLER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::HAVING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::HEADER_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::HOLD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::HOUR_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ICONST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IDENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IDENTITY_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IF_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ILIKE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IMMEDIATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IMMUTABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IMPLICIT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IMPORT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INCLUDE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INCLUDING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INCREMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INDEX = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INDEXES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INHERIT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INHERITS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INITIALLY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INLINE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INNER_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INOUT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INPUT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INSENSITIVE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INSERT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INSTEAD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INTEGER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INTERSECT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INTERVAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INTO = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::INVOKER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IN_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::IS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ISNULL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ISOLATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::JOIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::KEY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LABEL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LANGUAGE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LARGE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LAST_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LATERAL_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LEADING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LEAKPROOF = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LEAST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LEFT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LESS_EQUALS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LEVEL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LIKE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LIMIT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LISTEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LOAD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LOCAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LOCALTIME = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LOCALTIMESTAMP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LOCATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LOCKED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LOCK_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::LOGGED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MAPPING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MATCH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MATERIALIZED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MAXVALUE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::METHOD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MINUTE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MINVALUE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MODE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MONTH_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::MOVE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NAMES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NAME_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NATIONAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NATURAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NCHAR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NEW = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NEXT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NFC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NFD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NFKC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NFKD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NO = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NONE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NORMALIZE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NORMALIZED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NOT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NOTHING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NOTIFY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NOTNULL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NOT_EQUALS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NOT_LA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NOWAIT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NUL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NULLIF = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NULLS_LA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NULLS_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NULL_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::NUMERIC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OBJECT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OF = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OFF = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OFFSET = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OIDS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OLD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ON = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ONLY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OPERATOR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OPTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OPTIONS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ORDER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ORDINALITY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OTHERS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OUTER_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OUT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OVER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OVERLAPS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OVERLAY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OVERRIDING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OWNED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::OWNER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::Op = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PARALLEL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PARAM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PARSER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PARTIAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PARTITION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PASSING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PASSWORD = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PLACING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PLANS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::POLICY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::POSITION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::POSTFIXOP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PRECEDING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PRECISION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PREPARE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PREPARED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PRESERVE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PRIMARY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PRIOR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PRIVILEGES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PROCEDURAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PROCEDURE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PROCEDURES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PROGRAM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::PUBLICATION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::QUOTE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RANGE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::READ = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REAL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REASSIGN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RECHECK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RECURSIVE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REFERENCES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REFERENCING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REFRESH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REF_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REINDEX = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RELATIVE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RELEASE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RENAME = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REPEATABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REPLACE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REPLICA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RESET = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RESTART = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RESTRICT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RETURNING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RETURNS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::REVOKE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RIGHT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ROLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ROLLBACK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ROLLUP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ROUTINE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ROUTINES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ROW = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ROWS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::RULE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SAVEPOINT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SCHEMA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SCHEMAS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SCONST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SCROLL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SEARCH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SECOND_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SECURITY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SELECT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SEQUENCE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SEQUENCES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SERIALIZABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SERVER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SESSION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SESSION_USER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SET = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SETOF = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SETS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SHARE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SHOW = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SIMILAR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SIMPLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SKIP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SMALLINT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SNAPSHOT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SOME = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SQL_COMMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SQL_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STANDALONE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::START = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STATEMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STATISTICS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STDIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STDOUT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STORAGE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STORED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STRICT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::STRIP_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SUBSCRIPTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SUBSTRING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SUPPORT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SYMMETRIC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SYSID = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::SYSTEM_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TABLES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TABLESAMPLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TABLESPACE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TEMP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TEMPLATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TEMPORARY = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TEXT_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::THEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TIES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TIME = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TIMESTAMP = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TO = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TRAILING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TRANSACTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TRANSFORM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TREAT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TRIGGER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TRIM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TRUE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TRUNCATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TRUSTED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TYPECAST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TYPES_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::TYPE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UESCAPE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UIDENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UMINUS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNBOUNDED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNCOMMITTED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNENCRYPTED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNIQUE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNKNOWN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNLISTEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNLOGGED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UNTIL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::UPDATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::USCONST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::USER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::USING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VACUUM = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VALID = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VALIDATE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VALIDATOR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VALUES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VALUE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VARCHAR = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VARIADIC = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VARYING = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VERBOSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VERSION_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VIEW = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VIEWS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::VOLATILE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WHEN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WHERE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WHITESPACE_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WINDOW = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WITH = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WITHIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WITHOUT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WITH_LA = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WORK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WRAPPER = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::WRITE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XCONST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLATTRIBUTES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLCONCAT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLELEMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLEXISTS = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLFOREST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLNAMESPACES = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLPARSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLPI = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLROOT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLSERIALIZE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XMLTABLE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::XML_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::YEAR_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::YES_P = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3213
PgQuery::Token::ZONE = T.let(T.unsafe(nil), Integer)

class PgQuery::TransactionStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::TransactionStmtKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANSACTION_STMT_KIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_BEGIN = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_COMMIT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_COMMIT_PREPARED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_PREPARE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_RELEASE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_ROLLBACK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_ROLLBACK_PREPARED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_ROLLBACK_TO = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_SAVEPOINT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3181
PgQuery::TransactionStmtKind::TRANS_STMT_START = T.let(T.unsafe(nil), Integer)

class PgQuery::TriggerTransition
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::TruncateStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::TypeCast
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::TypeName
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::UnlistenStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::UpdateStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://pg_query//lib/pg_query/version.rb#2
PgQuery::VERSION = T.let(T.unsafe(nil), String)

class PgQuery::VacuumRelation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::VacuumStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::Var
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::VariableSetKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3175
PgQuery::VariableSetKind::VARIABLE_SET_KIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3175
PgQuery::VariableSetKind::VAR_RESET = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3175
PgQuery::VariableSetKind::VAR_RESET_ALL = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3175
PgQuery::VariableSetKind::VAR_SET_CURRENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3175
PgQuery::VariableSetKind::VAR_SET_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3175
PgQuery::VariableSetKind::VAR_SET_MULTI = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3175
PgQuery::VariableSetKind::VAR_SET_VALUE = T.let(T.unsafe(nil), Integer)

class PgQuery::VariableSetStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::VariableShowStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::ViewCheckOption
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3182
PgQuery::ViewCheckOption::CASCADED_CHECK_OPTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3182
PgQuery::ViewCheckOption::LOCAL_CHECK_OPTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3182
PgQuery::ViewCheckOption::NO_CHECK_OPTION = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3182
PgQuery::ViewCheckOption::VIEW_CHECK_OPTION_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::ViewStmt
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::WCOKind
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3167
PgQuery::WCOKind::WCOKIND_UNDEFINED = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3167
PgQuery::WCOKind::WCO_RLS_CONFLICT_CHECK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3167
PgQuery::WCOKind::WCO_RLS_INSERT_CHECK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3167
PgQuery::WCOKind::WCO_RLS_UPDATE_CHECK = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3167
PgQuery::WCOKind::WCO_VIEW_CHECK = T.let(T.unsafe(nil), Integer)

class PgQuery::WindowClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::WindowDef
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::WindowFunc
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::WithCheckOption
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::WithClause
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

class PgQuery::XmlExpr
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end

module PgQuery::XmlExprOp
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::IS_DOCUMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::IS_XMLCONCAT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::IS_XMLELEMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::IS_XMLFOREST = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::IS_XMLPARSE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::IS_XMLPI = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::IS_XMLROOT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::IS_XMLSERIALIZE = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3197
PgQuery::XmlExprOp::XML_EXPR_OP_UNDEFINED = T.let(T.unsafe(nil), Integer)

module PgQuery::XmlOptionType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://pg_query//lib/pg_query/pg_query_pb.rb#3198
PgQuery::XmlOptionType::XMLOPTION_CONTENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3198
PgQuery::XmlOptionType::XMLOPTION_DOCUMENT = T.let(T.unsafe(nil), Integer)

# source://pg_query//lib/pg_query/pg_query_pb.rb#3198
PgQuery::XmlOptionType::XML_OPTION_TYPE_UNDEFINED = T.let(T.unsafe(nil), Integer)

class PgQuery::XmlSerialize
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def freeze; end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(*_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(*_arg0); end
    def encode_json(*_arg0); end
  end
end
