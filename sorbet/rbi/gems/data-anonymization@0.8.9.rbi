# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `data-anonymization` gem.
# Please instead update this file by running `bin/tapioca gem data-anonymization`.


# source://data-anonymization//lib/utils/logging.rb#4
module DataAnon; end

# source://data-anonymization//lib/core/database.rb#2
module DataAnon::Core; end

# source://data-anonymization//lib/core/dsl.rb#3
module DataAnon::Core::DSL
  include ::DataAnon::Utils::Logging

  # source://data-anonymization//lib/core/dsl.rb#6
  def database(name, &block); end
end

# source://data-anonymization//lib/core/database.rb#4
class DataAnon::Core::Database
  # @return [Database] a new instance of Database
  #
  # source://data-anonymization//lib/core/database.rb#7
  def initialize(name); end

  # source://data-anonymization//lib/core/database.rb#44
  def anonymize; end

  # source://data-anonymization//lib/core/database.rb#38
  def collection(name, &block); end

  # source://data-anonymization//lib/core/database.rb#34
  def default_field_strategies(default_strategies); end

  # source://data-anonymization//lib/core/database.rb#30
  def destination_db(connection_spec); end

  # source://data-anonymization//lib/core/database.rb#21
  def execution_strategy(execution_strategy); end

  # source://data-anonymization//lib/core/database.rb#26
  def source_db(connection_spec); end

  # source://data-anonymization//lib/core/database.rb#17
  def strategy(strategy); end

  # source://data-anonymization//lib/core/database.rb#38
  def table(name, &block); end
end

# source://data-anonymization//lib/core/field.rb#4
class DataAnon::Core::Field
  # @return [Field] a new instance of Field
  #
  # source://data-anonymization//lib/core/field.rb#6
  def initialize(name, value, row_number, ar_record, table_name = T.unsafe(nil)); end

  # Returns the value of attribute ar_record.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def ar_record; end

  # Sets the attribute ar_record
  #
  # @param value the value to set the attribute ar_record to.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def ar_record=(_arg0); end

  # Returns the value of attribute table_name.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def collection_name; end

  # Returns the value of attribute name.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def name=(_arg0); end

  # Returns the value of attribute row_number.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def row_number; end

  # Sets the attribute row_number
  #
  # @param value the value to set the attribute row_number to.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def row_number=(_arg0); end

  # Returns the value of attribute table_name.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def table_name; end

  # Sets the attribute table_name
  #
  # @param value the value to set the attribute table_name to.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def table_name=(_arg0); end

  # Returns the value of attribute value.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://data-anonymization//lib/core/field.rb#14
  def value=(_arg0); end
end

# source://data-anonymization//lib/core/fields_missing_strategy.rb#4
class DataAnon::Core::FieldsMissingStrategy
  # @return [FieldsMissingStrategy] a new instance of FieldsMissingStrategy
  #
  # source://data-anonymization//lib/core/fields_missing_strategy.rb#7
  def initialize(table_name); end

  # source://data-anonymization//lib/core/fields_missing_strategy.rb#17
  def fields_missing_strategy; end

  # source://data-anonymization//lib/core/fields_missing_strategy.rb#12
  def missing(field_name); end

  # @return [Boolean]
  #
  # source://data-anonymization//lib/core/fields_missing_strategy.rb#27
  def present?; end

  # source://data-anonymization//lib/core/fields_missing_strategy.rb#21
  def print; end
end

# source://data-anonymization//lib/core/database.rb#64
class DataAnon::Core::Sequential
  # source://data-anonymization//lib/core/database.rb#65
  def anonymize(tables); end
end

# source://data-anonymization//lib/core/table_errors.rb#4
class DataAnon::Core::TableErrors
  # @return [TableErrors] a new instance of TableErrors
  #
  # source://data-anonymization//lib/core/table_errors.rb#7
  def initialize(table_name); end

  # source://data-anonymization//lib/core/table_errors.rb#17
  def errors; end

  # source://data-anonymization//lib/core/table_errors.rb#12
  def log_error(record, exception); end

  # source://data-anonymization//lib/core/table_errors.rb#21
  def print; end
end

# source://data-anonymization//lib/parallel/table.rb#4
module DataAnon::Parallel; end

# source://data-anonymization//lib/parallel/table.rb#5
class DataAnon::Parallel::Table
  # source://data-anonymization//lib/parallel/table.rb#7
  def anonymize(tables); end
end

# source://data-anonymization//lib/strategy/base.rb#2
module DataAnon::Strategy; end

# source://data-anonymization//lib/strategy/base.rb#3
class DataAnon::Strategy::Base
  # @return [Base] a new instance of Base
  #
  # source://data-anonymization//lib/strategy/base.rb#8
  def initialize(source_database, destination_database, name, user_strategies); end

  # source://data-anonymization//lib/strategy/base.rb#56
  def anonymize(*fields, &block); end

  # source://data-anonymization//lib/strategy/base.rb#32
  def batch_size(size); end

  # source://data-anonymization//lib/strategy/base.rb#52
  def continue(&block); end

  # source://data-anonymization//lib/strategy/base.rb#76
  def default_strategy(field_name); end

  # source://data-anonymization//lib/strategy/base.rb#81
  def dest_table; end

  # Returns the value of attribute errors.
  #
  # source://data-anonymization//lib/strategy/base.rb#6
  def errors; end

  # Sets the attribute errors
  #
  # @param value the value to set the attribute errors to.
  #
  # source://data-anonymization//lib/strategy/base.rb#6
  def errors=(_arg0); end

  # Returns the value of attribute fields.
  #
  # source://data-anonymization//lib/strategy/base.rb#6
  def fields; end

  # Sets the attribute fields
  #
  # @param value the value to set the attribute fields to.
  #
  # source://data-anonymization//lib/strategy/base.rb#6
  def fields=(_arg0); end

  # Returns the value of attribute fields_missing_strategy.
  #
  # source://data-anonymization//lib/strategy/base.rb#6
  def fields_missing_strategy; end

  # Sets the attribute fields_missing_strategy
  #
  # @param value the value to set the attribute fields_missing_strategy to.
  #
  # source://data-anonymization//lib/strategy/base.rb#6
  def fields_missing_strategy=(_arg0); end

  # @return [Boolean]
  #
  # source://data-anonymization//lib/strategy/base.rb#72
  def is_primary_key?(field); end

  # source://data-anonymization//lib/strategy/base.rb#36
  def limit(limit); end

  # source://data-anonymization//lib/strategy/base.rb#28
  def primary_key(*fields); end

  # source://data-anonymization//lib/strategy/base.rb#95
  def process; end

  # source://data-anonymization//lib/strategy/base.rb#23
  def process_fields(&block); end

  # source://data-anonymization//lib/strategy/base.rb#187
  def process_record_if(index, record); end

  # source://data-anonymization//lib/strategy/base.rb#114
  def process_table(progress); end

  # source://data-anonymization//lib/strategy/base.rb#128
  def process_table_in_batches(progress); end

  # source://data-anonymization//lib/strategy/base.rb#143
  def process_table_in_threads(progress); end

  # source://data-anonymization//lib/strategy/base.rb#194
  def progress_bar; end

  # source://data-anonymization//lib/strategy/base.rb#198
  def progress_bar_class(progress_bar); end

  # source://data-anonymization//lib/strategy/base.rb#48
  def skip(&block); end

  # source://data-anonymization//lib/strategy/base.rb#88
  def source_table; end

  # source://data-anonymization//lib/strategy/base.rb#177
  def source_table_limited; end

  # source://data-anonymization//lib/strategy/base.rb#40
  def thread_num(thread_num); end

  # Returns the value of attribute user_strategies.
  #
  # source://data-anonymization//lib/strategy/base.rb#6
  def user_strategies; end

  # Sets the attribute user_strategies
  #
  # @param value the value to set the attribute user_strategies to.
  #
  # source://data-anonymization//lib/strategy/base.rb#6
  def user_strategies=(_arg0); end

  # source://data-anonymization//lib/strategy/base.rb#44
  def whitelist(*fields); end

  class << self
    # @return [Boolean]
    #
    # source://data-anonymization//lib/strategy/base.rb#19
    def whitelist?; end
  end
end

# source://data-anonymization//lib/strategy/blacklist.rb#3
class DataAnon::Strategy::Blacklist < ::DataAnon::Strategy::Base
  # source://data-anonymization//lib/strategy/blacklist.rb#5
  def process_record(index, record); end
end

# source://data-anonymization//lib/strategy/field/whitelist.rb#3
module DataAnon::Strategy::Field; end

# source://data-anonymization//lib/strategy/field/anonymize_array.rb#6
class DataAnon::Strategy::Field::AnonymizeArray
  # @return [AnonymizeArray] a new instance of AnonymizeArray
  #
  # source://data-anonymization//lib/strategy/field/anonymize_array.rb#12
  def initialize(strategy); end

  # source://data-anonymization//lib/strategy/field/anonymize_array.rb#16
  def anonymize(field); end

  class << self
    # source://data-anonymization//lib/strategy/field/anonymize_array.rb#8
    def user_defaults(user_defaults); end
  end
end

# Anonmizes day and month fields within natural range based on true/false input for that field. By defaut both fields are
# anonymized
#
#    !!!ruby
#    # anonymizes month and leaves day unchanged
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDate.new(true,false)
#
# In addition to customizing which fields you want anonymized, there are some helper methods which allow for quick anonymization
#
#                                                                                                                                                                                               ```ruby
#    # anonymizes only the month field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDate.only_month
#    # anonymizes only the day field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDate.only_day
#
# source://data-anonymization//lib/strategy/field/datetime/anonymize_date.rb#20
class DataAnon::Strategy::Field::AnonymizeDate
  # @return [AnonymizeDate] a new instance of AnonymizeDate
  #
  # source://data-anonymization//lib/strategy/field/datetime/anonymize_date.rb#31
  def initialize(anonymize_month, anonymize_day); end

  # source://data-anonymization//lib/strategy/field/datetime/anonymize_date.rb#38
  def anonymize(field); end

  class << self
    # source://data-anonymization//lib/strategy/field/datetime/anonymize_date.rb#27
    def only_day; end

    # source://data-anonymization//lib/strategy/field/datetime/anonymize_date.rb#23
    def only_month; end
  end
end

# Anonymizes each field(except year and seconds) within the natural range (e.g. hour between 1-24 and day within the month) based on true/false
# input for that field. By default, all fields are anonymized.
#
#    !!!ruby
#    # anonymizes month and hour fields, leaving the day and minute fields untouched
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDateTime.new(true,false,true,false)
#
# In addition to customizing which fields you want anonymized, there are some helper methods which allow for quick anonymization
#
#    !!!ruby
#    # anonymizes only the month field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDateTime.only_month
#    # anonymizes only the day field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDateTime.only_day
#    # anonymizes only the hour field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDateTime.only_hour
#    # anonymizes only the minute field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDateTime.only_minute
#
# source://data-anonymization//lib/strategy/field/datetime/anonymize_datetime.rb#24
class DataAnon::Strategy::Field::AnonymizeDateTime < ::DataAnon::Strategy::Field::AnonymizeTime
  private

  # source://data-anonymization//lib/strategy/field/datetime/anonymize_datetime.rb#27
  def create_object(year, month, day, hour, min, sec); end
end

# Anonymizes each field(except year and seconds) within the natural range (e.g. hour between 1-24 and day within the month) based on true/false
# input for that field. By default, all fields are anonymized.
#
#    !!!ruby
#    # anonymizes month and hour fields, leaving the day and minute fields untouched
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeTime.new(true,false,true,false)
#
# In addition to customizing which fields you want anonymized, there are some helper methods which allow for quick anonymization
#
#    !!!ruby
#    # anonymizes only the month field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeTime.only_month
#    # anonymizes only the day field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeTime.only_day
#    # anonymizes only the hour field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeTime.only_hour
#    # anonymizes only the minute field
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeTime.only_minute
#
# source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#24
class DataAnon::Strategy::Field::AnonymizeTime
  # @return [AnonymizeTime] a new instance of AnonymizeTime
  #
  # source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#44
  def initialize(anonymize_month, anonymize_day, anonymize_hour, anonymize_min); end

  # source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#53
  def anonymize(field); end

  private

  # source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#70
  def create_object(year, month, day, hour, min, sec); end

  class << self
    # source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#32
    def only_day; end

    # source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#36
    def only_hour; end

    # source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#40
    def only_minute; end

    # source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#28
    def only_month; end
  end
end

# source://data-anonymization//lib/strategy/field/datetime/anonymize_time.rb#26
DataAnon::Strategy::Field::AnonymizeTime::DEFAULT_ANONYMIZATION = T.let(T.unsafe(nil), TrueClass)

# source://data-anonymization//lib/strategy/field/anonymous.rb#6
class DataAnon::Strategy::Field::Anonymous
  # @return [Anonymous] a new instance of Anonymous
  #
  # source://data-anonymization//lib/strategy/field/anonymous.rb#8
  def initialize(&block); end

  # source://data-anonymization//lib/strategy/field/anonymous.rb#12
  def anonymize(field); end
end

# Shifts date randomly within given delta range. Default shits date within 10 days + or -
#
#    !!!ruby
#    anonymize('DateOfBirth').using FieldStrategy::AnonymizeDate.new
#
#    !!!ruby
#    # shifts date within 25 days
#    anonymize('DateOfBirth').using FieldStrategy::DateDelta.new(25)
#
# source://data-anonymization//lib/strategy/field/datetime/date_delta.rb#15
class DataAnon::Strategy::Field::DateDelta
  # @return [DateDelta] a new instance of DateDelta
  #
  # source://data-anonymization//lib/strategy/field/datetime/date_delta.rb#19
  def initialize(day_delta = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/datetime/date_delta.rb#23
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/datetime/date_delta.rb#17
DataAnon::Strategy::Field::DateDelta::DEFAULT_DAY_DELTA = T.let(T.unsafe(nil), Integer)

# Shifts data randomly within given range. Default shifts date within 10 days + or - and shifts time within 30 minutes.
#
#    !!!ruby
#    anonymize('DateOfBirth').using FieldStrategy::DateTimeDelta.new
#
#    !!!ruby
#    # shifts date within 20 days and time within 50 minutes
#    anonymize('DateOfBirth').using FieldStrategy::DateTimeDelta.new(20, 50)
#
# source://data-anonymization//lib/strategy/field/datetime/date_time_delta.rb#14
class DataAnon::Strategy::Field::DateTimeDelta
  # @return [DateTimeDelta] a new instance of DateTimeDelta
  #
  # source://data-anonymization//lib/strategy/field/datetime/date_time_delta.rb#19
  def initialize(day_delta = T.unsafe(nil), minute_delta = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/datetime/date_time_delta.rb#24
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/datetime/date_time_delta.rb#16
DataAnon::Strategy::Field::DateTimeDelta::DEFAULT_DAY_DELTA = T.let(T.unsafe(nil), Integer)

# source://data-anonymization//lib/strategy/field/datetime/date_time_delta.rb#17
DataAnon::Strategy::Field::DateTimeDelta::DEFAULT_MINUTE_DELTA = T.let(T.unsafe(nil), Integer)

# source://data-anonymization//lib/strategy/field/default_anon.rb#5
class DataAnon::Strategy::Field::DefaultAnon
  # @return [DefaultAnon] a new instance of DefaultAnon
  #
  # source://data-anonymization//lib/strategy/field/default_anon.rb#22
  def initialize(user_defaults = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/default_anon.rb#27
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/default_anon.rb#7
DataAnon::Strategy::Field::DefaultAnon::DEFAULT_STRATEGIES = T.let(T.unsafe(nil), Hash)

# Keeping the format same it changes each digit in the string with random digit.
#
#    !!!ruby
#    anonymize('CreditCardNumber').using FieldStrategy::FormattedStringNumber.new
#
# source://data-anonymization//lib/strategy/field/string/formatted_string_numbers.rb#10
class DataAnon::Strategy::Field::FormattedStringNumber
  # source://data-anonymization//lib/strategy/field/string/formatted_string_numbers.rb#12
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/contact/geojson_base.rb#4
class DataAnon::Strategy::Field::GeojsonBase
  # @return [GeojsonBase] a new instance of GeojsonBase
  #
  # source://data-anonymization//lib/strategy/field/contact/geojson_base.rb#14
  def initialize(file_path); end

  # source://data-anonymization//lib/strategy/field/contact/geojson_base.rb#18
  def anonymize(field); end

  class << self
    # source://data-anonymization//lib/strategy/field/contact/geojson_base.rb#10
    def region_UK; end

    # source://data-anonymization//lib/strategy/field/contact/geojson_base.rb#6
    def region_US; end
  end
end

# Generates a valid unique gmail address by taking advantage of the gmail + strategy. Takes in a valid gmail username and
# generates emails of the form username+<number>@gmail.com
#
#    !!!ruby
#    anonymize('Email').using FieldStrategy::GmailTemplate.new('username')
#
# source://data-anonymization//lib/strategy/field/email/gmail_template.rb#12
class DataAnon::Strategy::Field::GmailTemplate
  # @return [GmailTemplate] a new instance of GmailTemplate
  #
  # source://data-anonymization//lib/strategy/field/email/gmail_template.rb#14
  def initialize(username = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/email/gmail_template.rb#18
  def anonymize(field); end
end

# Default anonymization strategy for `string` content. Uses default 'Lorem ipsum...' text or text supplied in strategy to generate same length string.
#    !!!ruby
#    anonymize('UserName').using FieldStrategy::LoremIpsum.new
#
#    !!!ruby
#    anonymize('UserName').using FieldStrategy::LoremIpsum.new("very large string....")
#
#    !!!ruby
#    anonymize('UserName').using FieldStrategy::LoremIpsum.new(File.read('my_file.txt'))
#
# source://data-anonymization//lib/strategy/field/string/lorem_ipsum.rb#15
class DataAnon::Strategy::Field::LoremIpsum
  # @return [LoremIpsum] a new instance of LoremIpsum
  #
  # source://data-anonymization//lib/strategy/field/string/lorem_ipsum.rb#25
  def initialize(text = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/string/lorem_ipsum.rb#29
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/string/lorem_ipsum.rb#17
DataAnon::Strategy::Field::LoremIpsum::DEFAULT_TEXT = T.let(T.unsafe(nil), String)

# Generates address using the [geojson](http://www.geojson.org/geojson-spec.html) format file. The default US/UK file chooses randomly from 300 addresses.
# The large data set can be downloaded from [here](http://www.infochimps.com/datasets/simplegeo-places-dump)
#
#    !!!ruby
#    anonymize('Address').using FieldStrategy::RandomAddress.region_US
#
#    !!!ruby
#    anonymize('Address').using FieldStrategy::RandomAddress.region_UK
#
#    !!!ruby
#    # get your own geo_json file and use it
#    anonymize('Address').using FieldStrategy::RandomAddress.new('my_geo_json.json')
#
# source://data-anonymization//lib/strategy/field/contact/random_address.rb#18
class DataAnon::Strategy::Field::RandomAddress < ::DataAnon::Strategy::Field::GeojsonBase
  # @return [RandomAddress] a new instance of RandomAddress
  #
  # source://data-anonymization//lib/strategy/field/contact/random_address.rb#20
  def initialize(file_path); end
end

# Shifts the current value randomly within given delta + and -. Default is 10.0
#
#    !!!ruby
#    anonymize('points').using FieldStrategy::RandomFloatDelta.new(2.5)
#
# source://data-anonymization//lib/strategy/field/number/random_big_decimal_delta.rb#12
class DataAnon::Strategy::Field::RandomBigDecimalDelta
  # @return [RandomBigDecimalDelta] a new instance of RandomBigDecimalDelta
  #
  # source://data-anonymization//lib/strategy/field/number/random_big_decimal_delta.rb#14
  def initialize(delta = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/number/random_big_decimal_delta.rb#18
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/random_boolean.rb#6
class DataAnon::Strategy::Field::RandomBoolean
  # source://data-anonymization//lib/strategy/field/random_boolean.rb#10
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/random_boolean.rb#8
DataAnon::Strategy::Field::RandomBoolean::BOOL_VALUES = T.let(T.unsafe(nil), Array)

# Similar to RandomAddress, generates city using the [geojson](http://www.geojson.org/geojson-spec.html) format file. The default US/UK file chooses randomly from 300 addresses.
# The large data set can be downloaded from [here](http://www.infochimps.com/datasets/simplegeo-places-dump)
#
#    !!!ruby
#    anonymize('City').using FieldStrategy::RandomCity.region_US
#
#    !!!ruby
#    anonymize('City').using FieldStrategy::RandomCity.region_UK
#
#    !!!ruby
#    # get your own geo_json file and use it
#    anonymize('City').using FieldStrategy::RandomCity.new('my_geo_json.json')
#
# source://data-anonymization//lib/strategy/field/contact/random_city.rb#18
class DataAnon::Strategy::Field::RandomCity < ::DataAnon::Strategy::Field::GeojsonBase
  # @return [RandomCity] a new instance of RandomCity
  #
  # source://data-anonymization//lib/strategy/field/contact/random_city.rb#20
  def initialize(file_path); end
end

# Generates email randomly using the given HOSTNAME and TLD.
# By defaults generates hostname randomly along with email id.
#
#    !!!ruby
#    anonymize('Email').using FieldStrategy::RandomEmail.new('thoughtworks','com')
#
# source://data-anonymization//lib/strategy/field/email/random_email.rb#12
class DataAnon::Strategy::Field::RandomEmail
  # @return [RandomEmail] a new instance of RandomEmail
  #
  # source://data-anonymization//lib/strategy/field/email/random_email.rb#17
  def initialize(hostname = T.unsafe(nil), tld = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/email/random_email.rb#22
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/email/random_email.rb#14
DataAnon::Strategy::Field::RandomEmail::TLDS = T.let(T.unsafe(nil), Array)

# Randomly picks up first name from the predefined list in the file. Default [file](https://raw.github.com/sunitparekh/data-anonymization/master/resources/first_names.txt) is part of the gem.
# File should contain first name on each line.
#
#    !!!ruby                                                                                                                                                                                                                                        ```ruby
#    anonymize('FirstName').using FieldStrategy::RandomFirstName.new
#
#    !!!ruby
#    anonymize('FirstName').using FieldStrategy::RandomFirstName.new('my_first_names.txt')
#
# source://data-anonymization//lib/strategy/field/name/random_first_name.rb#15
class DataAnon::Strategy::Field::RandomFirstName < ::DataAnon::Strategy::Field::SelectFromFile
  # @return [RandomFirstName] a new instance of RandomFirstName
  #
  # source://data-anonymization//lib/strategy/field/name/random_first_name.rb#17
  def initialize(file_path = T.unsafe(nil)); end
end

# Generates random float number between given two numbers. Default range is 0.0 to 100.0
#
#    !!!ruby
#    anonymize('points').using FieldStrategy::RandomFloat.new(3.0,5.0)
#
# source://data-anonymization//lib/strategy/field/number/random_float.rb#10
class DataAnon::Strategy::Field::RandomFloat
  # @return [RandomFloat] a new instance of RandomFloat
  #
  # source://data-anonymization//lib/strategy/field/number/random_float.rb#12
  def initialize(from = T.unsafe(nil), to = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/number/random_float.rb#18
  def anonymize(field); end
end

# Shifts the current value randomly within given delta + and -. Default is 10.0
#
#    !!!ruby
#    anonymize('points').using FieldStrategy::RandomFloatDelta.new(2.5)
#
# source://data-anonymization//lib/strategy/field/number/random_float_delta.rb#10
class DataAnon::Strategy::Field::RandomFloatDelta
  # @return [RandomFloatDelta] a new instance of RandomFloatDelta
  #
  # source://data-anonymization//lib/strategy/field/number/random_float_delta.rb#12
  def initialize(delta = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/number/random_float_delta.rb#16
  def anonymize(field); end
end

# Keeping the format same it changes each digit with random digit, character with character preserving the case.
#
#    !!!ruby
#    anonymize('PhoneNumber').using FieldStrategy::RandomFormattedString.new
#    anonymize('Email').using FieldStrategy::RandomFormattedString.new
#
# source://data-anonymization//lib/strategy/field/string/random_formatted_string.rb#11
class DataAnon::Strategy::Field::RandomFormattedString
  # source://data-anonymization//lib/strategy/field/string/random_formatted_string.rb#16
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/string/random_formatted_string.rb#14
DataAnon::Strategy::Field::RandomFormattedString::CAPS_CHARS = T.let(T.unsafe(nil), String)

# source://data-anonymization//lib/strategy/field/string/random_formatted_string.rb#13
DataAnon::Strategy::Field::RandomFormattedString::SMALL_CHARS = T.let(T.unsafe(nil), String)

# Generates full name using the RandomFirstName and RandomLastName strategies.
#
#    !!!ruby
#    anonymize('FullName').using FieldStrategy::RandomFullName.new
#
#    !!!ruby
#    anonymize('FullName').using FieldStrategy::RandomLastName.new('my_first_names.txt', 'my_last_names.txt')
#
# source://data-anonymization//lib/strategy/field/name/random_full_name.rb#13
class DataAnon::Strategy::Field::RandomFullName
  # @return [RandomFullName] a new instance of RandomFullName
  #
  # source://data-anonymization//lib/strategy/field/name/random_full_name.rb#15
  def initialize(first_names = T.unsafe(nil), last_names = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/name/random_full_name.rb#20
  def anonymize(field); end
end

# Generates random integer number between given two numbers. Default range is 0 to 100.
#
#    !!!ruby
#    anonymize('Age').using FieldStrategy::RandomInteger.new(18,70)
#
# source://data-anonymization//lib/strategy/field/number/random_integer.rb#10
class DataAnon::Strategy::Field::RandomInteger
  # @return [RandomInteger] a new instance of RandomInteger
  #
  # source://data-anonymization//lib/strategy/field/number/random_integer.rb#12
  def initialize(from = T.unsafe(nil), to = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/number/random_integer.rb#18
  def anonymize(field); end
end

# Shifts the current value randomly within given delta + and -. Default is 10
#
#    !!!ruby
#    anonymize('Age').using FieldStrategy::RandomIntegerDelta.new(2)
#
# source://data-anonymization//lib/strategy/field/number/random_integer_delta.rb#10
class DataAnon::Strategy::Field::RandomIntegerDelta
  # @return [RandomIntegerDelta] a new instance of RandomIntegerDelta
  #
  # source://data-anonymization//lib/strategy/field/number/random_integer_delta.rb#12
  def initialize(delta = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/number/random_integer_delta.rb#16
  def anonymize(field); end
end

# Randomly picks up last name from the predefined list in the file. Default [file](https://raw.github.com/sunitparekh/data-anonymization/master/resources/last_names.txt) is part of the gem.
# File should contain last name on each line.
#
#    !!!ruby
#    anonymize('LastName').using FieldStrategy::RandomLastName.new
#
#    !!!ruby
#    anonymize('LastName').using FieldStrategy::RandomLastName.new('my_last_names.txt')
#
# source://data-anonymization//lib/strategy/field/name/random_last_name.rb#14
class DataAnon::Strategy::Field::RandomLastName < ::DataAnon::Strategy::Field::SelectFromFile
  # @return [RandomLastName] a new instance of RandomLastName
  #
  # source://data-anonymization//lib/strategy/field/name/random_last_name.rb#16
  def initialize(file_path = T.unsafe(nil)); end
end

# Generates random email using mailinator hostname. e.g. <randomstring>@mailinator.com
#
#    !!!ruby
#    anonymize('Email').using FieldStrategy::RandomMailinatorEmail.new
#
# source://data-anonymization//lib/strategy/field/email/random_mailinator_email.rb#10
class DataAnon::Strategy::Field::RandomMailinatorEmail
  # @return [RandomMailinatorEmail] a new instance of RandomMailinatorEmail
  #
  # source://data-anonymization//lib/strategy/field/email/random_mailinator_email.rb#12
  def initialize; end

  # source://data-anonymization//lib/strategy/field/email/random_mailinator_email.rb#16
  def anonymize(field); end
end

# Keeping the format same it changes each digit in the string with random digit.
#
#    !!!ruby
#    anonymize('PhoneNumber').using FieldStrategy::RandomPhoneNumber.new
#
# source://data-anonymization//lib/strategy/field/contact/random_phone_number.rb#10
class DataAnon::Strategy::Field::RandomPhoneNumber < ::DataAnon::Strategy::Field::FormattedStringNumber; end

# Similar to RandomAddress, generates province using the [geojson](http://www.geojson.org/geojson-spec.html) format file. The default US/UK file chooses randomly from 300 addresses.
# The large data set can be downloaded from [here](http://www.infochimps.com/datasets/simplegeo-places-dump)
#
#    !!!ruby
#    anonymize('Province').using FieldStrategy::RandomProvince.region_US
#
#    !!!ruby
#    anonymize('Province').using FieldStrategy::RandomProvince.region_UK
#
#    !!!ruby
#    # get your own geo_json file and use it
#    anonymize('Province').using FieldStrategy::RandomProvince.new('my_geo_json.json')
#
# source://data-anonymization//lib/strategy/field/contact/random_province.rb#18
class DataAnon::Strategy::Field::RandomProvince < ::DataAnon::Strategy::Field::GeojsonBase
  # @return [RandomProvince] a new instance of RandomProvince
  #
  # source://data-anonymization//lib/strategy/field/contact/random_province.rb#20
  def initialize(file_path); end
end

# Generates random string of same length.
#
#   !!!ruby
#   anonymize('UserName').using FieldStrategy::RandomString.new
#
# source://data-anonymization//lib/strategy/field/string/random_string.rb#10
class DataAnon::Strategy::Field::RandomString
  # source://data-anonymization//lib/strategy/field/string/random_string.rb#12
  def anonymize(field); end
end

# Generates a randomized URL while maintaining the structure of the original url
#
#    !!!ruby
#    anonymize('fb_profile').using FieldStrategy::RandomUrl.new
#
# source://data-anonymization//lib/strategy/field/string/random_url.rb#10
class DataAnon::Strategy::Field::RandomUrl
  # source://data-anonymization//lib/strategy/field/string/random_url.rb#12
  def anonymize(field); end
end

# Generates random user name of same length as original user name.
#
#    !!!ruby
#    anonymize('Username').using FieldStrategy::RandomUserName.new
#
# source://data-anonymization//lib/strategy/field/name/random_user_name.rb#10
class DataAnon::Strategy::Field::RandomUserName
  # @return [RandomUserName] a new instance of RandomUserName
  #
  # source://data-anonymization//lib/strategy/field/name/random_user_name.rb#15
  def initialize(min_length = T.unsafe(nil), max_length = T.unsafe(nil)); end

  # source://data-anonymization//lib/strategy/field/name/random_user_name.rb#20
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/field/name/random_user_name.rb#13
DataAnon::Strategy::Field::RandomUserName::DEFAULT_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://data-anonymization//lib/strategy/field/name/random_user_name.rb#12
DataAnon::Strategy::Field::RandomUserName::DEFAULT_MIN_LENGTH = T.let(T.unsafe(nil), Integer)

# Similar to RandomAddress, generates zipcode using the [geojson](http://www.geojson.org/geojson-spec.html) format file. The default US/UK file chooses randomly from 300 addresses.
# The large data set can be downloaded from [here](http://www.infochimps.com/datasets/simplegeo-places-dump)
#
#    !!!ruby
#    anonymize('Address').using FieldStrategy::RandomZipcode.region_US
#
#    !!!ruby
#    anonymize('Address').using FieldStrategy::RandomZipcode.region_UK
#
#    !!!ruby
#    # get your own geo_json file and use it
#    anonymize('Address').using FieldStrategy::RandomZipcode.new('my_geo_json.json')
#
# source://data-anonymization//lib/strategy/field/contact/random_zipcode.rb#18
class DataAnon::Strategy::Field::RandomZipcode < ::DataAnon::Strategy::Field::GeojsonBase
  # @return [RandomZipcode] a new instance of RandomZipcode
  #
  # source://data-anonymization//lib/strategy/field/contact/random_zipcode.rb#20
  def initialize(file_path); end
end

# Similar to SelectFromList with difference is the list of values are collected from the database table using distinct column query.
#
#    !!!ruby
#    # values are collected using `select distinct state from customers` query connecting to specified database in connection_spec
#    anonymize('state').using FieldStrategy::SelectFromDatabase.new('customers','state', connection_spec)
#
# source://data-anonymization//lib/strategy/field/string/select_from_database.rb#11
class DataAnon::Strategy::Field::SelectFromDatabase < ::DataAnon::Strategy::Field::SelectFromFile
  # @return [SelectFromDatabase] a new instance of SelectFromDatabase
  #
  # source://data-anonymization//lib/strategy/field/string/select_from_database.rb#14
  def initialize(table_name, field_name, connection_spec); end

  # source://data-anonymization//lib/strategy/field/string/select_from_database.rb#20
  def anonymize(field); end
end

# Similar to SelectFromList only difference is the list of values are picked up from file. Classical usage is like states field anonymization.
#
#    !!!ruby
#    anonymize('State').using FieldStrategy::SelectFromFile.new('states.txt')
#
# source://data-anonymization//lib/strategy/field/string/select_from_file.rb#11
class DataAnon::Strategy::Field::SelectFromFile
  # @return [SelectFromFile] a new instance of SelectFromFile
  #
  # source://data-anonymization//lib/strategy/field/string/select_from_file.rb#13
  def initialize(file_path); end

  # source://data-anonymization//lib/strategy/field/string/select_from_file.rb#17
  def anonymize(field); end
end

# Select randomly one of the values specified.
#
#    !!!ruby
#    anonymize('State').using FieldStrategy::SelectFromList.new(['New York','Georgia',...])
#
#    !!!ruby
#    anonymize('NameTitle').using FieldStrategy::SelectFromList.new(['Mr','Mrs','Dr',...])
#
# source://data-anonymization//lib/strategy/field/string/select_from_list.rb#14
class DataAnon::Strategy::Field::SelectFromList < ::DataAnon::Strategy::Field::SelectFromFile
  # @return [SelectFromList] a new instance of SelectFromList
  #
  # source://data-anonymization//lib/strategy/field/string/select_from_list.rb#16
  def initialize(values); end
end

# Simple string evaluation within [DataAnon::Core::Field](#dataanon-core-field) context. Can be used for email, username anonymization.
# Make sure to put the string in 'single quote' else it will get evaluated inline.
#
#    !!!ruby
#    anonymize('UserName').using FieldStrategy::StringTemplate.new('user#{row_number}')
#
#    !!!ruby
#    anonymize('Email').using FieldStrategy::StringTemplate.new('valid.address+#{row_number}@gmail.com')
#
#    !!!ruby
#    anonymize('Email').using FieldStrategy::StringTemplate.new('useremail#{row_number}@mailinator.com')
#
# source://data-anonymization//lib/strategy/field/string/string_template.rb#17
class DataAnon::Strategy::Field::StringTemplate
  # @return [StringTemplate] a new instance of StringTemplate
  #
  # source://data-anonymization//lib/strategy/field/string/string_template.rb#19
  def initialize(template); end

  # source://data-anonymization//lib/strategy/field/string/string_template.rb#23
  def anonymize(field); end
end

# Shifts data randomly within given range. Default shifts date within 10 days + or - and shifts time within 30 minutes.
#
#    !!!ruby
#    anonymize('DateOfBirth').using FieldStrategy::TimeDelta.new
#
#    !!!ruby
#    # shifts date within 20 days and time within 50 minutes
#    anonymize('DateOfBirth').using FieldStrategy::TimeDelta.new(20, 50)
#
# source://data-anonymization//lib/strategy/field/datetime/time_delta.rb#14
class DataAnon::Strategy::Field::TimeDelta < ::DataAnon::Strategy::Field::DateTimeDelta; end

# source://data-anonymization//lib/strategy/field/whitelist.rb#6
class DataAnon::Strategy::Field::Whitelist
  # source://data-anonymization//lib/strategy/field/whitelist.rb#8
  def anonymize(field); end
end

# source://data-anonymization//lib/strategy/whitelist.rb#3
class DataAnon::Strategy::Whitelist < ::DataAnon::Strategy::Base
  # source://data-anonymization//lib/strategy/whitelist.rb#9
  def process_record(index, record); end

  class << self
    # @return [Boolean]
    #
    # source://data-anonymization//lib/strategy/whitelist.rb#5
    def whitelist?; end
  end
end

# source://data-anonymization//lib/thor/helpers/rdbms_dsl_generator.rb#6
module DataAnon::ThorHelpers; end

# source://data-anonymization//lib/thor/helpers/rdbms_dsl_generator.rb#7
class DataAnon::ThorHelpers::RDBMSDSLGenerator
  # source://data-anonymization//lib/thor/helpers/rdbms_dsl_generator.rb#13
  def generate_whitelist_script(configuration_hash); end

  class << self
    # source://data-anonymization//lib/thor/helpers/rdbms_dsl_generator.rb#9
    def source_root; end
  end
end

# source://data-anonymization//lib/utils/logging.rb#5
module DataAnon::Utils; end

# source://data-anonymization//lib/utils/database.rb#24
class DataAnon::Utils::BaseTable
  class << self
    # source://data-anonymization//lib/utils/database.rb#26
    def create_table(database, table_name, primary_keys = T.unsafe(nil)); end
  end
end

# source://data-anonymization//lib/utils/database.rb#20
class DataAnon::Utils::DestinationDatabase < ::ActiveRecord::Base
  include ::DataAnon::Utils::DestinationDatabase::GeneratedAttributeMethods
  include ::DataAnon::Utils::DestinationDatabase::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://data-anonymization//lib/utils/database.rb#0
module DataAnon::Utils::DestinationDatabase::GeneratedAssociationMethods; end

# source://data-anonymization//lib/utils/database.rb#0
module DataAnon::Utils::DestinationDatabase::GeneratedAttributeMethods; end

# source://data-anonymization//lib/utils/database.rb#49
class DataAnon::Utils::DestinationTable < ::DataAnon::Utils::BaseTable
  class << self
    # source://data-anonymization//lib/utils/database.rb#51
    def create(table_name, primary_key = T.unsafe(nil)); end
  end
end

# source://data-anonymization//lib/utils/database.rb#12
class DataAnon::Utils::DisableReferentialIntegrityDatabase < ::ActiveRecord::Base
  include ::DataAnon::Utils::DisableReferentialIntegrityDatabase::GeneratedAttributeMethods
  include ::DataAnon::Utils::DisableReferentialIntegrityDatabase::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://data-anonymization//lib/utils/database.rb#0
module DataAnon::Utils::DisableReferentialIntegrityDatabase::GeneratedAssociationMethods; end

# source://data-anonymization//lib/utils/database.rb#0
module DataAnon::Utils::DisableReferentialIntegrityDatabase::GeneratedAttributeMethods; end

# source://data-anonymization//lib/utils/geojson_parser.rb#5
class DataAnon::Utils::GeojsonParser
  # @return [GeojsonParser] a new instance of GeojsonParser
  #
  # source://data-anonymization//lib/utils/geojson_parser.rb#28
  def initialize(file_path); end

  # source://data-anonymization//lib/utils/geojson_parser.rb#32
  def parse(property); end

  class << self
    # source://data-anonymization//lib/utils/geojson_parser.rb#8
    def address(file_path); end

    # source://data-anonymization//lib/utils/geojson_parser.rb#20
    def city(file_path); end

    # source://data-anonymization//lib/utils/geojson_parser.rb#24
    def country(file_path); end

    # source://data-anonymization//lib/utils/geojson_parser.rb#16
    def province(file_path); end

    # source://data-anonymization//lib/utils/geojson_parser.rb#12
    def zipcode(file_path); end
  end
end

# source://data-anonymization//lib/utils/logging.rb#6
module DataAnon::Utils::Logging
  # source://data-anonymization//lib/utils/logging.rb#8
  def logger; end

  # source://data-anonymization//lib/utils/logging.rb#12
  def logger=(logger); end
end

# source://data-anonymization//lib/utils/parallel_progress_bar.rb#6
class DataAnon::Utils::ParallelProgressBar < ::DataAnon::Utils::ProgressBar
  # @return [ParallelProgressBar] a new instance of ParallelProgressBar
  #
  # source://data-anonymization//lib/utils/parallel_progress_bar.rb#9
  def initialize(table_name, total); end

  protected

  # source://data-anonymization//lib/utils/parallel_progress_bar.rb#16
  def show_progress(index); end
end

# source://data-anonymization//lib/utils/progress_bar.rb#6
class DataAnon::Utils::ProgressBar
  # @return [ProgressBar] a new instance of ProgressBar
  #
  # source://data-anonymization//lib/utils/progress_bar.rb#8
  def initialize(table_name, total); end

  # source://data-anonymization//lib/utils/progress_bar.rb#15
  def apply_power_bar_settings; end

  # source://data-anonymization//lib/utils/progress_bar.rb#32
  def close; end

  # source://data-anonymization//lib/utils/progress_bar.rb#26
  def show(index); end

  protected

  # source://data-anonymization//lib/utils/progress_bar.rb#52
  def complete(index); end

  # source://data-anonymization//lib/utils/progress_bar.rb#56
  def regular_interval(index); end

  # source://data-anonymization//lib/utils/progress_bar.rb#46
  def show_progress(counter); end

  # @return [Boolean]
  #
  # source://data-anonymization//lib/utils/progress_bar.rb#38
  def show_progress?(index); end

  # source://data-anonymization//lib/utils/progress_bar.rb#42
  def show_progress_env; end

  # source://data-anonymization//lib/utils/progress_bar.rb#60
  def started(index); end
end

# source://data-anonymization//lib/utils/random_float.rb#3
class DataAnon::Utils::RandomFloat
  class << self
    # source://data-anonymization//lib/utils/random_float.rb#5
    def generate(min, max); end
  end
end

# source://data-anonymization//lib/utils/random_int.rb#3
class DataAnon::Utils::RandomInt
  class << self
    # source://data-anonymization//lib/utils/random_int.rb#5
    def generate(min, max); end
  end
end

# source://data-anonymization//lib/utils/random_string.rb#3
class DataAnon::Utils::RandomString
  class << self
    # source://data-anonymization//lib/utils/random_string.rb#7
    def generate(length = T.unsafe(nil), chars = T.unsafe(nil)); end
  end
end

# source://data-anonymization//lib/utils/random_string.rb#5
DataAnon::Utils::RandomString::RANDOM_STRING_CHARS = T.let(T.unsafe(nil), String)

# source://data-anonymization//lib/utils/random_string_chars_only.rb#3
class DataAnon::Utils::RandomStringCharsOnly
  class << self
    # source://data-anonymization//lib/utils/random_string_chars_only.rb#7
    def generate(length = T.unsafe(nil)); end
  end
end

# source://data-anonymization//lib/utils/random_string_chars_only.rb#5
DataAnon::Utils::RandomStringCharsOnly::CHARS = T.let(T.unsafe(nil), String)

# source://data-anonymization//lib/utils/resource.rb#4
class DataAnon::Utils::Resource
  class << self
    # source://data-anonymization//lib/utils/resource.rb#6
    def file(file_name); end

    # source://data-anonymization//lib/utils/resource.rb#11
    def project_home; end
  end
end

# source://data-anonymization//lib/utils/database.rb#16
class DataAnon::Utils::SourceDatabase < ::ActiveRecord::Base
  include ::DataAnon::Utils::SourceDatabase::GeneratedAttributeMethods
  include ::DataAnon::Utils::SourceDatabase::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://data-anonymization//lib/utils/database.rb#0
module DataAnon::Utils::SourceDatabase::GeneratedAssociationMethods; end

# source://data-anonymization//lib/utils/database.rb#0
module DataAnon::Utils::SourceDatabase::GeneratedAttributeMethods; end

# source://data-anonymization//lib/utils/database.rb#41
class DataAnon::Utils::SourceTable < ::DataAnon::Utils::BaseTable
  class << self
    # source://data-anonymization//lib/utils/database.rb#43
    def create(table_name, primary_key = T.unsafe(nil)); end
  end
end

# source://data-anonymization//lib/utils/database.rb#8
class DataAnon::Utils::TempDatabase < ::ActiveRecord::Base
  include ::DataAnon::Utils::TempDatabase::GeneratedAttributeMethods
  include ::DataAnon::Utils::TempDatabase::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://data-anonymization//lib/utils/database.rb#0
module DataAnon::Utils::TempDatabase::GeneratedAssociationMethods; end

# source://data-anonymization//lib/utils/database.rb#0
module DataAnon::Utils::TempDatabase::GeneratedAttributeMethods; end

# source://data-anonymization//lib/utils/template_helper.rb#3
class DataAnon::Utils::TemplateHelper
  class << self
    # source://data-anonymization//lib/utils/template_helper.rb#31
    def destination_connection_specs_mongo; end

    # source://data-anonymization//lib/utils/template_helper.rb#19
    def destination_connection_specs_rdbms(config_hash); end

    # source://data-anonymization//lib/utils/template_helper.rb#35
    def mongo_uri(config_hash); end

    # source://data-anonymization//lib/utils/template_helper.rb#27
    def source_connection_specs_mongo(config_hash); end

    # source://data-anonymization//lib/utils/template_helper.rb#5
    def source_connection_specs_rdbms(config_hash); end
  end
end

# source://data-anonymization//lib/version.rb#1
module DataAnonymization; end

# source://data-anonymization//lib/version.rb#2
DataAnonymization::VERSION = T.let(T.unsafe(nil), String)

# source://data-anonymization//lib/strategy/field/fields.rb#57
FieldStrategy = DataAnon::Strategy::Field

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::DataAnon::Utils::Logging
  include ::DataAnon::Core::DSL
end
