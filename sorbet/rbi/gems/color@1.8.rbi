# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `color` gem.
# Please instead update this file by running `bin/tapioca gem color`.


# = Colour Management with Ruby
#
# source://color//lib/color.rb#5
module Color
  # Compares the +other+ colour to this one. The +other+ colour will be
  # coerced to the same type as the current colour. Such converted colour
  # comparisons will always be more approximate than non-converted
  # comparisons.
  #
  # If the +other+ colour cannot be coerced to the current colour class, a
  # +NoMethodError+ exception will be raised.
  #
  # All values are compared as floating-point values, so two colours will be
  # reported equivalent if all component values are within COLOR_TOLERANCE
  # of each other.
  #
  # source://color//lib/color.rb#33
  def ==(other); end

  # The primary name for the colour.
  #
  # source://color//lib/color.rb#38
  def name; end

  # source://color//lib/color.rb#47
  def name=(n); end

  # All names for the colour.
  #
  # source://color//lib/color.rb#43
  def names; end

  # source://color//lib/color.rb#47
  def names=(n); end

  class << self
    # Coerces, if possible, the second given colour object to the first
    # given colour object type. This will probably involve colour
    # conversion and therefore a loss of fidelity.
    #
    # source://color//lib/color.rb#92
    def coerce(a, b); end

    # source://color//lib/color.rb#142
    def const_missing(name); end

    # Returns +true+ if the two colours are roughly equivalent. If colour
    # conversions are required, this all conversions will be implemented
    # using the default conversion mechanism.
    #
    # @return [Boolean]
    #
    # source://color//lib/color.rb#84
    def equivalent?(a, b); end

    # Returns +true+ if the two values provided are near each other.
    #
    # @return [Boolean]
    #
    # source://color//lib/color.rb#77
    def near?(x, y); end

    # Returns +true+ if the value is within COLOR_EPSILON of one.
    #
    # @return [Boolean]
    #
    # source://color//lib/color.rb#66
    def near_one?(value); end

    # Returns +true+ if the value is within COLOR_EPSILON of one or more than
    # one.
    #
    # @return [Boolean]
    #
    # source://color//lib/color.rb#72
    def near_one_or_more?(value); end

    # Returns +true+ if the value is less than COLOR_EPSILON.
    #
    # @return [Boolean]
    #
    # source://color//lib/color.rb#55
    def near_zero?(value); end

    # Returns +true+ if the value is within COLOR_EPSILON of zero or less than
    # zero.
    #
    # @return [Boolean]
    #
    # source://color//lib/color.rb#61
    def near_zero_or_less?(value); end

    # Provides a thin veneer over the Color module to make it seem like this
    # is Color 0.1.0 (a class) and not Color 1.4 (a module). This
    # "constructor" will be removed in the future.
    #
    # mode = :hsl::   +values+ must be an array of [ hue deg, sat %, lum % ].
    #                 A Color::HSL object will be created.
    # mode = :rgb::   +values+ will either be an HTML-style colour string or
    #                 an array of [ red, green, blue ] (range 0 .. 255). A
    #                 Color::RGB object will be created.
    # mode = :cmyk::  +values+ must be an array of [ cyan %, magenta %, yellow
    #                 %, black % ]. A Color::CMYK object will be created.
    #
    # source://color//lib/color.rb#168
    def new(values, mode = T.unsafe(nil)); end

    # Normalizes the value to the range (0.0) .. (1.0).
    #
    # source://color//lib/color.rb#97
    def normalize(value); end

    # Normalize the value to the range (0) .. (65535).
    #
    # source://color//lib/color.rb#128
    def normalize_16bit(value); end

    # Normalize the value to the range (0) .. (255).
    #
    # source://color//lib/color.rb#122
    def normalize_8bit(value); end

    # Normalize the value to the range (0) .. (255).
    #
    # source://color//lib/color.rb#122
    def normalize_byte(value); end

    # Normalizes the value to the range (0.0) .. (1.0).
    #
    # source://color//lib/color.rb#97
    def normalize_fractional(value); end

    # Normalizes the value to the specified range.
    #
    # source://color//lib/color.rb#109
    def normalize_to_range(value, range); end

    # Normalize the value to the range (0) .. (65535).
    #
    # source://color//lib/color.rb#128
    def normalize_word(value); end
  end
end

# An CMYK colour object. CMYK (cyan, magenta, yellow, and black) colours are
# based on additive percentages of ink. A CMYK colour of (0.3, 0, 0.8, 0.3)
# would be mixed from 30% cyan, 0% magenta, 80% yellow, and 30% black.
# Primarily used in four-colour printing processes.
#
# source://color//lib/color.rb#9
class Color::CMYK
  include ::Color

  # Creates a CMYK colour object from percentages. Internally, the colour is
  # managed as fractional values 0..1.
  #
  #   Color::CMYK.new(30, 0, 80, 30)
  #
  # @return [CMYK] a new instance of CMYK
  #
  # source://color//lib/color/cmyk.rb#39
  def initialize(c = T.unsafe(nil), m = T.unsafe(nil), y = T.unsafe(nil), k = T.unsafe(nil), radix = T.unsafe(nil), &block); end

  # Returns the black (K) component of the CMYK colour as a percentage
  # value.
  #
  # source://color//lib/color/cmyk.rb#231
  def black; end

  # Sets the black (K) component of the CMYK colour as a percentage value.
  #
  # source://color//lib/color/cmyk.rb#240
  def black=(kk); end

  # Returns the cyan (C) component of the CMYK colour as a value in the
  # range 0.0 .. 1.0.
  #
  # source://color//lib/color/cmyk.rb#176
  def c; end

  # Sets the cyan (C) component of the CMYK colour as a value in the range
  # 0.0 .. 1.0.
  #
  # source://color//lib/color/cmyk.rb#185
  def c=(cc); end

  # Coerces the other Color object into CMYK.
  #
  # source://color//lib/color/cmyk.rb#14
  def coerce(other); end

  # Present the colour as an HSL HTML/CSS colour string (e.g., "hsl(180,
  # 25%, 35%)"). Note that this will perform a #to_hsl operation using the
  # default conversion formula.
  #
  # source://color//lib/color/cmyk.rb#80
  def css_hsl; end

  # Present the colour as an HSLA (with alpha) HTML/CSS colour string (e.g.,
  # "hsla(180, 25%, 35%, 1)"). Note that this will perform a #to_hsl
  # operation using the default conversion formula.
  #
  # source://color//lib/color/cmyk.rb#87
  def css_hsla; end

  # Present the colour as an RGB HTML/CSS colour string (e.g., "rgb(0%, 50%,
  # 100%)"). Note that this will perform a #to_rgb operation using the
  # default conversion formula.
  #
  # source://color//lib/color/cmyk.rb#66
  def css_rgb; end

  # Present the colour as an RGBA (with alpha) HTML/CSS colour string (e.g.,
  # "rgb(0%, 50%, 100%, 1)"). Note that this will perform a #to_rgb
  # operation using the default conversion formula.
  #
  # source://color//lib/color/cmyk.rb#73
  def css_rgba(alpha = T.unsafe(nil)); end

  # Returns the cyan (C) component of the CMYK colour as a percentage value.
  #
  # source://color//lib/color/cmyk.rb#171
  def cyan; end

  # Sets the cyan (C) component of the CMYK colour as a percentage value.
  #
  # source://color//lib/color/cmyk.rb#180
  def cyan=(cc); end

  # Present the colour as an RGB HTML/CSS colour string (e.g., "#aabbcc").
  # Note that this will perform a #to_rgb operation using the default
  # conversion formula.
  #
  # source://color//lib/color/cmyk.rb#59
  def html; end

  # source://color//lib/color/cmyk.rb#156
  def inspect; end

  # Returns the black (K) component of the CMYK colour as a value in the
  # range 0.0 .. 1.0.
  #
  # source://color//lib/color/cmyk.rb#236
  def k; end

  # Sets the black (K) component of the CMYK colour as a value in the range
  # 0.0 .. 1.0.
  #
  # source://color//lib/color/cmyk.rb#245
  def k=(kk); end

  # Returns the magenta (M) component of the CMYK colour as a value in the
  # range 0.0 .. 1.0.
  #
  # source://color//lib/color/cmyk.rb#196
  def m; end

  # Sets the magenta (M) component of the CMYK colour as a value in the
  # range 0.0 .. 1.0.
  #
  # source://color//lib/color/cmyk.rb#205
  def m=(mm); end

  # Returns the magenta (M) component of the CMYK colour as a percentage
  # value.
  #
  # source://color//lib/color/cmyk.rb#191
  def magenta; end

  # Sets the magenta (M) component of the CMYK colour as a percentage value.
  #
  # source://color//lib/color/cmyk.rb#200
  def magenta=(mm); end

  # Present the colour as a DeviceCMYK fill colour string for PDF. This will
  # be removed from the default package in color-tools 2.0.
  #
  # source://color//lib/color/cmyk.rb#46
  def pdf_fill; end

  # Present the colour as a DeviceCMYK stroke colour string for PDF. This
  # will be removed from the default package in color-tools 2.0.
  #
  # source://color//lib/color/cmyk.rb#52
  def pdf_stroke; end

  # source://color//lib/color/cmyk.rb#249
  def to_a; end

  # source://color//lib/color/cmyk.rb#152
  def to_cmyk; end

  # Converts the CMYK colour to a single greyscale value. There are
  # undoubtedly multiple methods for this conversion, but only a minor
  # variant of the Adobe conversion method will be used:
  #
  #   g = 1.0 - min(1.0, 0.299 * c + 0.587 * m + 0.114 * y + k)
  #
  # This treats the CMY values similarly to YIQ (NTSC) values and then adds
  # the level of black. This is a variant of the Adobe version because it
  # uses the more precise YIQ (NTSC) conversion values for Y (intensity)
  # rather than the approximates provided by Adobe (0.3, 0.59, and 0.11).
  #
  # source://color//lib/color/cmyk.rb#143
  def to_grayscale; end

  # Converts the CMYK colour to a single greyscale value. There are
  # undoubtedly multiple methods for this conversion, but only a minor
  # variant of the Adobe conversion method will be used:
  #
  #   g = 1.0 - min(1.0, 0.299 * c + 0.587 * m + 0.114 * y + k)
  #
  # This treats the CMY values similarly to YIQ (NTSC) values and then adds
  # the level of black. This is a variant of the Adobe version because it
  # uses the more precise YIQ (NTSC) conversion values for Y (intensity)
  # rather than the approximates provided by Adobe (0.3, 0.59, and 0.11).
  #
  # source://color//lib/color/cmyk.rb#143
  def to_greyscale; end

  # Converts to RGB then HSL.
  #
  # source://color//lib/color/cmyk.rb#166
  def to_hsl; end

  # Converts the CMYK colour to RGB. Most colour experts strongly suggest
  # that this is not a good idea (some even suggesting that it's a very bad
  # idea). CMYK represents additive percentages of inks on white paper,
  # whereas RGB represents mixed colour intensities on a black screen.
  #
  # However, the colour conversion can be done, and there are two different
  # methods for the conversion that provide slightly different results.
  # Adobe PDF conversions are done with the first form.
  #
  #     # Adobe PDF Display Formula
  #   r = 1.0 - min(1.0, c + k)
  #   g = 1.0 - min(1.0, m + k)
  #   b = 1.0 - min(1.0, y + k)
  #
  #     # Other
  #   r = 1.0 - (c * (1.0 - k) + k)
  #   g = 1.0 - (m * (1.0 - k) + k)
  #   b = 1.0 - (y * (1.0 - k) + k)
  #
  # If we have a CMYK colour of [33% 66% 83% 25%], the first method will
  # give an approximate RGB colour of (107, 23, 0) or #6b1700. The second
  # method will give an approximate RGB colour of (128, 65, 33) or #804121.
  # Which is correct? Although the colours may seem to be drastically
  # different in the RGB colour space, they are very similar colours,
  # differing mostly in intensity. The first is a darker, slightly redder
  # brown; the second is a lighter brown.
  #
  # Because of this subtlety, both methods are now offered for conversion.
  # The Adobe method is not used by default; to enable it, pass +true+ to
  # #to_rgb.
  #
  # Future versions of Color may offer other conversion mechanisms that
  # offer greater colour fidelity, including recognition of ICC colour
  # profiles.
  #
  # source://color//lib/color/cmyk.rb#125
  def to_rgb(use_adobe_method = T.unsafe(nil)); end

  # Converts to RGB then YIQ.
  #
  # source://color//lib/color/cmyk.rb#161
  def to_yiq; end

  # Returns the yellow (Y) component of the CMYK colour as a value in the
  # range 0.0 .. 1.0.
  #
  # source://color//lib/color/cmyk.rb#216
  def y; end

  # Sets the yellow (Y) component of the CMYK colour as a value in the range
  # 0.0 .. 1.0.
  #
  # source://color//lib/color/cmyk.rb#225
  def y=(kk); end

  # Returns the yellow (Y) component of the CMYK colour as a percentage
  # value.
  #
  # source://color//lib/color/cmyk.rb#211
  def yellow; end

  # Sets the yellow (Y) component of the CMYK colour as a percentage value.
  #
  # source://color//lib/color/cmyk.rb#220
  def yellow=(yy); end

  private

  # Implements the Adobe PDF conversion of CMYK to RGB.
  #
  # source://color//lib/color/cmyk.rb#255
  def adobe_cmyk_rgb; end

  # Implements the standard conversion of CMYK to RGB.
  #
  # source://color//lib/color/cmyk.rb#260
  def standard_cmyk_rgb; end

  class << self
    # Creates a CMYK colour object from fractional values 0..1.
    #
    #   Color::CMYK.from_fraction(0.3, 0, 0.8, 0.3)
    #
    # source://color//lib/color/cmyk.rb#22
    def from_fraction(c = T.unsafe(nil), m = T.unsafe(nil), y = T.unsafe(nil), k = T.unsafe(nil), &block); end

    # Creates a CMYK colour object from percentages. Internally, the colour is
    # managed as fractional values 0..1.
    #
    #   Color::CMYK.new(30, 0, 80, 30)
    #
    # source://color//lib/color/cmyk.rb#30
    def from_percent(c = T.unsafe(nil), m = T.unsafe(nil), y = T.unsafe(nil), k = T.unsafe(nil), &block); end
  end
end

# The format of a DeviceCMYK colour for PDF. In color-tools 2.0 this will
# be removed from this package and added back as a modification by the
# PDF::Writer package.
#
# source://color//lib/color/cmyk.rb#11
Color::CMYK::PDF_FORMAT_STR = T.let(T.unsafe(nil), String)

# The maximum "resolution" for colour math; if any value is less than or
# equal to this value, it is treated as zero.
#
# source://color//lib/color.rb#16
Color::COLOR_EPSILON = T.let(T.unsafe(nil), Float)

# The tolerance for comparing the components of two colours. In general,
# colours are considered equal if all of their components are within this
# tolerance value of each other.
#
# source://color//lib/color.rb#20
Color::COLOR_TOLERANCE = T.let(T.unsafe(nil), Float)

# source://color//lib/color.rb#6
Color::COLOR_VERSION = T.let(T.unsafe(nil), String)

# This namespace contains some CSS colour names.
#
# source://color//lib/color/css.rb#2
module Color::CSS
  class << self
    # Returns the RGB colour for name or +nil+ if the name is not valid.
    #
    # source://color//lib/color/css.rb#4
    def [](name); end
  end
end

# A colour object representing shades of grey. Used primarily in PDF
# document creation.
#
# source://color//lib/color.rb#11
class Color::GrayScale
  include ::Color

  # Creates a greyscale colour object from percentages 0..100.
  #
  #   Color::GrayScale.new(50)
  #
  # @return [GrayScale] a new instance of GrayScale
  #
  # source://color//lib/color/grayscale.rb#30
  def initialize(g = T.unsafe(nil), radix = T.unsafe(nil), &block); end

  # Adds another colour to the current colour. The other colour will be
  # converted to grayscale before addition. This conversion depends upon a
  # #to_grayscale method on the other colour.
  #
  # The addition is done using the grayscale accessor methods to ensure a
  # valid colour in the result.
  #
  # source://color//lib/color/grayscale.rb#167
  def +(other); end

  # Subtracts another colour to the current colour. The other colour will be
  # converted to grayscale before subtraction. This conversion depends upon
  # a #to_grayscale method on the other colour.
  #
  # The subtraction is done using the grayscale accessor methods to ensure a
  # valid colour in the result.
  #
  # source://color//lib/color/grayscale.rb#177
  def -(other); end

  # source://color//lib/color/grayscale.rb#189
  def -@; end

  # Returns the brightness value for this greyscale value; this is the
  # greyscale value itself.
  #
  # source://color//lib/color/grayscale.rb#135
  def brightness; end

  # Coerces the other Color object to grayscale.
  #
  # source://color//lib/color/grayscale.rb#36
  def coerce(other); end

  # Present the colour as an HSL HTML/CSS colour string (e.g., "hsl(180,
  # 25%, 35%)"). Note that this will perform a #to_hsl operation.
  #
  # source://color//lib/color/grayscale.rb#77
  def css_hsl; end

  # Present the colour as an HSLA (with alpha) HTML/CSS colour string (e.g.,
  # "hsla(180, 25%, 35%, 1)"). Note that this will perform a #to_hsl
  # operation.
  #
  # source://color//lib/color/grayscale.rb#84
  def css_hsla; end

  # Present the colour as an RGB HTML/CSS colour string (e.g., "rgb(0%, 50%,
  # 100%)").
  #
  # source://color//lib/color/grayscale.rb#65
  def css_rgb; end

  # Present the colour as an RGBA (with alpha) HTML/CSS colour string (e.g.,
  # "rgb(0%, 50%, 100%, 1)").
  #
  # source://color//lib/color/grayscale.rb#71
  def css_rgba(alpha = T.unsafe(nil)); end

  # Darken the greyscale colour by the stated percent.
  #
  # source://color//lib/color/grayscale.rb#112
  def darken_by(percent); end

  # Returns the grayscale value as a fractional value of white in the range
  # 0.0 .. 1.0.
  #
  # source://color//lib/color/grayscale.rb#147
  def g; end

  # Returns the grayscale value as a fractional value of white in the range
  # 0.0 .. 1.0.
  #
  # source://color//lib/color/grayscale.rb#157
  def g=(gg); end

  # Returns the grayscale value as a percentage of white (100% gray is
  # white).
  #
  # source://color//lib/color/grayscale.rb#141
  def gray; end

  # Sets the grayscale value as a percentage of white.
  #
  # source://color//lib/color/grayscale.rb#151
  def gray=(gg); end

  # Returns the grayscale value as a percentage of white (100% gray is
  # white).
  #
  # source://color//lib/color/grayscale.rb#141
  def grey; end

  # Sets the grayscale value as a percentage of white.
  #
  # source://color//lib/color/grayscale.rb#151
  def grey=(gg); end

  # Present the colour as an HTML/CSS colour string.
  #
  # source://color//lib/color/grayscale.rb#58
  def html; end

  # source://color//lib/color/grayscale.rb#181
  def inspect; end

  # Lightens the greyscale colour by the stated percent.
  #
  # source://color//lib/color/grayscale.rb#106
  def lighten_by(percent); end

  # Present the colour as a DeviceGrey fill colour string for PDF. This will
  # be removed from the default package in color-tools 2.0.
  #
  # source://color//lib/color/grayscale.rb#42
  def pdf_fill; end

  # Present the colour as a DeviceGrey stroke colour string for PDF. This
  # will be removed from the default package in color-tools 2.0.
  #
  # source://color//lib/color/grayscale.rb#48
  def pdf_stroke; end

  # source://color//lib/color/grayscale.rb#185
  def to_a; end

  # Convert the greyscale colour to CMYK.
  #
  # source://color//lib/color/grayscale.rb#89
  def to_cmyk; end

  # Reflexive conversion.
  #
  # source://color//lib/color/grayscale.rb#100
  def to_grayscale; end

  # Reflexive conversion.
  #
  # source://color//lib/color/grayscale.rb#100
  def to_greyscale; end

  # Returns the HSL colour encoding of the greyscale value.
  #
  # source://color//lib/color/grayscale.rb#129
  def to_hsl; end

  # Convert the greyscale colour to RGB.
  #
  # source://color//lib/color/grayscale.rb#95
  def to_rgb(ignored = T.unsafe(nil)); end

  # Returns the YIQ (NTSC) colour encoding of the greyscale value. This is
  # an approximation, as the values for I and Q are calculated by treating
  # the greyscale value as an RGB value. The Y (intensity or brightness)
  # value is the same as the greyscale value.
  #
  # source://color//lib/color/grayscale.rb#121
  def to_yiq; end

  private

  # source://color//lib/color/grayscale.rb#52
  def to_255; end

  class << self
    # Creates a greyscale colour object from fractional values 0..1.
    #
    #   Color::GreyScale.from_fraction(0.5)
    #
    # source://color//lib/color/grayscale.rb#15
    def from_fraction(g = T.unsafe(nil), &block); end

    # Creates a greyscale colour object from percentages 0..100.
    #
    #   Color::GrayScale.from_percent(50)
    #
    # source://color//lib/color/grayscale.rb#22
    def from_percent(g = T.unsafe(nil), &block); end
  end
end

# The format of a DeviceGrey colour for PDF. In color-tools 2.0 this will
# be removed from this package and added back as a modification by the
# PDF::Writer package.
#
# source://color//lib/color/grayscale.rb#9
Color::GrayScale::PDF_FORMAT_STR = T.let(T.unsafe(nil), String)

# source://color//lib/color/grayscale.rb#197
Color::GreyScale = Color::GrayScale

# An HSL colour object. Internally, the hue (#h), saturation (#s), and
# luminosity/lightness (#l) values are dealt with as fractional values in
# the range 0..1.
#
# source://color//lib/color.rb#10
class Color::HSL
  include ::Color

  # Creates an HSL colour object from the standard values of degrees and
  # percentages (e.g., 145 deg, 30%, 50%).
  #
  # @return [HSL] a new instance of HSL
  #
  # source://color//lib/color/hsl.rb#23
  def initialize(h = T.unsafe(nil), s = T.unsafe(nil), l = T.unsafe(nil), radix1 = T.unsafe(nil), radix2 = T.unsafe(nil), &block); end

  # Returns the luminosity (#l) of the colour.
  #
  # source://color//lib/color/hsl.rb#98
  def brightness; end

  # Coerces the other Color object into HSL.
  #
  # source://color//lib/color/hsl.rb#17
  def coerce(other); end

  # Present the colour as an HSL HTML/CSS colour string (e.g., "hsl(180,
  # 25%, 35%)").
  #
  # source://color//lib/color/hsl.rb#51
  def css_hsl; end

  # Present the colour as an HSLA (with alpha) HTML/CSS colour string (e.g.,
  # "hsla(180, 25%, 35%, 1)").
  #
  # source://color//lib/color/hsl.rb#57
  def css_hsla; end

  # Present the colour as an RGB HTML/CSS colour string (e.g., "rgb(0%, 50%,
  # 100%)"). Note that this will perform a #to_rgb operation using the
  # default conversion formula.
  #
  # source://color//lib/color/hsl.rb#38
  def css_rgb; end

  # Present the colour as an RGBA (with alpha) HTML/CSS colour string (e.g.,
  # "rgb(0%, 50%, 100%, 1)"). Note that this will perform a #to_rgb
  # operation using the default conversion formula.
  #
  # source://color//lib/color/hsl.rb#45
  def css_rgba(alpha = T.unsafe(nil)); end

  # Returns the hue of the colour in the range 0.0 .. 1.0.
  #
  # source://color//lib/color/hsl.rb#111
  def h; end

  # Sets the hue of the colour in the range 0.0 .. 1.0.
  #
  # source://color//lib/color/hsl.rb#125
  def h=(hh); end

  # Present the colour as an HTML/CSS colour string.
  #
  # source://color//lib/color/hsl.rb#31
  def html; end

  # Returns the hue of the colour in degrees.
  #
  # source://color//lib/color/hsl.rb#107
  def hue; end

  # Sets the hue of the colour in degrees. Colour is perceived as a wheel,
  # so values should be set properly even with negative degree values.
  #
  # source://color//lib/color/hsl.rb#116
  def hue=(hh); end

  # source://color//lib/color/hsl.rb#168
  def inspect; end

  # Returns the luminosity of the colour in the range 0.0 .. 1.0.
  #
  # source://color//lib/color/hsl.rb#151
  def l; end

  # Sets the luminosity of the colour in the ragne 0.0 .. 1.0.
  #
  # source://color//lib/color/hsl.rb#160
  def l=(ll); end

  # Returns the percentage of luminosity of the colour.
  #
  # source://color//lib/color/hsl.rb#146
  def lightness; end

  # Sets the percentage of luminosity of the colour.
  #
  # source://color//lib/color/hsl.rb#155
  def lightness=(ll); end

  # Returns the percentage of luminosity of the colour.
  #
  # source://color//lib/color/hsl.rb#146
  def luminosity; end

  # Sets the percentage of luminosity of the colour.
  #
  # source://color//lib/color/hsl.rb#155
  def luminosity=(ll); end

  # Mix the mask colour (which will be converted to an HSL colour) with the
  # current colour at the stated mix percentage as a decimal value.
  #
  # NOTE:: This differs from Color::RGB#mix_with.
  #
  # source://color//lib/color/hsl.rb#176
  def mix_with(color, mix_percent = T.unsafe(nil)); end

  # Returns the saturation of the colour in the range 0.0 .. 1.0.
  #
  # source://color//lib/color/hsl.rb#133
  def s; end

  # Sets the saturation of the colour in the ragne 0.0 .. 1.0.
  #
  # source://color//lib/color/hsl.rb#141
  def s=(ss); end

  # Returns the percentage of saturation of the colour.
  #
  # source://color//lib/color/hsl.rb#129
  def saturation; end

  # Sets the percentage of saturation of the colour.
  #
  # source://color//lib/color/hsl.rb#137
  def saturation=(ss); end

  # source://color//lib/color/hsl.rb#183
  def to_a; end

  # Converts to RGB then CMYK.
  #
  # source://color//lib/color/hsl.rb#93
  def to_cmyk; end

  # source://color//lib/color/hsl.rb#101
  def to_grayscale; end

  # source://color//lib/color/hsl.rb#101
  def to_greyscale; end

  # source://color//lib/color/hsl.rb#164
  def to_hsl; end

  # Converting from HSL to RGB. As with all colour conversions, this is
  # approximate at best. The code here is adapted from fvd and van Dam,
  # originally found at [1] (implemented similarly at [2]).
  #
  # This simplifies the calculations with the following assumptions:
  # - Luminance values <= 0 always translate to Color::RGB::Black.
  # - Luminance values >= 1 always translate to Color::RGB::White.
  # - Saturation values <= 0 always translate to a shade of gray using
  #   luminance as a percentage of gray.
  #
  # [1] http://bobpowell.net/RGBHSB.aspx
  # [2] http://support.microsoft.com/kb/29240
  #
  # source://color//lib/color/hsl.rb#73
  def to_rgb(*_arg0); end

  # Converts to RGB then YIQ.
  #
  # source://color//lib/color/hsl.rb#88
  def to_yiq; end

  private

  # This algorithm calculates based on a mixture of the saturation and
  # luminance, and then takes the RGB values from the hue + 1/3, hue, and
  # hue - 1/3 positions in a circular representation of colour divided into
  # four parts (confusing, I know, but it's the way that it works). See
  # #hue_to_rgb for more information.
  #
  # source://color//lib/color/hsl.rb#194
  def compute_fvd_rgb; end

  # Mix saturation and luminance for use in hue_to_rgb. The base value is
  # different depending on whether luminance is <= 50% or > 50%.
  #
  # source://color//lib/color/hsl.rb#203
  def fvd_mix_sat_lum; end

  # We calculate the interaction of the saturation/luminance mix (calculated
  # earlier) based on the position of the hue in the circular colour space
  # divided into quadrants. Our hue range is [0, 1), not [0, 360º).
  #
  # - The first quadrant covers the first 60º [0, 60º].
  # - The second quadrant covers the next 120º (60º, 180º].
  # - The third quadrant covers the next 60º (180º, 240º].
  # - The fourth quadrant covers the final 120º (240º, 360º).
  #
  # source://color//lib/color/hsl.rb#229
  def hue_to_rgb(h, t1, t2); end

  # In HSL, hues are referenced as degrees in a colour circle. The flow
  # itself is endless; therefore, we can rotate around. The only thing our
  # implementation restricts is that you should not be > 1.0.
  #
  # source://color//lib/color/hsl.rb#215
  def rotate_hue(h); end

  class << self
    # Creates an HSL colour object from fractional values 0..1.
    #
    # source://color//lib/color/hsl.rb#11
    def from_fraction(h = T.unsafe(nil), s = T.unsafe(nil), l = T.unsafe(nil), &block); end
  end
end

# An RGB colour object.
#
# source://color//lib/color.rb#8
class Color::RGB
  include ::Color

  # Creates an RGB colour object from the standard range 0..255.
  #
  #   Color::RGB.new(32, 64, 128)
  #   Color::RGB.new(0x20, 0x40, 0x80)
  #
  # @return [RGB] a new instance of RGB
  #
  # source://color//lib/color/rgb.rb#19
  def initialize(r = T.unsafe(nil), g = T.unsafe(nil), b = T.unsafe(nil), radix = T.unsafe(nil), &block); end

  # Adds another colour to the current colour. The other colour will be
  # converted to RGB before addition. This conversion depends upon a #to_rgb
  # method on the other colour.
  #
  # The addition is done using the RGB Accessor methods to ensure a valid
  # colour in the result.
  #
  # source://color//lib/color/rgb.rb#532
  def +(other); end

  # Subtracts another colour to the current colour. The other colour will be
  # converted to RGB before subtraction. This conversion depends upon a
  # #to_rgb method on the other colour.
  #
  # The subtraction is done using the RGB Accessor methods to ensure a valid
  # colour in the result.
  #
  # source://color//lib/color/rgb.rb#542
  def -(other); end

  # Numerically negate the color. This results in a color that is only
  # usable for subtraction.
  #
  # source://color//lib/color/rgb.rb#563
  def -@; end

  # Returns a new colour with the brightness adjusted by the specified
  # percentage. Negative percentages will darken the colour; positive
  # percentages will brighten the colour.
  #
  #   Color::RGB::DarkBlue.adjust_brightness(10)
  #   Color::RGB::DarkBlue.adjust_brightness(-10)
  #
  # source://color//lib/color/rgb.rb#301
  def adjust_brightness(percent); end

  # Returns a new colour with the hue adjusted by the specified percentage.
  # Negative percentages will reduce the hue; positive percentages will
  # increase the hue.
  #
  #   Color::RGB::DarkBlue.adjust_hue(10)
  #   Color::RGB::DarkBlue.adjust_hue(-10)
  #
  # source://color//lib/color/rgb.rb#327
  def adjust_hue(percent); end

  # Returns a new colour with the saturation adjusted by the specified
  # percentage. Negative percentages will reduce the saturation; positive
  # percentages will increase the saturation.
  #
  #   Color::RGB::DarkBlue.adjust_saturation(10)
  #   Color::RGB::DarkBlue.adjust_saturation(-10)
  #
  # source://color//lib/color/rgb.rb#314
  def adjust_saturation(percent); end

  # Returns the blue component of the colour as a fraction in the range 0.0
  # .. 1.0.
  #
  # source://color//lib/color/rgb.rb#509
  def b; end

  # Sets the blue component of the colour as a fraction in the range 0.0 ..
  # 1.0.
  #
  # source://color//lib/color/rgb.rb#522
  def b=(bb); end

  # Returns the blue component of the colour in the normal 0 .. 255 range.
  #
  # source://color//lib/color/rgb.rb#500
  def blue; end

  # Sets the blue component of the colour in the normal 0 .. 255 range.
  #
  # source://color//lib/color/rgb.rb#513
  def blue=(bb); end

  # Returns the blue component of the colour as a percentage.
  #
  # source://color//lib/color/rgb.rb#504
  def blue_p; end

  # Sets the blue component of the colour as a percentage.
  #
  # source://color//lib/color/rgb.rb#517
  def blue_p=(bb); end

  # Returns the brightness value for a colour, a number between 0..1. Based
  # on the Y value of YIQ encoding, representing luminosity, or perceived
  # brightness.
  #
  # This may be modified in a future version of color-tools to use the
  # luminosity value of HSL.
  #
  # source://color//lib/color/rgb.rb#286
  def brightness; end

  # Calculates and returns the closest match to this colour from a list of
  # provided colours. Returns +nil+ if +color_list+ is empty or if there is
  # no colour within the +threshold_distance+.
  #
  # +threshold_distance+ is used to determine the minimum colour distance
  # permitted. Uses the CIE Delta E 1994 algorithm (CIE94) to find near
  # matches based on perceived visual colour. The default value (1000.0) is
  # an arbitrarily large number. The values <tt>:jnd</tt> and
  # <tt>:just_noticeable</tt> may be passed as the +threshold_distance+ to
  # use the value <tt>2.3</tt>.
  #
  # source://color//lib/color/rgb.rb#347
  def closest_match(color_list, threshold_distance = T.unsafe(nil)); end

  # Coerces the other Color object into RGB.
  #
  # source://color//lib/color/rgb.rb#11
  def coerce(other); end

  # Present the colour as an HSL HTML/CSS colour string (e.g., "hsl(180,
  # 25%, 35%)"). Note that this will perform a #to_hsl operation using the
  # default conversion formula.
  #
  # source://color//lib/color/rgb.rb#77
  def css_hsl; end

  # Present the colour as an HSLA (with alpha) HTML/CSS colour string (e.g.,
  # "hsla(180, 25%, 35%, 1)"). Note that this will perform a #to_hsl
  # operation using the default conversion formula.
  #
  # source://color//lib/color/rgb.rb#84
  def css_hsla; end

  # Present the colour as an RGB HTML/CSS colour string (e.g., "rgb(0%, 50%,
  # 100%)"). Note that this will perform a #to_rgb operation using the
  # default conversion formula.
  #
  # source://color//lib/color/rgb.rb#58
  def css_rgb; end

  # Present the colour as an RGBA (with an optional alpha that defaults to 1)
  # HTML/CSS colour string (e.g.,"rgb(0%, 50%, 100%, 1)"). Note that this will
  # perform a #to_rgb operation using the default conversion formula.
  #
  #   Color::RGB.by_hex('ff0000').css_rgba
  #   => 'rgba(100.00%, 0.00%, 0.00%, 1.00)'
  #   Color::RGB.by_hex('ff0000').css_rgba(0.2)
  #   => 'rgba(100.00%, 0.00%, 0.00%, 0.20)'
  #
  # source://color//lib/color/rgb.rb#70
  def css_rgba(alpha = T.unsafe(nil)); end

  # Mix the RGB hue with Black so that the RGB hue is the specified
  # percentage of the resulting colour. Strictly speaking, this isn't a
  # darken_by operation.
  #
  # source://color//lib/color/rgb.rb#263
  def darken_by(percent); end

  # The Delta E (CIE94) algorithm
  # http://en.wikipedia.org/wiki/Color_difference#CIE94
  #
  # There is a newer version, CIEDE2000, that uses slightly more complicated
  # math, but addresses "the perceptual uniformity issue" left lingering by
  # the CIE94 algorithm. color_1 and color_2 are both L*a*b* hashes,
  # rendered by #to_lab.
  #
  # Since our source is treated as sRGB, we use the "graphic arts" presets
  # for k_L, k_1, and k_2
  #
  # The calculations go through LCH(ab). (?)
  #
  # See also http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE94.html
  #
  # NOTE: This should be moved to Color::Lab.
  #
  # source://color//lib/color/rgb.rb#387
  def delta_e94(color_1, color_2, weighting_type = T.unsafe(nil)); end

  # Returns the green component of the colour as a fraction in the range 0.0
  # .. 1.0.
  #
  # source://color//lib/color/rgb.rb#482
  def g; end

  # Sets the green component of the colour as a fraction in the range 0.0 ..
  # 1.0.
  #
  # source://color//lib/color/rgb.rb#495
  def g=(gg); end

  # Returns the green component of the colour in the normal 0 .. 255 range.
  #
  # source://color//lib/color/rgb.rb#473
  def green; end

  # Sets the green component of the colour in the normal 0 .. 255 range.
  #
  # source://color//lib/color/rgb.rb#486
  def green=(gg); end

  # Returns the green component of the colour as a percentage.
  #
  # source://color//lib/color/rgb.rb#477
  def green_p; end

  # Sets the green component of the colour as a percentage.
  #
  # source://color//lib/color/rgb.rb#490
  def green_p=(gg); end

  # Present the colour as an RGB hex triplet.
  #
  # source://color//lib/color/rgb.rb#37
  def hex; end

  # Present the colour as an HTML/CSS colour string.
  #
  # source://color//lib/color/rgb.rb#51
  def html; end

  # source://color//lib/color/rgb.rb#553
  def inspect; end

  # Mix the RGB hue with White so that the RGB hue is the specified
  # percentage of the resulting colour. Strictly speaking, this isn't a
  # darken_by operation.
  #
  # source://color//lib/color/rgb.rb#256
  def lighten_by(percent); end

  # Retrieve the maxmum RGB value from the current colour as a GrayScale
  # colour
  #
  # source://color//lib/color/rgb.rb#548
  def max_rgb_as_grayscale; end

  # Retrieve the maxmum RGB value from the current colour as a GrayScale
  # colour
  #
  # source://color//lib/color/rgb.rb#548
  def max_rgb_as_greyscale; end

  # Mix the mask colour (which must be an RGB object) with the current
  # colour at the stated opacity percentage (0..100).
  #
  # source://color//lib/color/rgb.rb#269
  def mix_with(mask, opacity); end

  # Present the colour as a DeviceRGB fill colour string for PDF. This will
  # be removed from the default package in color-tools 2.0.
  #
  # source://color//lib/color/rgb.rb#26
  def pdf_fill; end

  # Present the colour as a DeviceRGB stroke colour string for PDF. This
  # will be removed from the default package in color-tools 2.0.
  #
  # source://color//lib/color/rgb.rb#32
  def pdf_stroke; end

  # Returns the red component of the colour as a fraction in the range 0.0
  # .. 1.0.
  #
  # source://color//lib/color/rgb.rb#455
  def r; end

  # Sets the red component of the colour as a fraction in the range 0.0 ..
  # 1.0.
  #
  # source://color//lib/color/rgb.rb#468
  def r=(rr); end

  # Returns the red component of the colour in the normal 0 .. 255 range.
  #
  # source://color//lib/color/rgb.rb#446
  def red; end

  # Sets the red component of the colour in the normal 0 .. 255 range.
  #
  # source://color//lib/color/rgb.rb#459
  def red=(rr); end

  # Returns the red component of the colour as a percentage.
  #
  # source://color//lib/color/rgb.rb#450
  def red_p; end

  # Sets the red component of the colour as a percentage.
  #
  # source://color//lib/color/rgb.rb#463
  def red_p=(rr); end

  # source://color//lib/color/rgb.rb#557
  def to_a; end

  # Converts the RGB colour to CMYK. Most colour experts strongly suggest
  # that this is not a good idea (some even suggesting that it's a very bad
  # idea). CMYK represents additive percentages of inks on white paper,
  # whereas RGB represents mixed colour intensities on a black screen.
  #
  # However, the colour conversion can be done. The basic method is
  # multi-step:
  #
  # 1. Convert the R, G, and B components to C, M, and Y components.
  #     c = 1.0 - r
  #     m = 1.0 - g
  #     y = 1.0 - b
  # 2. Compute the minimum amount of black (K) required to smooth the colour
  #    in inks.
  #     k = min(c, m, y)
  # 3. Perform undercolour removal on the C, M, and Y components of the
  #    colours because less of each colour is needed for each bit of black.
  #    Also, regenerate the black (K) based on the undercolour removal so
  #    that the colour is more accurately represented in ink.
  #     c = min(1.0, max(0.0, c - UCR(k)))
  #     m = min(1.0, max(0.0, m - UCR(k)))
  #     y = min(1.0, max(0.0, y - UCR(k)))
  #     k = min(1.0, max(0.0, BG(k)))
  #
  # The undercolour removal function and the black generation functions
  # return a value based on the brightness of the RGB colour.
  #
  # source://color//lib/color/rgb.rb#114
  def to_cmyk; end

  # Convert to grayscale.
  #
  # source://color//lib/color/rgb.rb#290
  def to_grayscale; end

  # Convert to grayscale.
  #
  # source://color//lib/color/rgb.rb#290
  def to_greyscale; end

  # Returns the HSL colour encoding of the RGB value. The conversions here
  # are based on forumlas from http://www.easyrgb.com/math.php and
  # elsewhere.
  #
  # source://color//lib/color/rgb.rb#145
  def to_hsl; end

  # Returns the L*a*b* colour encoding of the value via the XYZ colour
  # encoding. Based on the
  # {XYZ to Lab}[http://www.brucelindbloom.com/index.html?Eqn_XYZ_to_Lab.html]
  # formula presented by Bruce Lindbloom.
  #
  # Currently only the sRGB colour space is supported and defaults to using
  # a D65 reference white.
  #
  # source://color//lib/color/rgb.rb#217
  def to_lab(color_space = T.unsafe(nil), reference_white = T.unsafe(nil)); end

  # source://color//lib/color/rgb.rb#130
  def to_rgb(ignored = T.unsafe(nil)); end

  # Returns the XYZ colour encoding of the value. Based on the
  # {RGB to XYZ}[http://www.brucelindbloom.com/index.html?Eqn_RGB_to_XYZ.html]
  # formula presented by Bruce Lindbloom.
  #
  # Currently only the sRGB colour space is supported.
  #
  # source://color//lib/color/rgb.rb#186
  def to_xyz(color_space = T.unsafe(nil)); end

  # Returns the YIQ (NTSC) colour encoding of the RGB value.
  #
  # source://color//lib/color/rgb.rb#135
  def to_yiq; end

  private

  # source://color//lib/color/rgb.rb#572
  def normalize_percent(percent); end

  class << self
    # Return a colour as identified by the colour name, or by hex.
    #
    # source://color//lib/color/rgb.rb#648
    def by_css(name_or_hex, &block); end

    # Find or create a colour by an HTML hex code. This differs from the
    # #from_html method in that if the colour code matches a named colour,
    # the existing colour will be returned.
    #
    #     Color::RGB.by_hex('ff0000').name # => 'red'
    #     Color::RGB.by_hex('ff0001').name # => nil
    #
    # If a block is provided, the value that is returned by the block will
    # be returned instead of the exception caused by an error in providing a
    # correct hex format.
    #
    # source://color//lib/color/rgb.rb#632
    def by_hex(hex, &block); end

    # Return a colour as identified by the colour name.
    #
    # source://color//lib/color/rgb.rb#643
    def by_name(name, &block); end

    # Extract named or hex colours from the provided text.
    #
    # source://color//lib/color/rgb.rb#653
    def extract_colors(text, mode = T.unsafe(nil)); end

    # Creates an RGB colour object from fractional values 0..1.
    #
    #   Color::RGB.from_fraction(.3, .2, .1)
    #
    # source://color//lib/color/rgb.rb#592
    def from_fraction(r = T.unsafe(nil), g = T.unsafe(nil), b = T.unsafe(nil), &block); end

    # Creates an RGB colour object from a grayscale fractional value 0..1.
    #
    # source://color//lib/color/rgb.rb#597
    def from_grayscale_fraction(l = T.unsafe(nil), &block); end

    # source://color//lib/color/rgb.rb#597
    def from_greyscale_fraction(l = T.unsafe(nil), &block); end

    # Creates an RGB colour object from an HTML colour descriptor (e.g.,
    # <tt>"fed"</tt> or <tt>"#cabbed;"</tt>.
    #
    #   Color::RGB.from_html("fed")
    #   Color::RGB.from_html("#fed")
    #   Color::RGB.from_html("#cabbed")
    #   Color::RGB.from_html("cabbed")
    #
    # source://color//lib/color/rgb.rb#609
    def from_html(html_colour, &block); end

    # Creates an RGB colour object from percentages 0..100.
    #
    #   Color::RGB.from_percentage(10, 20, 30)
    #
    # source://color//lib/color/rgb.rb#585
    def from_percentage(r = T.unsafe(nil), g = T.unsafe(nil), b = T.unsafe(nil), &block); end

    private

    # source://color//lib/color/rgb.rb#694
    def __by_hex; end

    # source://color//lib/color/rgb.rb#698
    def __by_name; end

    # source://color//lib/color/rgb.rb#680
    def __named_color(mod, rgb, *names); end

    # source://color//lib/color/rgb.rb#702
    def html_hexify(hex); end

    # source://color//lib/color/rgb/metallic.rb#10
    def metallic(rgb, *names); end

    # source://color//lib/color/rgb/colors.rb#4
    def named(rgb, *names); end
  end
end

# source://color//lib/color/rgb.rb#686
Color::RGB::AliceBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::AntiqueWhite = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Aqua = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Aquamarine = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Azure = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::BeccaPurple = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Beige = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Bisque = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Black = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::BlanchedAlmond = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Blue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::BlueViolet = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Brown = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::BurlyWood = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Burlywood = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::CadetBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Carnation = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Cayenne = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Chartreuse = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Chocolate = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Coral = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::CornflowerBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Cornsilk = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Crimson = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Cyan = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkCyan = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkGoldenRod = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkGoldenrod = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkGray = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkGrey = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkKhaki = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkMagenta = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkOliveGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkOrange = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkOrchid = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkRed = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkSalmon = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkSeaGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkSlateBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkSlateGray = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkSlateGrey = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkTurquoise = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkViolet = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DarkoliveGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Darkorange = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Darksalmon = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DeepPink = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DeepSkyBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DimGray = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DimGrey = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::DodgerBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Feldspar = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::FireBrick = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Firebrick = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::FloralWhite = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::ForestGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Fuchsia = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gainsboro = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::GhostWhite = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gold = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::GoldenRod = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Goldenrod = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray10 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray20 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray30 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray40 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray50 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray60 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray70 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray80 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Gray90 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Green = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::GreenYellow = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey10 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey20 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey30 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey40 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey50 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey60 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey70 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey80 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Grey90 = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::HoneyDew = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Honeydew = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::HotPink = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::IndianRed = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Indigo = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Ivory = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Khaki = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Lavender = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LavenderBlush = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LawnGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LemonChiffon = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightCoral = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightCyan = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightGoldenRodYellow = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightGoldenrodYellow = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightGray = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightGrey = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightPink = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightSalmon = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightSeaGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightSkyBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightSlateBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightSlateGray = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightSlateGrey = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightSteelBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightYellow = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Lightsalmon = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LightsteelBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Lime = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::LimeGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Linen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Magenta = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Maroon = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumAquaMarine = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumAquamarine = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumOrchid = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumPurple = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumSeaGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumSlateBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumSpringGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumTurquoise = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MediumVioletRed = T.let(T.unsafe(nil), Color::RGB)

# This namespace contains some RGB metallic colours suggested by Jim
# Freeze.
#
# source://color//lib/color/rgb/metallic.rb#6
module Color::RGB::Metallic; end

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Aluminum = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::CoolCopper = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Copper = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Iron = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Lead = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Magnesium = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Mercury = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Nickel = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Poly = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::PolySilicon = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Silver = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Steel = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Tin = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Metallic::Tungsten = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MidnightBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MintCream = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::MistyRose = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Moccasin = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::NavajoWhite = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Navy = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::OldLace = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Olive = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::OliveDrab = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Olivedrab = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Orange = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::OrangeRed = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Orchid = T.let(T.unsafe(nil), Color::RGB)

# The format of a DeviceRGB colour for PDF. In color-tools 2.0 this will
# be removed from this package and added back as a modification by the
# PDF::Writer package.
#
# source://color//lib/color/rgb.rb#8
Color::RGB::PDF_FORMAT_STR = T.let(T.unsafe(nil), String)

# source://color//lib/color/rgb.rb#686
Color::RGB::PaleGoldenRod = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::PaleGoldenrod = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::PaleGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::PaleTurquoise = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::PaleVioletRed = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::PapayaWhip = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::PeachPuff = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Peachpuff = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Peru = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Pink = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Plum = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::PowderBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Purple = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::RebeccaPurple = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Red = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::RosyBrown = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::RoyalBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SaddleBrown = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Salmon = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SandyBrown = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SeaGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SeaShell = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Seashell = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Sienna = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Silver = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SkyBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SlateBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SlateGray = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SlateGrey = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Snow = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SpringGreen = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::SteelBlue = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Tan = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Teal = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Thistle = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Tomato = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Turquoise = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Violet = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::VioletRed = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Wheat = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::White = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::WhiteSmoke = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::Yellow = T.let(T.unsafe(nil), Color::RGB)

# source://color//lib/color/rgb.rb#686
Color::RGB::YellowGreen = T.let(T.unsafe(nil), Color::RGB)

# A colour object representing YIQ (NTSC) colour encoding.
#
# source://color//lib/color.rb#12
class Color::YIQ
  include ::Color

  # Creates a YIQ colour object from percentages 0 .. 100.
  #
  #   Color::YIQ.new(10, 20, 30)
  #
  # @return [YIQ] a new instance of YIQ
  #
  # source://color//lib/color/yiq.rb#15
  def initialize(y = T.unsafe(nil), i = T.unsafe(nil), q = T.unsafe(nil), radix = T.unsafe(nil), &block); end

  # source://color//lib/color/yiq.rb#28
  def brightness; end

  # source://color//lib/color/yiq.rb#20
  def coerce(other); end

  # source://color//lib/color/yiq.rb#42
  def i; end

  # source://color//lib/color/yiq.rb#45
  def i=(ii); end

  # source://color//lib/color/yiq.rb#55
  def inspect; end

  # source://color//lib/color/yiq.rb#48
  def q; end

  # source://color//lib/color/yiq.rb#51
  def q=(qq); end

  # source://color//lib/color/yiq.rb#59
  def to_a; end

  # source://color//lib/color/yiq.rb#31
  def to_grayscale; end

  # source://color//lib/color/yiq.rb#31
  def to_greyscale; end

  # source://color//lib/color/yiq.rb#24
  def to_yiq; end

  # source://color//lib/color/yiq.rb#36
  def y; end

  # source://color//lib/color/yiq.rb#39
  def y=(yy); end

  class << self
    # Creates a YIQ colour object from fractional values 0 .. 1.
    #
    #   Color::YIQ.new(0.3, 0.2, 0.1)
    #
    # source://color//lib/color/yiq.rb#8
    def from_fraction(y = T.unsafe(nil), i = T.unsafe(nil), q = T.unsafe(nil), &block); end
  end
end
