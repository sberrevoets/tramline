# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `retriable` gem.
# Please instead update this file by running `bin/tapioca gem retriable`.


# source://retriable//lib/retriable/exponential_backoff.rb#1
module Retriable
  private

  # source://retriable//lib/retriable.rb#13
  def config; end

  # source://retriable//lib/retriable.rb#9
  def configure; end

  # source://retriable//lib/retriable.rb#25
  def retriable(opts = T.unsafe(nil)); end

  # source://retriable//lib/retriable.rb#17
  def with_context(context_key, options = T.unsafe(nil), &block); end

  class << self
    # source://retriable//lib/retriable.rb#13
    def config; end

    # @yield [config]
    #
    # source://retriable//lib/retriable.rb#9
    def configure; end

    # source://retriable//lib/retriable.rb#25
    def retriable(opts = T.unsafe(nil)); end

    # source://retriable//lib/retriable.rb#17
    def with_context(context_key, options = T.unsafe(nil), &block); end
  end
end

# source://retriable//lib/retriable/config.rb#4
class Retriable::Config
  # @return [Config] a new instance of Config
  #
  # source://retriable//lib/retriable/config.rb#17
  def initialize(opts = T.unsafe(nil)); end

  # source://retriable//lib/retriable/config.rb#15
  def base_interval; end

  # source://retriable//lib/retriable/config.rb#15
  def base_interval=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def contexts; end

  # source://retriable//lib/retriable/config.rb#15
  def contexts=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def intervals; end

  # source://retriable//lib/retriable/config.rb#15
  def intervals=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def max_elapsed_time; end

  # source://retriable//lib/retriable/config.rb#15
  def max_elapsed_time=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def max_interval; end

  # source://retriable//lib/retriable/config.rb#15
  def max_interval=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def multiplier; end

  # source://retriable//lib/retriable/config.rb#15
  def multiplier=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def on; end

  # source://retriable//lib/retriable/config.rb#15
  def on=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def on_retry; end

  # source://retriable//lib/retriable/config.rb#15
  def on_retry=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def rand_factor; end

  # source://retriable//lib/retriable/config.rb#15
  def rand_factor=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def sleep_disabled; end

  # source://retriable//lib/retriable/config.rb#15
  def sleep_disabled=(_arg0); end

  # source://retriable//lib/retriable/config.rb#15
  def timeout; end

  # source://retriable//lib/retriable/config.rb#15
  def timeout=(_arg0); end

  # source://retriable//lib/retriable/config.rb#39
  def to_h; end

  # source://retriable//lib/retriable/config.rb#15
  def tries; end

  # source://retriable//lib/retriable/config.rb#15
  def tries=(_arg0); end
end

# source://retriable//lib/retriable/config.rb#5
Retriable::Config::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://retriable//lib/retriable/exponential_backoff.rb#2
class Retriable::ExponentialBackoff
  # @return [ExponentialBackoff] a new instance of ExponentialBackoff
  #
  # source://retriable//lib/retriable/exponential_backoff.rb#13
  def initialize(opts = T.unsafe(nil)); end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def base_interval; end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def base_interval=(_arg0); end

  # source://retriable//lib/retriable/exponential_backoff.rb#26
  def intervals; end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def max_interval; end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def max_interval=(_arg0); end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def multiplier; end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def multiplier=(_arg0); end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def rand_factor; end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def rand_factor=(_arg0); end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def tries; end

  # source://retriable//lib/retriable/exponential_backoff.rb#11
  def tries=(_arg0); end

  private

  # source://retriable//lib/retriable/exponential_backoff.rb#38
  def randomize(interval); end
end

# source://retriable//lib/retriable/exponential_backoff.rb#3
Retriable::ExponentialBackoff::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://retriable//lib/retriable/version.rb#2
Retriable::VERSION = T.let(T.unsafe(nil), String)
