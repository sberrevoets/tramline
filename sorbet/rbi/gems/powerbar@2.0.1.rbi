# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `powerbar` gem.
# Please instead update this file by running `bin/tapioca gem powerbar`.


# This is PowerBar - The last progressbar-library you'll ever need.
#
# source://powerbar//lib/powerbar.rb#30
class PowerBar
  # @return [PowerBar] a new instance of PowerBar
  #
  # source://powerbar//lib/powerbar.rb#34
  def initialize(opts = T.unsafe(nil)); end

  # Render the actual bar-portion of the PowerBar.
  # The length of the bar is determined from the template.
  # Returns nil if the bar-length would be == 0.
  #
  # source://powerbar//lib/powerbar.rb#238
  def bar; end

  # Print the close-template and defuse the exit-hook.
  # Be a good citizen, always close your PowerBars!
  #
  # source://powerbar//lib/powerbar.rb#173
  def close(fill = T.unsafe(nil)); end

  # source://powerbar//lib/powerbar.rb#303
  def done; end

  # source://powerbar//lib/powerbar.rb#270
  def elapsed; end

  # source://powerbar//lib/powerbar.rb#260
  def eta; end

  # source://powerbar//lib/powerbar.rb#248
  def h_bar; end

  # source://powerbar//lib/powerbar.rb#307
  def h_done; end

  # source://powerbar//lib/powerbar.rb#274
  def h_elapsed; end

  # returns nil when eta is < 1 second
  #
  # source://powerbar//lib/powerbar.rb#265
  def h_eta; end

  # source://powerbar//lib/powerbar.rb#256
  def h_msg; end

  # source://powerbar//lib/powerbar.rb#283
  def h_percent; end

  # source://powerbar//lib/powerbar.rb#291
  def h_rate; end

  # source://powerbar//lib/powerbar.rb#299
  def h_total; end

  # Hook at_exit to ensure cleanup if we get interrupted
  #
  # source://powerbar//lib/powerbar.rb#161
  def hook_exit; end

  # source://powerbar//lib/powerbar.rb#252
  def msg; end

  # source://powerbar//lib/powerbar.rb#278
  def percent; end

  # Remove progress-bar, print a message
  #
  # source://powerbar//lib/powerbar.rb#191
  def print(s); end

  # source://powerbar//lib/powerbar.rb#287
  def rate; end

  # Render the PowerBar and return as a string.
  #
  # source://powerbar//lib/powerbar.rb#225
  def render(opts = T.unsafe(nil)); end

  # settings under current scope (e.g. tty.infinite)
  #
  # source://powerbar//lib/powerbar.rb#140
  def scope; end

  # settings-hash
  #
  # source://powerbar//lib/powerbar.rb#135
  def settings; end

  # Output the PowerBar.
  # Returns true if bar was shown, false otherwise.
  #
  # source://powerbar//lib/powerbar.rb#210
  def show(opts = T.unsafe(nil), force = T.unsafe(nil)); end

  # source://powerbar//lib/powerbar.rb#311
  def terminal_width; end

  # source://powerbar//lib/powerbar.rb#295
  def total; end

  # Update state (and settings) without printing anything.
  #
  # source://powerbar//lib/powerbar.rb#197
  def update(opts = T.unsafe(nil)); end

  # Remove the PowerBar from the screen.
  #
  # source://powerbar//lib/powerbar.rb#231
  def wipe; end

  private

  # Cap'n Hook
  #
  # source://powerbar//lib/powerbar.rb#332
  def exit!; end

  # source://powerbar//lib/powerbar.rb#373
  def humanize_interval(s); end

  # source://powerbar//lib/powerbar.rb#357
  def humanize_quantity(number, format = T.unsafe(nil)); end

  # source://powerbar//lib/powerbar.rb#337
  def render_template(tplid = T.unsafe(nil), skip = T.unsafe(nil)); end

  # source://powerbar//lib/powerbar.rb#322
  def round(number, digit); end

  # source://powerbar//lib/powerbar.rb#318
  def state; end
end

# source://powerbar//lib/powerbar.rb#356
PowerBar::HQ_UNITS = T.let(T.unsafe(nil), Array)

# source://powerbar//lib/powerbar.rb#32
PowerBar::RUBY18 = T.let(T.unsafe(nil), FalseClass)

# source://powerbar//lib/powerbar.rb#378
class PowerBar::Rate < ::Array
  # @return [Rate] a new instance of Rate
  #
  # source://powerbar//lib/powerbar.rb#380
  def initialize(at, window, max_interval = T.unsafe(nil), interval_step_up = T.unsafe(nil)); end

  # source://powerbar//lib/powerbar.rb#390
  def append(at, v); end

  # source://powerbar//lib/powerbar.rb#410
  def avg; end

  # Returns the value of attribute last_sample_at.
  #
  # source://powerbar//lib/powerbar.rb#379
  def last_sample_at; end

  # source://powerbar//lib/powerbar.rb#406
  def sum; end
end

# source://powerbar//lib/powerbar.rb#31
PowerBar::STRIP_ANSI = T.let(T.unsafe(nil), Regexp)

# source://powerbar//lib/powerbar/version.rb#1
class Powerbar; end

# source://powerbar//lib/powerbar/version.rb#2
Powerbar::VERSION = T.let(T.unsafe(nil), String)
