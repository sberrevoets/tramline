# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ougai` gem.
# Please instead update this file by running `bin/tapioca gem ougai`.


# source://ougai//lib/ougai/version.rb#3
module Ougai; end

# A logger created by the `child` method of parent logger
#
# source://ougai//lib/ougai/child_logger.rb#5
class Ougai::ChildLogger
  include ::Logger::Severity
  include ::Ougai::Logging::Severity
  include ::Ougai::Logging

  # @private
  # @return [ChildLogger] a new instance of ChildLogger
  #
  # source://ougai//lib/ougai/child_logger.rb#9
  def initialize(parent, fields); end

  # @private
  #
  # source://ougai//lib/ougai/child_logger.rb#82
  def chain(severity, args, fields, hooks); end

  # Creates a child logger and returns it.
  #
  # @param fields [Hash] The fields appending to all logs
  # @return [ChildLogger] A created child logger
  #
  # source://ougai//lib/ougai/child_logger.rb#19
  def child(fields = T.unsafe(nil)); end

  # Whether the current severity level allows for logging DEBUG.
  #
  # @return [Boolean] true if allows
  #
  # source://ougai//lib/ougai/child_logger.rb#53
  def debug?; end

  # Whether the current severity level allows for logging ERROR.
  #
  # @return [Boolean] true if allows
  #
  # source://ougai//lib/ougai/child_logger.rb#71
  def error?; end

  # Whether the current severity level allows for logging FATAL.
  #
  # @return [Boolean] true if allows
  #
  # source://ougai//lib/ougai/child_logger.rb#77
  def fatal?; end

  # Whether the current severity level allows for logging INFO.
  #
  # @return [Boolean] true if allows
  #
  # source://ougai//lib/ougai/child_logger.rb#59
  def info?; end

  # source://ougai//lib/ougai/child_logger.rb#44
  def level; end

  # Set logging severity threshold.
  # Note that the log level below parent one does not work.
  #
  # @param severity [Integer|String|Symbol] The Severity of the log message.
  #
  # source://ougai//lib/ougai/child_logger.rb#32
  def level=(severity); end

  # source://ougai//lib/ougai/child_logger.rb#44
  def sev_threshold; end

  # Set logging severity threshold.
  # Note that the log level below parent one does not work.
  #
  # @param severity [Integer|String|Symbol] The Severity of the log message.
  #
  # source://ougai//lib/ougai/child_logger.rb#32
  def sev_threshold=(severity); end

  # Whether the current severity level allows for logging WARN.
  #
  # @return [Boolean] true if allows
  #
  # source://ougai//lib/ougai/child_logger.rb#65
  def warn?; end

  protected

  # source://ougai//lib/ougai/child_logger.rb#89
  def append(severity, args); end
end

# source://ougai//lib/ougai/formatters/base.rb#7
module Ougai::Formatters; end

# Base formatter
# Custom formatter must override `_call`.
#
# @attr trace_indent [Fixnum] Specify exception backtrace indent (by default this is 2).
# @attr trace_max_lines [Fixnum] Keep exception backtrace lines (by default this is 100).
# @attr serialize_backtrace [Boolean] Whether exception should converts String (by default this is on).
#
# source://ougai//lib/ougai/formatters/base.rb#13
class Ougai::Formatters::Base < ::Logger::Formatter
  # Intialize a formatter
  #
  # @option opts
  # @option opts
  # @option opts
  # @param app_name [String] application name
  # @param hostname [String] hostname
  # @param opts [Hash] the initial values of attributes
  # @return [Base] a new instance of Base
  #
  # source://ougai//lib/ougai/formatters/base.rb#25
  def initialize(app_name = T.unsafe(nil), hostname = T.unsafe(nil), opts = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://ougai//lib/ougai/formatters/base.rb#38
  def _call(severity, time, progname, data); end

  # Returns the value of attribute app_name.
  #
  # source://ougai//lib/ougai/formatters/base.rb#16
  def app_name; end

  # source://ougai//lib/ougai/formatters/base.rb#34
  def call(severity, time, progname, data); end

  # source://ougai//lib/ougai/formatters/base.rb#42
  def datetime_format=(value); end

  # Returns the value of attribute hostname.
  #
  # source://ougai//lib/ougai/formatters/base.rb#16
  def hostname; end

  # Whether exception should converts String (by default this is on).
  #
  # @return [Boolean] the current value of serialize_backtrace
  #
  # source://ougai//lib/ougai/formatters/base.rb#15
  def serialize_backtrace; end

  # Whether exception should converts String (by default this is on).
  #
  # @param value [Boolean] the value to set the attribute serialize_backtrace to.
  # @return [Boolean] the newly set value
  #
  # source://ougai//lib/ougai/formatters/base.rb#15
  def serialize_backtrace=(_arg0); end

  # source://ougai//lib/ougai/formatters/base.rb#46
  def serialize_exc(ex); end

  # source://ougai//lib/ougai/formatters/base.rb#58
  def serialize_trace(trace); end

  # Specify exception backtrace indent (by default this is 2).
  #
  # @return [Fixnum] the current value of trace_indent
  #
  # source://ougai//lib/ougai/formatters/base.rb#14
  def trace_indent; end

  # Specify exception backtrace indent (by default this is 2).
  #
  # @param value [Fixnum] the value to set the attribute trace_indent to.
  # @return [Fixnum] the newly set value
  #
  # source://ougai//lib/ougai/formatters/base.rb#14
  def trace_indent=(_arg0); end

  # Keep exception backtrace lines (by default this is 100).
  #
  # @return [Fixnum] the current value of trace_max_lines
  #
  # source://ougai//lib/ougai/formatters/base.rb#14
  def trace_max_lines; end

  # Keep exception backtrace lines (by default this is 100).
  #
  # @param value [Fixnum] the value to set the attribute trace_max_lines to.
  # @return [Fixnum] the newly set value
  #
  # source://ougai//lib/ougai/formatters/base.rb#14
  def trace_max_lines=(_arg0); end

  private

  # source://ougai//lib/ougai/formatters/base.rb#69
  def default_datetime_format; end

  # source://ougai//lib/ougai/formatters/base.rb#65
  def format_datetime(time); end

  class << self
    # source://ougai//lib/ougai/formatters/base.rb#73
    def parse_new_params(args); end
  end
end

# A JSON formatter compatible with node-bunyan
#
# source://ougai//lib/ougai/formatters/bunyan.rb#8
class Ougai::Formatters::Bunyan < ::Ougai::Formatters::Base
  include ::Ougai::Formatters::ForJson

  # Intialize a formatter
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param app_name [String] application name (execution program name if nil)
  # @param hostname [String] hostname (hostname if nil)
  # @param opts [Hash] the initial values of attributes
  # @return [Bunyan] a new instance of Bunyan
  #
  # source://ougai//lib/ougai/formatters/bunyan.rb#20
  def initialize(app_name = T.unsafe(nil), hostname = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://ougai//lib/ougai/formatters/bunyan.rb#26
  def _call(severity, time, progname, data); end

  # source://ougai//lib/ougai/formatters/bunyan.rb#37
  def convert_time(data); end
end

# The features for JSON formatter
#
# @attr jsonize [Boolean] Whether log should converts JSON
# @attr with_newline [Boolean] Whether tailing NL should be appended
#
# source://ougai//lib/ougai/formatters/for_json.rb#7
module Ougai::Formatters::ForJson
  # Returns the value of attribute jsonize.
  #
  # source://ougai//lib/ougai/formatters/for_json.rb#8
  def jsonize; end

  # Sets the attribute jsonize
  #
  # @param value the value to set the attribute jsonize to.
  #
  # source://ougai//lib/ougai/formatters/for_json.rb#8
  def jsonize=(_arg0); end

  # Returns the value of attribute with_newline.
  #
  # source://ougai//lib/ougai/formatters/for_json.rb#8
  def with_newline; end

  # Sets the attribute with_newline
  #
  # @param value the value to set the attribute with_newline to.
  #
  # source://ougai//lib/ougai/formatters/for_json.rb#8
  def with_newline=(_arg0); end

  protected

  # requires convert_time(data) method
  #
  # source://ougai//lib/ougai/formatters/for_json.rb#38
  def dump(data); end

  # source://ougai//lib/ougai/formatters/for_json.rb#12
  def init_opts_for_json(opts); end

  # source://ougai//lib/ougai/formatters/for_json.rb#18
  def to_level(severity); end
end

# A JSON formatter compatible with pino
#
# source://ougai//lib/ougai/formatters/pino.rb#8
class Ougai::Formatters::Pino < ::Ougai::Formatters::Base
  include ::Ougai::Formatters::ForJson

  # Intialize a formatter
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param app_name [String] application name (execution program name if nil)
  # @param hostname [String] hostname (hostname if nil)
  # @param opts [Hash] the initial values of attributes
  # @return [Pino] a new instance of Pino
  #
  # source://ougai//lib/ougai/formatters/pino.rb#20
  def initialize(app_name = T.unsafe(nil), hostname = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://ougai//lib/ougai/formatters/pino.rb#32
  def _call(severity, time, progname, data); end

  # source://ougai//lib/ougai/formatters/pino.rb#55
  def convert_time(data); end

  # @raise [NotImplementedError]
  #
  # source://ougai//lib/ougai/formatters/pino.rb#28
  def datetime_format=(val); end

  # source://ougai//lib/ougai/formatters/pino.rb#44
  def flat_err(data); end
end

# A human readble formatter with amazing_print
#
# @attr plain [Boolean] Whether log should be plain not colorized.
# @attr excluded_fields [Array<String, Symbol>] The fields excluded from all logs
#
# source://ougai//lib/ougai/formatters/readable.rb#10
class Ougai::Formatters::Readable < ::Ougai::Formatters::Base
  # Intialize a formatter
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param app_name [String] application name (execution program name if nil)
  # @param hostname [String] hostname (hostname if nil)
  # @param opts [Hash] the initial values of attributes
  # @return [Readable] a new instance of Readable
  #
  # source://ougai//lib/ougai/formatters/readable.rb#21
  def initialize(app_name = T.unsafe(nil), hostname = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://ougai//lib/ougai/formatters/readable.rb#31
  def _call(severity, time, progname, _data); end

  # The fields excluded from all logs
  #
  # @return [Array<String, Symbol>] the current value of excluded_fields
  #
  # source://ougai//lib/ougai/formatters/readable.rb#11
  def excluded_fields; end

  # The fields excluded from all logs
  #
  # @param value [Array<String, Symbol>] the value to set the attribute excluded_fields to.
  # @return [Array<String, Symbol>] the newly set value
  #
  # source://ougai//lib/ougai/formatters/readable.rb#11
  def excluded_fields=(_arg0); end

  # Whether log should be plain not colorized.
  #
  # @return [Boolean] the current value of plain
  #
  # source://ougai//lib/ougai/formatters/readable.rb#11
  def plain; end

  # Whether log should be plain not colorized.
  #
  # @param value [Boolean] the value to set the attribute plain to.
  # @return [Boolean] the newly set value
  #
  # source://ougai//lib/ougai/formatters/readable.rb#11
  def plain=(_arg0); end

  # @raise [NotImplementedError]
  #
  # source://ougai//lib/ougai/formatters/readable.rb#43
  def serialize_backtrace=(value); end

  protected

  # source://ougai//lib/ougai/formatters/readable.rb#56
  def colored_level(severity); end

  # source://ougai//lib/ougai/formatters/readable.rb#84
  def create_data_str(data); end

  # source://ougai//lib/ougai/formatters/readable.rb#76
  def create_err_str(data); end

  # source://ougai//lib/ougai/formatters/readable.rb#49
  def format_log_parts(datetime, level, msg, err, data); end

  # source://ougai//lib/ougai/formatters/readable.rb#89
  def load_dependent; end
end

# Main Logger
#
# @attr default_message [String] Use this if log message is not specified (by default this is 'No message').
# @attr exc_key [String] The field name of Exception (by default this is :err).
# @attr with_fields [Hash] The fields appending to all logs.
# @attr before_log [Proc] Hook before logging.
#
# source://ougai//lib/ougai/logger.rb#9
class Ougai::Logger < ::Logger
  include ::Ougai::Logging::Severity
  include ::Ougai::Logging

  # @return [Logger] a new instance of Logger
  #
  # source://ougai//lib/ougai/logger.rb#15
  def initialize(*_arg0, **_arg1); end

  # @private
  #
  # source://ougai//lib/ougai/logger.rb#87
  def chain(severity, args, fields, hooks); end

  # Creates a child logger and returns it.
  #
  # @param fields [Hash] The fields appending to all logs
  # @return [ChildLogger] A created child logger
  #
  # source://ougai//lib/ougai/logger.rb#76
  def child(fields = T.unsafe(nil)); end

  # Use this if log message is not specified (by default this is 'No message').
  #
  # @return [String] the current value of default_message
  #
  # source://ougai//lib/ougai/logger.rb#13
  def default_message; end

  # Use this if log message is not specified (by default this is 'No message').
  #
  # @param value [String] the value to set the attribute default_message to.
  # @return [String] the newly set value
  #
  # source://ougai//lib/ougai/logger.rb#13
  def default_message=(_arg0); end

  # The field name of Exception (by default this is :err).
  #
  # @return [String] the current value of exc_key
  #
  # source://ougai//lib/ougai/logger.rb#13
  def exc_key; end

  # The field name of Exception (by default this is :err).
  #
  # @param value [String] the value to set the attribute exc_key to.
  # @return [String] the newly set value
  #
  # source://ougai//lib/ougai/logger.rb#13
  def exc_key=(_arg0); end

  # source://ougai//lib/ougai/logger.rb#59
  def level=(severity); end

  # source://logger/1.5.3/logger.rb#649
  def super_add(severity, message = T.unsafe(nil), progname = T.unsafe(nil)); end

  protected

  # @private
  #
  # source://ougai//lib/ougai/logger.rb#95
  def append(severity, args); end

  # source://ougai//lib/ougai/logger.rb#100
  def create_formatter; end

  private

  # source://ougai//lib/ougai/logger.rb#174
  def as_hash(data); end

  # source://ougai//lib/ougai/logger.rb#132
  def create_item_with_1arg(arg); end

  # source://ougai//lib/ougai/logger.rb#146
  def create_item_with_2args(arg1, arg2); end

  # source://ougai//lib/ougai/logger.rb#162
  def create_item_with_3args(msg, ex, data); end

  # source://ougai//lib/ougai/logger.rb#106
  def format_severity(severity); end

  # source://ougai//lib/ougai/logger.rb#170
  def set_exc(item, exc); end

  # source://ougai//lib/ougai/logger.rb#118
  def to_item(args); end

  # source://ougai//lib/ougai/logger.rb#110
  def write(severity, args, fields, hooks); end

  class << self
    # Broadcasts the same logs to the another logger
    #
    # @param logger [Logger] The logger receiving broadcast logs.
    #
    # source://ougai//lib/ougai/logger.rb#40
    def broadcast(logger); end

    # source://ougai//lib/ougai/logger.rb#25
    def child_class; end

    # source://ougai//lib/ougai/logger.rb#29
    def child_class=(klass); end

    # @private
    #
    # source://ougai//lib/ougai/logger.rb#33
    def inherited(subclass); end
  end
end

# Common Logging features
#
# source://ougai//lib/ougai/logging.rb#5
module Ougai::Logging
  include ::Logger::Severity
  include ::Ougai::Logging::Severity

  # source://ougai//lib/ougai/logging.rb#100
  def _log(severity, *args); end

  # Log any one or more of a message, an exception and structured data as specified log level.
  # If the block is given for delay evaluation, it returns them as an array or the one of them as a value.
  #
  # @param severity [Integer] The log level.
  # @param message [String] The message to log. Use default_message if not specified.
  # @param ex [Exception] The exception or the error
  # @param data [Object] Any structured data
  # @return [Boolean] true
  # @yieldreturn [String|Exception|Object|Array] Any one or more of former parameters
  #
  # source://ougai//lib/ougai/logging.rb#94
  def add(severity, message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Sets the attribute before_log
  #
  # @param value the value to set the attribute before_log to.
  #
  # source://ougai//lib/ougai/logging.rb#7
  def before_log=(_arg0); end

  # @private
  # @raise [NotImplementedError]
  #
  # source://ougai//lib/ougai/logging.rb#107
  def chain(_severity, _args, _fields, _hooks); end

  # Log any one or more of a message, an exception and structured data as DEBUG.
  # If the block is given for delay evaluation, it returns them as an array or the one of them as a value.
  #
  # @param message [String] The message to log. Use default_message if not specified.
  # @param ex [Exception] The exception or the error
  # @param data [Object] Any structured data
  # @return [Boolean] true
  # @yieldreturn [String|Exception|Object|Array] Any one or more of former parameters
  #
  # source://ougai//lib/ougai/logging.rb#41
  def debug(message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Log any one or more of a message, an exception and structured data as ERROR.
  #
  # @return [Boolean] true
  # @see Logging#debug
  #
  # source://ougai//lib/ougai/logging.rb#62
  def error(message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Log any one or more of a message, an exception and structured data as FATAL.
  #
  # @return [Boolean] true
  # @see Logging#debug
  #
  # source://ougai//lib/ougai/logging.rb#69
  def fatal(message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Log any one or more of a message, an exception and structured data as INFO.
  #
  # @return [Boolean] true
  # @see Logging#debug
  #
  # source://ougai//lib/ougai/logging.rb#48
  def info(message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Log any one or more of a message, an exception and structured data as specified log level.
  # If the block is given for delay evaluation, it returns them as an array or the one of them as a value.
  #
  # @param severity [Integer] The log level.
  # @param message [String] The message to log. Use default_message if not specified.
  # @param ex [Exception] The exception or the error
  # @param data [Object] Any structured data
  # @return [Boolean] true
  # @yieldreturn [String|Exception|Object|Array] Any one or more of former parameters
  #
  # source://ougai//lib/ougai/logging.rb#94
  def log(severity, message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Log any one or more of a message, an exception and structured data as TRACE.
  #
  # @return [Boolean] true
  # @see Logging#debug
  #
  # source://ougai//lib/ougai/logging.rb#30
  def trace(message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Whether the current severity level allows for logging TRACE.
  #
  # @return [Boolean] true if allows
  #
  # source://ougai//lib/ougai/logging.rb#82
  def trace?; end

  # Log any one or more of a message, an exception and structured data as UNKNOWN.
  #
  # @return [Boolean] true
  # @see Logging#debug
  #
  # source://ougai//lib/ougai/logging.rb#76
  def unknown(message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Log any one or more of a message, an exception and structured data as WARN.
  #
  # @return [Boolean] true
  # @see Logging#debug
  #
  # source://ougai//lib/ougai/logging.rb#55
  def warn(message = T.unsafe(nil), ex = T.unsafe(nil), data = T.unsafe(nil), &block); end

  # Returns the value of attribute with_fields.
  #
  # source://ougai//lib/ougai/logging.rb#6
  def with_fields; end

  # Sets the attribute with_fields
  #
  # @param value the value to set the attribute with_fields to.
  #
  # source://ougai//lib/ougai/logging.rb#6
  def with_fields=(_arg0); end

  protected

  # @private
  # @raise [NotImplementedError]
  #
  # source://ougai//lib/ougai/logging.rb#114
  def append(severity, args); end

  # @private
  #
  # source://ougai//lib/ougai/logging.rb#119
  def weak_merge!(base_data, inferior_data); end
end

# source://ougai//lib/ougai/logging.rb#9
module Ougai::Logging::Severity
  include ::Logger::Severity

  # source://ougai//lib/ougai/logging.rb#19
  def from_label(severity); end

  # source://ougai//lib/ougai/logging.rb#15
  def to_label(severity); end
end

# source://ougai//lib/ougai/logging.rb#13
Ougai::Logging::Severity::SEV_LABEL = T.let(T.unsafe(nil), Array)

# source://ougai//lib/ougai/logging.rb#11
Ougai::Logging::Severity::TRACE = T.let(T.unsafe(nil), Integer)

# source://ougai//lib/ougai/serializer.rb#4
class Ougai::Serializer
  class << self
    # source://ougai//lib/ougai/serializer.rb#5
    def for_json; end
  end
end

# source://ougai//lib/ougai/version.rb#4
Ougai::VERSION = T.let(T.unsafe(nil), String)
