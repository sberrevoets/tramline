# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `composite_primary_keys` gem.
# Please instead update this file by running `bin/tapioca gem composite_primary_keys`.


# source://composite_primary_keys//lib/composite_primary_keys/active_model/attribute_assignment.rb#1
module ActiveModel
  class << self
    # source://activemodel/7.0.8.4/lib/active_model.rb#72
    def eager_load!; end

    # source://activemodel/7.0.8.4/lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel/7.0.8.4/lib/active_model/version.rb#7
    def version; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/active_model/attribute_assignment.rb#2
module ActiveModel::AttributeAssignment
  # source://composite_primary_keys//lib/composite_primary_keys/active_model/attribute_assignment.rb#3
  def _assign_attribute(k, v); end

  # source://activemodel/7.0.8.4/lib/active_model/attribute_assignment.rb#28
  def assign_attributes(new_attributes); end

  # source://activemodel/7.0.8.4/lib/active_model/attribute_assignment.rb#28
  def attributes=(new_attributes); end

  private

  # source://activemodel/7.0.8.4/lib/active_model/attribute_assignment.rb#40
  def _assign_attributes(attributes); end
end

# source://composite_primary_keys//lib/composite_primary_keys/attribute_methods.rb#1
module ActiveRecord
  class << self
    # source://activerecord/7.0.8.4/lib/active_record.rb#277
    def action_on_strict_loading_violation; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#277
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#270
    def application_record_class; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#270
    def application_record_class=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#213
    def async_query_executor; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#213
    def async_query_executor=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#183
    def default_timezone; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#187
    def default_timezone=(default_timezone); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#311
    def dump_schema_after_migration; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#311
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#321
    def dump_schemas; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#321
    def dump_schemas=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#365
    def eager_load!; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#296
    def error_on_ignored_order; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#296
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#236
    def global_executor_concurrency; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#228
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#216
    def global_thread_pool_async_query_executor; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#240
    def index_nested_attribute_errors; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#240
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#171
    def lazily_load_schema_cache; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#171
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#180
    def legacy_connection_handling; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#180
    def legacy_connection_handling=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#258
    def maintain_test_schema; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#258
    def maintain_test_schema=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#340
    def query_transformers; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#340
    def query_transformers=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#255
    def queues; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#255
    def queues=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#355
    def raise_int_wider_than_64bit; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#355
    def raise_int_wider_than_64bit=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#200
    def reading_role; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#200
    def reading_role=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#177
    def schema_cache_ignored_tables; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#177
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#288
    def schema_format; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#288
    def schema_format=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#328
    def suppress_multiple_database_warning; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#328
    def suppress_multiple_database_warning=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#302
    def timestamped_migrations; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#302
    def timestamped_migrations=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#347
    def use_yaml_unsafe_load; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#347
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#248
    def verbose_query_logs; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#248
    def verbose_query_logs=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#337
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#337
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#267
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#267
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#197
    def writing_role; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#197
    def writing_role=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record.rb#362
    def yaml_column_permitted_classes; end

    # source://activerecord/7.0.8.4/lib/active_record.rb#362
    def yaml_column_permitted_classes=(_arg0); end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/association.rb#2
module ActiveRecord::Associations
  mixes_in_class_methods ::ActiveRecord::Associations::ClassMethods

  # source://activerecord/7.0.8.4/lib/active_record/associations.rb#297
  def association(name); end

  # source://activerecord/7.0.8.4/lib/active_record/associations.rb#311
  def association_cached?(name); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations.rb#327
  def association_instance_get(name); end

  # source://activerecord/7.0.8.4/lib/active_record/associations.rb#332
  def association_instance_set(name, association); end

  # source://activerecord/7.0.8.4/lib/active_record/associations.rb#321
  def init_internals; end

  # source://activerecord/7.0.8.4/lib/active_record/associations.rb#315
  def initialize_dup(*_arg0); end

  class << self
    # source://activerecord/7.0.8.4/lib/active_record/associations.rb#290
    def eager_load!; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/association.rb#3
class ActiveRecord::Associations::Association
  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#40
  def initialize(owner, reflection); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#203
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#207
  def create!(attributes = T.unsafe(nil), &block); end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/association.rb#4
  def creation_attributes; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#36
  def disable_joins; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#152
  def extensions; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#193
  def initialize_attributes(record, except_from_scope_attributes = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#136
  def inversed_from(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#140
  def inversed_from_queries(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#148
  def klass; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#172
  def load_target; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#77
  def loaded!; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#72
  def loaded?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#182
  def marshal_dump; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#187
  def marshal_load(data); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#38
  def options(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#36
  def owner; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#36
  def reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#63
  def reload(force = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#130
  def remove_inverse_instance(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#51
  def reset; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#57
  def reset_negative_cache; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#110
  def reset_scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#98
  def scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#115
  def set_inverse_instance(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#122
  def set_inverse_instance_from_queries(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#88
  def stale_target?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#36
  def target; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#93
  def target=(target); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#254
  def association_scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#336
  def build_record(attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#351
  def enqueue_destroy_association(options); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#214
  def ensure_klass_exists!; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#218
  def find_target; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#274
  def find_target?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#324
  def foreign_key_for?(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#286
  def foreign_key_present?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#359
  def inversable?(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#304
  def inverse_association_for(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#313
  def inverse_reflection_for(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#319
  def invertible_for?(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#364
  def matches_foreign_key?(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#293
  def raise_on_type_mismatch!(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#270
  def scope_for_create; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#344
  def skip_statement_cache?(scope); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#333
  def stale_state; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#266
  def target_scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association.rb#242
  def violates_strict_loading?; end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/association_scope.rb#3
class ActiveRecord::Associations::AssociationScope
  include ::CompositePrimaryKeys::Predicates

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#15
  def initialize(value_transformation); end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/association_scope.rb#25
  def last_chain_scope(scope, reflection, owner); end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/association_scope.rb#47
  def next_chain_scope(scope, reflection, next_reflection); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#21
  def scope(association); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#117
  def add_constraints(scope, owner, chain); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#154
  def apply_scope(scope, table, key, value); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#162
  def eval_scope(reflection, scope, owner); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#105
  def get_chain(reflection, association, tracker); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#54
  def join(table, constraint); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#74
  def transform_value(value); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#52
  def value_transformation; end

  class << self
    # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#10
    def create(&block); end

    # source://composite_primary_keys//lib/composite_primary_keys/associations/association_scope.rb#4
    def get_bind_values(owner, chain); end

    # source://activerecord/7.0.8.4/lib/active_record/associations/association_scope.rb#6
    def scope(association); end
  end
end

class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  include ::CompositePrimaryKeys::CollectionAssociation

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#271
  def add_to_target(record, skip_callbacks: T.unsafe(nil), replace: T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#109
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#119
  def concat(*records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#178
  def delete(*records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#142
  def delete_all(dependent = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#187
  def destroy(*records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#164
  def destroy_all; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#224
  def empty?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#86
  def find(*args); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#298
  def find_from_target?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#49
  def ids_reader; end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/collection_association.rb#3
  def ids_writer(ids); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#250
  def include?(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#262
  def load_target; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#294
  def null_scope?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#32
  def reader; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#234
  def replace(other_array); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#79
  def reset; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#288
  def scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#201
  def size; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#275
  def target=(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#44
  def writer(records); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#340
  def _create_record(attributes, raise = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#478
  def callback(method, record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#484
  def callbacks_for(callback_name); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#424
  def concat_records(records, raise = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#371
  def delete_or_destroy(records, method); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#400
  def delete_records(records, method); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#507
  def find_by_scan(*args); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#493
  def include_in_memory?(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#363
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#321
  def merge_target_lists(persisted, memory); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#385
  def remove_records(existing_records, records, method); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#416
  def replace_common_records_in_memory(new_target, original_target); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#443
  def replace_on_target(record, skip_callbacks, replace:, inversing: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#404
  def replace_records(new_target, original_target); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/collection_association.rb#307
  def transaction(&block); end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/foreign_association.rb#4
module ActiveRecord::Associations::ForeignAssociation
  # @return [Boolean]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/associations/foreign_association.rb#5
  def foreign_key_present?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/foreign_association.rb#13
  def nullified_owner_attributes; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations/foreign_association.rb#22
  def set_owner_attributes(record); end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/has_many_association.rb#3
class ActiveRecord::Associations::HasManyAssociation < ::ActiveRecord::Associations::CollectionAssociation
  include ::CompositePrimaryKeys::Predicates

  # source://composite_primary_keys//lib/composite_primary_keys/associations/has_many_association.rb#19
  def delete_count(method, scope); end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/has_many_association.rb#4
  def delete_records(records, method); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#13
  def handle_dependency; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#56
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#136
  def _create_record(attributes, *_arg1); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#132
  def concat_records(records, *_arg1); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#75
  def count_records; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#115
  def delete_or_nullify_all_records(method); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#151
  def difference(a, b); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#155
  def intersection(a, b); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#93
  def update_counter(difference, reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#144
  def update_counter_if_success(saved_successfully, difference); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_association.rb#99
  def update_counter_in_memory(difference, reflection = T.unsafe(nil)); end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/has_many_through_association.rb#3
class ActiveRecord::Associations::HasManyThroughAssociation < ::ActiveRecord::Associations::HasManyAssociation
  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#9
  def initialize(owner, reflection); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#14
  def concat(*records); end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/has_many_through_association.rb#29
  def construct_join_attributes(*records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#24
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/has_many_through_association.rb#4
  def through_records_for(record); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#86
  def build_record(attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#56
  def build_through_record(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#37
  def concat_records(records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#126
  def delete_or_nullify_all_records(method); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#130
  def delete_records(records, method); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#199
  def delete_through_records(records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#167
  def difference(a, b); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#183
  def distribution(array); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#215
  def find_target; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#173
  def intersection(a, b); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#222
  def invertible_for?(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#179
  def mark_occurrence(distribution, record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/through_association.rb#53
  def original_construct_join_attributes(*records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#106
  def remove_records(existing_records, records, method); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#77
  def save_through_record(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#111
  def target_reflection_has_associated_record?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#68
  def through_scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#70
  def through_scope_attributes; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/has_many_through_association.rb#115
  def update_through_counter?(method); end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/join_association.rb#3
class ActiveRecord::Associations::JoinDependency
  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#71
  def initialize(base, table, associations, join_type); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#153
  def apply_column_aliases(relation); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#77
  def base_klass; end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/join_association.rb#92
  def construct(ar_parent, parent, row, seen, model_cache, strict_loading_value); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#158
  def each(&block); end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/join_association.rb#37
  def instantiate(result_set, strict_loading_value, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#85
  def join_constraints(joins_to_add, alias_tracker, references); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#81
  def reflections; end

  protected

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#163
  def join_root; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#163
  def join_type; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#166
  def alias_tracker; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#168
  def aliases; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#228
  def build(associations, base_klass); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#278
  def construct_model(record, node, row, model_cache, id, strict_loading_value); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#223
  def find_reflection(klass, name); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#166
  def join_root_alias; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#190
  def make_constraints(parent, child, join_type); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#184
  def make_join_constraints(join_root, join_type); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#214
  def walk(left, right, join_type); end

  class << self
    # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#47
    def make_tree(associations); end

    # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#53
    def walk_tree(associations, hash); end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/join_association.rb#23
class ActiveRecord::Associations::JoinDependency::Aliases
  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#14
  def initialize(tables); end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/join_association.rb#24
  def column_alias(node, column); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#30
  def column_aliases(node); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency.rb#26
  def columns; end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/join_association.rb#5
class ActiveRecord::Associations::JoinDependency::JoinAssociation < ::ActiveRecord::Associations::JoinDependency::JoinPart
  include ::CompositePrimaryKeys::Predicates

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#13
  def initialize(reflection, children); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#24
  def join_constraints(foreign_table, foreign_klass, join_type, alias_tracker); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#19
  def match?(other); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#78
  def readonly?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#10
  def reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#84
  def strict_loading?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#11
  def table; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#11
  def table=(_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/join_dependency/join_association.rb#10
  def tables; end

  private

  # source://composite_primary_keys//lib/composite_primary_keys/associations/join_association.rb#7
  def append_constraints(join, constraints); end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/preloader/association.rb#3
class ActiveRecord::Associations::Preloader
  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#96
  def initialize(records:, associations:, scope: T.unsafe(nil), available_records: T.unsafe(nil), associate_by_default: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#54
  def associate_by_default; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#54
  def associations; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#123
  def branches; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#117
  def call; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#113
  def empty?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#127
  def loaders; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#54
  def records; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader.rb#54
  def scope; end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/preloader/association.rb#4
class ActiveRecord::Associations::Preloader::Association
  include ::CompositePrimaryKeys::Predicates

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#87
  def initialize(klass, owners, reflection, preload_scope, reflection_scope, associate_by_default); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#202
  def associate_records_from_unscoped(unscoped_records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#144
  def association_key_name; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#102
  def future_classes; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#85
  def klass; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#180
  def load_records(raw_records = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#159
  def loaded?(owner); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#148
  def loader_query; end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/preloader/association.rb#35
  def owners_by_key; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#137
  def preloaded_records; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#131
  def records_by_owner; end

  # TODO: is records_for needed anymore? Rails' implementation has changed significantly
  #
  # source://composite_primary_keys//lib/composite_primary_keys/associations/preloader/association.rb#19
  def records_for(ids); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#118
  def run; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#114
  def run?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#110
  def runnable_loaders; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#167
  def scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#171
  def set_inverse(record); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#98
  def table_name; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#163
  def target_for(owner); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#229
  def associate_records_to_owner(owner, records); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#257
  def association_key_type; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#269
  def build_scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#285
  def cascade_strict_loading(scope); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#249
  def convert_key(key); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#241
  def key_conversion_required?; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#222
  def model; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#225
  def owner_key_name; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#261
  def owner_key_type; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#222
  def owners; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#222
  def preload_scope; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#222
  def reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#265
  def reflection_scope; end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/preloader/association.rb#6
class ActiveRecord::Associations::Preloader::Association::LoaderQuery
  include ::CompositePrimaryKeys::Predicates

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#10
  def initialize(scope, association_key_name); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#8
  def association_key_name; end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#15
  def eql?(other); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#21
  def hash; end

  # source://composite_primary_keys//lib/composite_primary_keys/associations/preloader/association.rb#7
  def load_records_for_keys(keys, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#29
  def load_records_in_batch(loaders); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#25
  def records_for(loaders); end

  # source://activerecord/7.0.8.4/lib/active_record/associations/preloader/association.rb#8
  def scope; end
end

# source://composite_primary_keys//lib/composite_primary_keys/attribute_methods.rb#2
module ActiveRecord::AttributeMethods
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Dirty::ClassMethods
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Serialization::ClassMethods

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#329
  def [](attr_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#342
  def []=(attr_name, value); end

  # @return [Boolean]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods.rb#15
  def _has_attribute?(attr_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#374
  def accessed_fields; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#283
  def attribute_for_inspect(attr_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#252
  def attribute_names; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#305
  def attribute_present?(attr_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#264
  def attributes; end

  # @return [Boolean]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods.rb#3
  def has_attribute?(attr_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#207
  def respond_to?(name, include_private = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#379
  def attribute_method?(attr_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#399
  def attributes_for_create(attribute_names); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#389
  def attributes_for_update(attribute_names); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#384
  def attributes_with_values(attribute_names); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#407
  def format_for_inspect(name, value); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#423
  def pk_attribute?(name); end

  class << self
    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods.rb#31
    def dangerous_attribute_methods; end
  end

  module GeneratedClassMethods
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts=(value); end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates=(value); end
    def partial_updates?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(value); end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(value); end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types=(value); end
    def time_zone_aware_types?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
    def partial_inserts; end
    def partial_inserts?; end
    def partial_updates; end
    def partial_updates?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes?; end
    def time_zone_aware_types; end
    def time_zone_aware_types?; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/primary_key.rb#3
module ActiveRecord::AttributeMethods::PrimaryKey
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#18
  def id; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#23
  def id=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#28
  def id?; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#33
  def id_before_type_cast; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#47
  def id_for_database; end

  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/primary_key.rb#30
  def id_in_database; end

  # Returns the primary key previous value.
  #
  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/primary_key.rb#18
  def id_was; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#12
  def to_key; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#52
  def attribute_method?(attr_name); end
end

# source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/primary_key.rb#4
module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#63
  def dangerous_attribute_method?(method_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#89
  def get_primary_key(base_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#59
  def instance_method_already_implemented?(method_name); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#70
  def primary_key; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#119
  def primary_key=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#77
  def quoted_primary_key; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#81
  def reset_primary_key; end

  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/primary_key.rb#5
  def suppress_composite_primary_key(pk); end
end

# source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/read.rb#3
module ActiveRecord::AttributeMethods::Read
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods

  # :nodoc
  #
  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/read.rb#20
  def _read_attribute(attr_name, &block); end

  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/read.rb#4
  def read_attribute(attr_name, &block); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/read.rb#37
  def attribute(attr_name, &block); end
end

# source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/write.rb#3
module ActiveRecord::AttributeMethods::Write
  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods

  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/write.rb#20
  def _write_attribute(attr_name, value); end

  # source://composite_primary_keys//lib/composite_primary_keys/attribute_methods/write.rb#4
  def write_attribute(attr_name, value); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/write.rb#41
  def attribute=(attr_name, value); end
end

# source://composite_primary_keys//lib/composite_primary_keys/autosave_association.rb#2
module ActiveRecord::AutosaveAssociation
  mixes_in_class_methods ::ActiveRecord::AutosaveAssociation::ClassMethods

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#271
  def changed_for_autosave?; end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#265
  def destroyed_by_association; end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#258
  def destroyed_by_association=(reflection); end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#245
  def mark_for_destruction; end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#252
  def marked_for_destruction?; end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#234
  def reload(options = T.unsafe(nil)); end

  # source://composite_primary_keys//lib/composite_primary_keys/autosave_association.rb#33
  def save_belongs_to_association(reflection); end

  # source://composite_primary_keys//lib/composite_primary_keys/autosave_association.rb#3
  def save_has_one_association(reflection); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#508
  def _ensure_no_duplicate_errors; end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#464
  def _record_changed?(reflection, record, key); end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#366
  def around_save_collection_association; end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#279
  def associated_records_to_validate_or_save(association, new_record, autosave); end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#470
  def association_foreign_key_changed?(reflection, record, key); end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#330
  def association_valid?(reflection, record, index = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#504
  def custom_validation_context?; end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#292
  def nested_records_changed_for_autosave?; end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#356
  def normalize_reflection_attribute(indexed_attribute, reflection, index, attribute); end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#383
  def save_collection_association(reflection); end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#319
  def validate_collection_association(reflection); end

  # source://activerecord/7.0.8.4/lib/active_record/autosave_association.rb#310
  def validate_single_association(reflection); end
end

# source://composite_primary_keys//lib/composite_primary_keys/base.rb#5
class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::CompositePrimaryKeys::Predicates

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _before_commit_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _commit_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _create_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _destroy_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _find_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _initialize_callbacks; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _rollback_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_create_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_find_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_save_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_update_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _save_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _touch_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _update_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _validate_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _validation_callbacks; end

  # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activestorage/7.0.8.4/lib/active_storage/reflection.rb#53
  def attachment_reflections; end

  # source://activestorage/7.0.8.4/lib/active_storage/reflection.rb#53
  def attachment_reflections?; end

  # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#72
  def attribute_aliases; end

  # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#72
  def attribute_aliases?; end

  # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#73
  def attribute_method_matchers; end

  # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#73
  def attribute_method_matchers?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord/7.0.8.4/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/7.0.8.4/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/7.0.8.4/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/7.0.8.4/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/7.0.8.4/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/7.0.8.4/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#171
  def column_for_attribute(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#44
  def composite?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#74
  def default_connection_handler; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#74
  def default_connection_handler?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#76
  def default_role; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#76
  def default_role?; end

  # source://activerecord/7.0.8.4/lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord/7.0.8.4/lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#78
  def default_shard; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#78
  def default_shard?; end

  # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
  def defined_enums; end

  # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
  def defined_enums?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#26
  def destroy_association_async_job; end

  # source://activerecord/7.0.8.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord/7.0.8.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.0.8.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.0.8.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/7.0.8.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/7.0.8.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#20
  def logger; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#20
  def logger?; end

  # source://activemodel/7.0.8.4/lib/active_model/naming.rb#244
  def model_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts?; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates?; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names?; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type?; end

  # source://activerecord/7.0.8.4/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/7.0.8.4/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/7.0.8.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/7.0.8.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#67
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#67
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#42
  def store_full_class_name; end

  # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#42
  def store_full_class_name?; end

  # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class; end

  # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class?; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#152
  def table_name_prefix; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#152
  def table_name_prefix?; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#153
  def table_name_suffix; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#153
  def table_name_suffix?; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#66
  def time_zone_aware_attributes; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#66
  def time_zone_aware_attributes?; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#68
  def time_zone_aware_types; end

  # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#68
  def time_zone_aware_types?; end

  # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#171
  def type_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activemodel/7.0.8.4/lib/active_model/validations.rb#48
  def validation_context; end

  private

  # source://activemodel/7.0.8.4/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activerecord/7.0.8.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly; end

    # source://activerecord/7.0.8.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly?; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _before_commit_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _commit_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _commit_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _create_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _create_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _destroy_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _destroy_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _find_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _find_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _initialize_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _initialize_callbacks=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _rollback_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _rollback_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _save_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _save_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _touch_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _touch_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _update_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _update_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _validate_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _validate_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _validation_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _validation_callbacks=(value); end

    # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/7.0.8.4/lib/active_model/validations.rb#52
    def _validators?; end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#82
    def application_record_class?; end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#129
    def asynchronous_queries_session; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#133
    def asynchronous_queries_tracker; end

    # source://activestorage/7.0.8.4/lib/active_storage/reflection.rb#53
    def attachment_reflections; end

    # source://activestorage/7.0.8.4/lib/active_storage/reflection.rb#53
    def attachment_reflections=(value); end

    # source://activestorage/7.0.8.4/lib/active_storage/reflection.rb#53
    def attachment_reflections?; end

    # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#72
    def attribute_aliases; end

    # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#72
    def attribute_aliases=(value); end

    # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#72
    def attribute_aliases?; end

    # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers; end

    # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers=(value); end

    # source://activemodel/7.0.8.4/lib/active_model/attribute_methods.rb#73
    def attribute_method_matchers?; end

    # source://activerecord/7.0.8.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/7.0.8.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.0.8.4/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default?; end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # @return [Boolean]
    #
    # source://composite_primary_keys//lib/composite_primary_keys/base.rb#39
    def composite?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#56
    def configurations; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#50
    def configurations=(config); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#201
    def connected_to_stack; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#215
    def connection_class; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#211
    def connection_class=(b); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#219
    def connection_class?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#223
    def connection_class_for_self; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#94
    def connection_handler; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#98
    def connection_handler=(handler); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#102
    def connection_handlers; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#111
    def connection_handlers=(handlers); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#188
    def current_preventing_writes; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#147
    def current_role; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#169
    def current_shard; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#74
    def default_connection_handler; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#74
    def default_connection_handler=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#74
    def default_connection_handler?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#76
    def default_role; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#76
    def default_role=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#76
    def default_role?; end

    # source://activerecord/7.0.8.4/lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord/7.0.8.4/lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord/7.0.8.4/lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#78
    def default_shard; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#78
    def default_shard=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#78
    def default_shard?; end

    # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
    def defined_enums=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/enum.rb#116
    def defined_enums?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#26
    def destroy_association_async_job; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#26
    def destroy_association_async_job=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord/7.0.8.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#72
    def has_many_inversing; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#72
    def has_many_inversing=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#72
    def has_many_inversing?; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default?; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#157
    def implicit_order_column; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#157
    def implicit_order_column=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#157
    def implicit_order_column?; end

    # source://activemodel/7.0.8.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.0.8.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.0.8.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#160
    def inheritance_column; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#311
    def inheritance_column=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#160
    def inheritance_column?; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name?; end

    # source://activerecord/7.0.8.4/lib/active_record/store.rb#99
    def local_stored_attributes; end

    # source://activerecord/7.0.8.4/lib/active_record/store.rb#99
    def local_stored_attributes=(_arg0); end

    # source://activerecord/7.0.8.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/7.0.8.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#20
    def logger; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#20
    def logger=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#20
    def logger?; end

    # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts?; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates?; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names?; end

    # source://composite_primary_keys//lib/composite_primary_keys/base.rb#11
    def primary_key=(keys); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type?; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/primary_key.rb#119
    def primary_key_without_composite_key_support=(value); end

    # source://composite_primary_keys//lib/composite_primary_keys/base.rb#11
    def primary_keys=(keys); end

    # source://activerecord/7.0.8.4/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.0.8.4/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name?; end

    # source://composite_primary_keys//lib/composite_primary_keys/base.rb#26
    def set_primary_keys(*keys); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#80
    def shard_selector; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#80
    def shard_selector=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#80
    def shard_selector?; end

    # source://activerecord/7.0.8.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/7.0.8.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#67
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#42
    def store_full_class_name; end

    # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#42
    def store_full_class_name=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#42
    def store_full_class_name?; end

    # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class; end

    # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#70
    def strict_loading_by_default; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#70
    def strict_loading_by_default=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#70
    def strict_loading_by_default?; end

    # source://activerecord/7.0.8.4/lib/active_record/core.rb#238
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#152
    def table_name_prefix; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#152
    def table_name_prefix=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#152
    def table_name_prefix?; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#153
    def table_name_suffix; end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#153
    def table_name_suffix=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#153
    def table_name_suffix?; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def time_zone_aware_attributes; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def time_zone_aware_attributes=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#66
    def time_zone_aware_attributes?; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#68
    def time_zone_aware_types; end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#68
    def time_zone_aware_types=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/attribute_methods/time_zone_conversion.rb#68
    def time_zone_aware_types?; end

    private

    # source://activerecord/7.0.8.4/lib/active_record/model_schema.rb#160
    def _inheritance_column=(value); end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/base.rb#48
module ActiveRecord::Base::CompositeClassMethods
  # @return [Boolean]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#72
  def composite?; end

  # ids_to_s([[1,2],[7,3]]) -> "(1,2),(7,3)"
  # ids_to_s([[1,2],[7,3]], ',', ';') -> "1,2;7,3"
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#78
  def ids_to_s(many_ids, id_sep = T.unsafe(nil), list_sep = T.unsafe(nil), left_bracket = T.unsafe(nil), right_bracket = T.unsafe(nil)); end

  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#64
  def primary_key; end

  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#68
  def primary_key=(keys); end

  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#49
  def primary_keys; end

  # Don't like this method name, but its modeled after how AR does it
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#55
  def reset_primary_keys; end
end

# source://composite_primary_keys//lib/composite_primary_keys/base.rb#83
module ActiveRecord::Base::CompositeInstanceMethods
  # @return [Boolean]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#126
  def can_change_primary_key_values?; end

  # A model instance's primary keys is always available as model.ids
  # whether you name it the default 'id' or set it to something else.
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#86
  def id; end

  # Sets the primary ID.
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#117
  def id=(ids); end

  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#110
  def id_before_type_cast; end

  # A model instance's primary keys is always available as model.ids
  # whether you name it the default 'id' or set it to something else.
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#86
  def ids; end

  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#103
  def ids_hash; end

  # This is overridden purely for json serialization support. If the model is composite
  # and one of the keys is id, then we don't want to call the id method, instead we want
  # to get the id attribute value
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#95
  def read_attribute_for_serialization(attribute); end

  # Returns this record's primary keys values in an Array
  # if any value is available
  #
  # source://composite_primary_keys//lib/composite_primary_keys/base.rb#132
  def to_key; end
end

# source://composite_primary_keys//lib/composite_primary_keys/base.rb#6
ActiveRecord::Base::INVALID_FOR_COMPOSITE_KEYS = T.let(T.unsafe(nil), String)

# source://composite_primary_keys//lib/composite_primary_keys/base.rb#7
ActiveRecord::Base::NOT_IMPLEMENTED_YET = T.let(T.unsafe(nil), String)

# source://composite_primary_keys//lib/composite_primary_keys/base.rb#2
class ActiveRecord::CompositeKeyError < ::StandardError; end

# source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/abstract/database_statements.rb#2
module ActiveRecord::ConnectionAdapters; end

# source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/abstract_adapter.rb#3
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::Migration::JoinTable

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#74
  def initialize(connection, logger = T.unsafe(nil), config = T.unsafe(nil)); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _checkin_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#940
  def _checkout_callbacks; end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_checkin_callbacks(&block); end

  # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#928
  def _run_checkout_callbacks(&block); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#515
  def active?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#284
  def adapter_name; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#470
  def advisory_locks_enabled?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#506
  def all_foreign_keys_valid?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#453
  def async_enabled?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#634
  def build_insert_sql(insert); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#605
  def case_insensitive_comparison(attribute, value); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#601
  def case_sensitive_comparison(attribute, value); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#110
  def check_if_write_query(sql); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#649
  def check_version; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#566
  def clear_cache!; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#621
  def close; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#215
  def connection_class; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def create(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#467
  def create_enum(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#645
  def database_version; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#625
  def default_index_type?(index); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#597
  def default_uniqueness_comparison(attribute, value); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def delete(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#459
  def disable_extension(name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#501
  def disable_referential_integrity; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#539
  def discard!; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#528
  def disconnect!; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#463
  def enable_extension(name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def exec_insert_all(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#241
  def expire; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#489
  def extensions; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#478
  def get_advisory_lock(lock_id); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#642
  def get_database_version; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def in_use?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#494
  def index_algorithms; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def insert(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#200
  def lease; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def lock; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def logger; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#145
  def migration_context; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#141
  def migrations_paths; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def owner; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#41
  def pool; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#41
  def pool=(_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#316
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#167
  def prepared_statements; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#167
  def prepared_statements?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#172
  def prepared_statements_disabled_cache; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#133
  def preventing_writes?; end

  # source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/abstract_adapter.rb#4
  def quote_column_names(name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#592
  def raw_connection; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#521
  def reconnect!; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#485
  def release_advisory_lock(lock_id); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#116
  def replica?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#571
  def requires_reloading?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#555
  def reset!; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#221
  def role; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def rollback_db_transaction(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def rollback_to_savepoint(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#231
  def schema_cache; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#235
  def schema_cache=(cache); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#149
  def schema_migration; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#656
  def schema_version; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#270
  def seconds_idle; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#227
  def shard; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#257
  def steal!; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#309
  def supports_advisory_locks?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#299
  def supports_bulk_alter?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#376
  def supports_check_constraints?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#401
  def supports_comments?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#406
  def supports_comments_in_create?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#425
  def supports_common_table_expressions?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#449
  def supports_concurrent_connections?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#391
  def supports_datetime_with_precision?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#295
  def supports_ddl_transactions?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#371
  def supports_deferrable_constraints?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#340
  def supports_explain?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#335
  def supports_expression_index?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#350
  def supports_extensions?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#361
  def supports_foreign_keys?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#416
  def supports_foreign_tables?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#325
  def supports_index_sort_order?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#356
  def supports_indexes_in_create?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#445
  def supports_insert_conflict_target?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#437
  def supports_insert_on_duplicate_skip?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#441
  def supports_insert_on_duplicate_update?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#433
  def supports_insert_returning?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#396
  def supports_json?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#429
  def supports_lazy_transactions?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#386
  def supports_materialized_views?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#421
  def supports_optimizer_hints?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#330
  def supports_partial_index?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#320
  def supports_partitioned_indexes?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#304
  def supports_savepoints?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#345
  def supports_transaction_isolation?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#366
  def supports_validate_constraints?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#381
  def supports_views?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#411
  def supports_virtual_columns?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#560
  def throw_away!; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def truncate(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def truncate_tables(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#275
  def unprepared_statement; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/query_cache.rb#20
  def update(*_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#120
  def use_metadata_table?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#195
  def valid_type?(type); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#578
  def verify!; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#42
  def visitor; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#100
  def with_instrumenter(instrumenter, &block); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#804
  def arel_visitor; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#815
  def build_result(columns:, rows:, column_types: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#808
  def build_statement_pool; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#615
  def can_perform_case_insensitive_comparison_for?(column); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#790
  def collector; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#779
  def column_for(table_name, column_name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#785
  def column_for_attribute(attribute); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#742
  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), type_casted_binds = T.unsafe(nil), statement_name = T.unsafe(nil), async: T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#758
  def transform_query(sql); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#765
  def translate_exception(exception, message:, sql:, binds:); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#732
  def translate_exception_class(e, sql, binds); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#728
  def type_map; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#775
  def without_prepared_statement?(binds); end

  class << self
    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _checkin_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _checkin_callbacks=(value); end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#932
    def _checkout_callbacks; end

    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#936
    def _checkout_callbacks=(value); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#68
    def build_read_query_regexp(*parts); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#289
    def database_exists?(config); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#57
    def type_cast_config_to_boolean(config); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#47
    def type_cast_config_to_integer(config); end

    private

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#720
    def extract_limit(sql_type); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#716
    def extract_precision(sql_type); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#709
    def extract_scale(sql_type); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#662
    def initialize_type_map(m); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#695
    def register_class_with_limit(mapping, key, klass); end

    # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract_adapter.rb#702
    def register_class_with_precision(mapping, key, klass); end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/abstract/database_statements.rb#3
module ActiveRecord::ConnectionAdapters::DatabaseStatements
  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#6
  def initialize; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#345
  def add_transaction_record(record, ensure_finalize = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#350
  def begin_db_transaction; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#364
  def begin_isolated_db_transaction(isolation); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def begin_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#49
  def cacheable_query(klass, arel); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#369
  def commit_db_transaction; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def commit_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#165
  def create(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def current_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#383
  def default_sequence_name(table, column); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#179
  def delete(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def disable_lazy_transactions!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#415
  def empty_insert_statement_value(primary_key = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def enable_lazy_transactions!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#138
  def exec_delete(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#130
  def exec_insert(sql, name = T.unsafe(nil), binds = T.unsafe(nil), pk = T.unsafe(nil), sequence_name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#149
  def exec_insert_all(sql, name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#123
  def exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#377
  def exec_rollback_db_transaction; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#145
  def exec_update(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#116
  def execute(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#153
  def explain(arel, binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#453
  def high_precision_current_timestamp; end

  # source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/abstract/database_statements.rb#4
  def insert(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#397
  def insert_fixture(fixture, table_name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#401
  def insert_fixtures_set(fixture_set, tables_to_delete = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#328
  def mark_transaction_written_if_write(sql); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def materialize_transactions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def open_transactions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#102
  def query(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#94
  def query_value(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#98
  def query_values(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#388
  def reset_sequence!(table, column, sequence = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#339
  def reset_transaction; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#373
  def rollback_db_transaction; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#379
  def rollback_to_savepoint(name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def rollback_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#425
  def sanitize_limit(limit); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#62
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#73
  def select_one(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#90
  def select_rows(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#78
  def select_value(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#84
  def select_values(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#12
  def to_sql(arel_or_sql_string, binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#309
  def transaction(requires_new: T.unsafe(nil), isolation: T.unsafe(nil), joinable: T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#352
  def transaction_isolation_levels; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#322
  def transaction_manager; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#335
  def transaction_open?; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#185
  def truncate(table_name, name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#189
  def truncate_tables(*table_names); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#173
  def update(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#436
  def with_yaml_fallback(value); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#324
  def within_new_transaction(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#107
  def write_query?(sql); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#576
  def arel_from_relation(relation); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#471
  def build_fixture_sql(fixtures, table_name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#513
  def build_fixture_statements(fixture_set); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#520
  def build_truncate_statement(table_name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#524
  def build_truncate_statements(table_names); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#534
  def combine_multi_statements(total_sql); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#467
  def default_insert_value(column); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#458
  def execute_batch(statements, name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#567
  def last_inserted_id(result); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#539
  def select(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#571
  def single_value_from_rows(rows); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#563
  def sql_for_insert(sql, pk, binds); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#17
  def to_sql_and_binds(arel_or_sql_string, binds = T.unsafe(nil), preparable = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/abstract/database_statements.rb#530
  def with_multi_statements; end
end

# source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/postgresql/database_statements.rb#3
module ActiveRecord::ConnectionAdapters::PostgreSQL; end

# source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/postgresql/database_statements.rb#4
module ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#105
  def begin_db_transaction; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#109
  def begin_isolated_db_transaction(isolation); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#115
  def commit_db_transaction; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#66
  def exec_delete(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#86
  def exec_insert(sql, name = T.unsafe(nil), binds = T.unsafe(nil), pk = T.unsafe(nil), sequence_name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#53
  def exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil), async: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#120
  def exec_rollback_db_transaction; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#66
  def exec_update(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#39
  def execute(sql, name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#7
  def explain(arel, binds = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#128
  def high_precision_current_timestamp; end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#13
  def query(sql, name = T.unsafe(nil)); end

  # source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/postgresql/database_statements.rb#5
  def sql_for_insert(sql, pk, binds); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#29
  def write_query?(sql); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#137
  def build_truncate_statements(table_names); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#133
  def execute_batch(statements, name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#142
  def last_insert_id_result(sequence_name); end

  # source://activerecord/7.0.8.4/lib/active_record/connection_adapters/postgresql/database_statements.rb#146
  def suppress_composite_primary_key(pk); end
end

# source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/sqlserver/database_statements.rb#3
module ActiveRecord::ConnectionAdapters::SQLServer; end

# source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/sqlserver/database_statements.rb#4
module ActiveRecord::ConnectionAdapters::SQLServer::DatabaseStatements
  # source://composite_primary_keys//lib/composite_primary_keys/connection_adapters/sqlserver/database_statements.rb#5
  def sql_for_insert(sql, pk, binds); end
end

# source://composite_primary_keys//lib/composite_primary_keys/core.rb#2
module ActiveRecord::Core
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Core::ClassMethods

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#461
  def initialize(attributes = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#614
  def <=>(other_object); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#580
  def ==(comparison_object); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#626
  def blank?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#682
  def connection_handler; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#565
  def encode_with(coder); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#580
  def eql?(comparison_object); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#603
  def freeze; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#609
  def frozen?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#590
  def hash; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#488
  def init_with(coder, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#498
  def init_with_attributes(attributes, new_record = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#687
  def inspect; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#622
  def present?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#705
  def pretty_print(pp); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#678
  def readonly!; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#631
  def readonly?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#729
  def slice(*methods); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#661
  def strict_loading!(value = T.unsafe(nil), mode: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#636
  def strict_loading?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#670
  def strict_loading_mode; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#673
  def strict_loading_n_plus_one_only?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#734
  def values_at(*methods); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#771
  def custom_inspect_method_defined?; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#751
  def init_internals; end

  # source://composite_primary_keys//lib/composite_primary_keys/core.rb#3
  def initialize_dup(other); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#768
  def initialize_internals_callback; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#782
  def inspection_filter; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#747
  def to_ary; end

  module GeneratedClassMethods
    def belongs_to_required_by_default; end
    def belongs_to_required_by_default=(value); end
    def belongs_to_required_by_default?; end
    def default_connection_handler; end
    def default_connection_handler=(value); end
    def default_connection_handler?; end
    def default_role; end
    def default_role=(value); end
    def default_role?; end
    def default_shard; end
    def default_shard=(value); end
    def default_shard?; end
    def destroy_association_async_job; end
    def destroy_association_async_job=(value); end
    def enumerate_columns_in_select_statements; end
    def enumerate_columns_in_select_statements=(value); end
    def enumerate_columns_in_select_statements?; end
    def has_many_inversing; end
    def has_many_inversing=(value); end
    def has_many_inversing?; end
    def logger; end
    def logger=(value); end
    def logger?; end
    def shard_selector; end
    def shard_selector=(value); end
    def shard_selector?; end
    def strict_loading_by_default; end
    def strict_loading_by_default=(value); end
    def strict_loading_by_default?; end
  end

  module GeneratedInstanceMethods
    def default_connection_handler; end
    def default_connection_handler?; end
    def default_role; end
    def default_role?; end
    def default_shard; end
    def default_shard?; end
    def destroy_association_async_job; end
    def logger; end
    def logger?; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/core.rb#19
module ActiveRecord::Core::ClassMethods
  # source://activerecord/7.0.8.4/lib/active_record/core.rb#415
  def ===(object); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def action_on_strict_loading_violation; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def action_on_strict_loading_violation=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def application_record_class; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def application_record_class=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#420
  def arel_table; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#432
  def cached_find_by_statement(key, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def default_timezone; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def default_timezone=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def dump_schema_after_migration; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def dump_schema_after_migration=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def dump_schemas; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def dump_schemas=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def error_on_ignored_order; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def error_on_ignored_order=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#373
  def filter_attributes; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#382
  def filter_attributes=(filter_attributes); end

  # source://composite_primary_keys//lib/composite_primary_keys/core.rb#20
  def find(*ids); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#287
  def find_by(*args); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#329
  def find_by!(*args); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#362
  def generated_association_methods; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def index_nested_attribute_errors; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def index_nested_attribute_errors=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#255
  def inherited(child_class); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#251
  def initialize_find_by_cache; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#358
  def initialize_generated_modules; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#399
  def inspect; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#387
  def inspection_filter; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def legacy_connection_handling; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def legacy_connection_handling=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def maintain_test_schema; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def maintain_test_schema=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#424
  def predicate_builder; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def queues; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def queues=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def reading_role; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def reading_role=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def schema_format; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def schema_format=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def suppress_multiple_database_warning; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def suppress_multiple_database_warning=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def timestamped_migrations; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def timestamped_migrations=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#428
  def type_caster; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def verbose_query_logs; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def verbose_query_logs=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def warn_on_records_fetched_greater_than; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def warn_on_records_fetched_greater_than=(value); end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#340
  def writing_role; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#348
  def writing_role=(value); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#438
  def relation; end

  # source://activerecord/7.0.8.4/lib/active_record/core.rb#448
  def table_metadata; end
end

# source://composite_primary_keys//lib/composite_primary_keys/counter_cache.rb#2
module ActiveRecord::CounterCache
  mixes_in_class_methods ::ActiveRecord::CounterCache::ClassMethods

  private

  # source://activerecord/7.0.8.4/lib/active_record/counter_cache.rb#165
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/counter_cache.rb#175
  def destroy_row; end

  # source://activerecord/7.0.8.4/lib/active_record/counter_cache.rb#190
  def each_counter_cached_associations; end
end

# source://composite_primary_keys//lib/composite_primary_keys/counter_cache.rb#3
module ActiveRecord::CounterCache::ClassMethods
  # source://activerecord/7.0.8.4/lib/active_record/counter_cache.rb#159
  def decrement_counter(counter_name, id, touch: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/counter_cache.rb#134
  def increment_counter(counter_name, id, touch: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/counter_cache.rb#29
  def reset_counters(id, *counters, touch: T.unsafe(nil)); end

  # source://composite_primary_keys//lib/composite_primary_keys/counter_cache.rb#4
  def update_counters(id, counters); end
end

# source://composite_primary_keys//lib/composite_primary_keys/fixtures.rb#2
class ActiveRecord::Fixture
  # source://activerecord/7.0.8.4/lib/active_record/fixtures.rb#750
  def initialize(fixture, model_class); end

  # source://activerecord/7.0.8.4/lib/active_record/fixtures.rb#763
  def [](key); end

  # source://activerecord/7.0.8.4/lib/active_record/fixtures.rb#755
  def class_name; end

  # source://activerecord/7.0.8.4/lib/active_record/fixtures.rb#759
  def each(&block); end

  # @raise [FixtureClassNotFound]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/fixtures.rb#3
  def find; end

  # source://activerecord/7.0.8.4/lib/active_record/fixtures.rb#748
  def fixture; end

  # source://composite_primary_keys//lib/composite_primary_keys/fixtures.rb#13
  def ids(key); end

  # source://activerecord/7.0.8.4/lib/active_record/fixtures.rb#748
  def model_class; end

  # source://activerecord/7.0.8.4/lib/active_record/fixtures.rb#748
  def to_hash; end
end

# source://composite_primary_keys//lib/composite_primary_keys/nested_attributes.rb#2
module ActiveRecord::NestedAttributes
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::NestedAttributes::ClassMethods

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#383
  def _destroy; end

  # source://composite_primary_keys//lib/composite_primary_keys/nested_attributes.rb#11
  def assign_nested_attributes_for_collection_association(association_name, attributes_collection); end

  # source://composite_primary_keys//lib/composite_primary_keys/nested_attributes.rb#3
  def cpk_detect_record(id, records); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#588
  def allow_destroy?(association_name); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#405
  def assign_nested_attributes_for_one_to_one_association(association_name, attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#550
  def assign_to_or_mark_for_destruction(record, attributes, allow_destroy); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#572
  def call_reject_if(association_name, attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#530
  def check_record_limit!(limit, attributes_collection); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#556
  def has_destroy_flag?(hash); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#592
  def raise_nested_attributes_record_not_found!(association_name, record_id); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#563
  def reject_new_record?(association_name, attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/nested_attributes.rb#584
  def will_be_destroyed?(association_name, attributes); end

  module GeneratedClassMethods
    def nested_attributes_options; end
    def nested_attributes_options=(value); end
    def nested_attributes_options?; end
  end

  module GeneratedInstanceMethods
    def nested_attributes_options; end
    def nested_attributes_options?; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/persistence.rb#2
module ActiveRecord::Persistence
  mixes_in_class_methods ::ActiveRecord::Persistence::ClassMethods

  # @yield [_self]
  # @yieldparam _self [ActiveRecord::Persistence] the object that the method was called on
  #
  # source://composite_primary_keys//lib/composite_primary_keys/persistence.rb#74
  def _create_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#713
  def becomes(klass); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#733
  def becomes!(klass); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#858
  def decrement(attribute, by = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#868
  def decrement!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#663
  def delete; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#677
  def destroy; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#697
  def destroy!; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#579
  def destroyed?; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#835
  def increment(attribute, by = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#847
  def increment!(attribute, by = T.unsafe(nil), touch: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#562
  def new_record?; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#585
  def persisted?; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#569
  def previously_new_record?; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#574
  def previously_persisted?; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#945
  def reload(options = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#614
  def save(**options, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#647
  def save!(**options, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#884
  def toggle(attribute); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#893
  def toggle!(attribute); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#995
  def touch(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#766
  def update(attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#777
  def update!(attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#755
  def update_attribute(name, value); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#787
  def update_column(name, value); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#807
  def update_columns(attributes); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1045
  def _delete_row; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1020
  def _find_record(options); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1033
  def _query_constraints_hash; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1124
  def _raise_readonly_record_error; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1116
  def _raise_record_not_destroyed; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1128
  def _raise_record_not_touched_error; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1049
  def _touch_row(attribute_names, time); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1075
  def _update_record(attribute_names = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1059
  def _update_row(attribute_names, attempted_action = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1028
  def apply_scoping?(options); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1137
  def belongs_to_touch_method; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1066
  def create_or_update(**_arg0, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1038
  def destroy_associations; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1041
  def destroy_row; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1014
  def strict_loaded_associations; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#1112
  def verify_readonly_attribute(name); end
end

# source://composite_primary_keys//lib/composite_primary_keys/persistence.rb#3
module ActiveRecord::Persistence::ClassMethods
  # source://composite_primary_keys//lib/composite_primary_keys/persistence.rb#49
  def _delete_record(constraints); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#477
  def _insert_record(values); end

  # source://composite_primary_keys//lib/composite_primary_keys/persistence.rb#24
  def _update_record(values, constraints); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#33
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#50
  def create!(attributes = T.unsafe(nil), &block); end

  # source://composite_primary_keys//lib/composite_primary_keys/persistence.rb#4
  def delete(id_or_array); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#447
  def destroy(id); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#66
  def insert(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#155
  def insert!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#145
  def insert_all(attributes, returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#212
  def insert_all!(attributes, returning: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#346
  def instantiate(attributes, column_types = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#378
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#404
  def update!(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#222
  def upsert(attributes, on_duplicate: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#332
  def upsert_all(attributes, on_duplicate: T.unsafe(nil), update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#552
  def build_default_constraint; end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#545
  def discriminate_class_for_record(record); end

  # source://activerecord/7.0.8.4/lib/active_record/persistence.rb#535
  def instantiate_instance_of(klass, attributes, column_types = T.unsafe(nil), &block); end
end

# source://composite_primary_keys//lib/composite_primary_keys/relation/predicate_builder/association_query_value.rb#2
class ActiveRecord::PredicateBuilder
  extend ::CompositePrimaryKeys::Predicates

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#12
  def initialize(table); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#53
  def [](attr_name, value, operator = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#57
  def build(attribute, value, operator = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#67
  def build_bind_attribute(column_name, value); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#23
  def build_from_hash(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#49
  def register_handler(klass, handler); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#71
  def resolve_arel_attribute(table_name, column_name, &block); end

  protected

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#76
  def expand_from_hash(attributes, &block); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#144
  def convert_dot_notation_to_hash(attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#134
  def grouping_queries(queries); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#160
  def handler_for(object); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#132
  def table; end

  class << self
    # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder.rb#28
    def references(attributes); end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/relation/predicate_builder/association_query_value.rb#3
class ActiveRecord::PredicateBuilder::AssociationQueryValue
  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#6
  def initialize(associated_table, value); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/predicate_builder/association_query_value.rb#19
  def ids; end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/predicate_builder/association_query_value.rb#4
  def queries; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#16
  def associated_table; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#52
  def convert_to_id(value); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#48
  def polymorphic_clause?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#40
  def polymorphic_name; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#32
  def primary_key; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#36
  def primary_type; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#44
  def select_clause?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/predicate_builder/association_query_value.rb#16
  def value; end
end

# source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#2
module ActiveRecord::Reflection
  extend ::ActiveStorage::Reflection::ReflectionExtension
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveRecord::Reflection::ClassMethods

  class << self
    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#28
    def add_aggregate_reflection(ar, name, reflection); end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#22
    def add_reflection(ar, name, reflection); end

    # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#17
    def create(macro, name, scope, options, ar); end

    private

    # source://activestorage/7.0.8.4/lib/active_storage/reflection.rb#37
    def reflection_class_for(macro); end
  end

  module GeneratedClassMethods
    def _reflections; end
    def _reflections=(value); end
    def _reflections?; end
    def aggregate_reflections; end
    def aggregate_reflections=(value); end
    def aggregate_reflections?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing=(value); end
    def automatic_scope_inversing?; end
  end

  module GeneratedInstanceMethods
    def _reflections; end
    def _reflections?; end
    def aggregate_reflections; end
    def aggregate_reflections?; end
    def automatic_scope_inversing; end
    def automatic_scope_inversing?; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#3
class ActiveRecord::Reflection::AbstractReflection
  include ::CompositePrimaryKeys::Predicates

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#280
  def alias_candidate(name); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#157
  def build_association(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#288
  def build_scope(table, predicate_builder = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#284
  def chain; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#233
  def check_validity_of_inverse!; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#165
  def class_name; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#211
  def constraints; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#215
  def counter_cache_column; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#276
  def counter_must_be_updated_by_has_many?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#270
  def has_cached_counter?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#227
  def inverse_of; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#254
  def inverse_updates_counter_cache?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#262
  def inverse_updates_counter_in_memory?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#254
  def inverse_which_updates_counter_cache; end

  # source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#4
  def join_scope(table, foreign_table, foreign_klass); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#198
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#206
  def klass_join_scope(table, predicate_builder); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#171
  def scopes; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#296
  def strict_loading?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#300
  def strict_loading_violation_message(owner); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#151
  def table_name; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#147
  def through_reflection?; end

  protected

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#307
  def actual_source_reflection; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#320
  def ensure_option_not_given_as_class!(option_name); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#312
  def predicate_builder(table); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#316
  def primary_key(klass); end
end

# source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#29
class ActiveRecord::Reflection::AssociationReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#448
  def initialize(name, scope, options, active_record); end

  # source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#42
  def active_record_primary_key; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#603
  def add_as_polymorphic_through(reflection, seed); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#599
  def add_as_source(seed); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#607
  def add_as_through(seed); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#589
  def association_class; end

  # source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#36
  def association_foreign_key; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#476
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#456
  def association_scope_cache(klass, owner, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#584
  def belongs_to?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#500
  def check_eager_loadable!; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#496
  def check_validity!; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#532
  def clear_association_scope_cache; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#526
  def collect_join_chain; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#566
  def collection?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#421
  def compute_class(name); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#611
  def extensions; end

  # source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#30
  def foreign_key; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#445
  def foreign_type; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#544
  def has_inverse?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#587
  def has_one?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#540
  def has_scope?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#492
  def join_foreign_key; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#512
  def join_id_for(owner); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#484
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#488
  def join_primary_type; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#464
  def join_table; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#561
  def macro; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#536
  def nested?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#446
  def parent_reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#446
  def parent_reflection=(_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#591
  def polymorphic?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#548
  def polymorphic_inverse_of(associated_class); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#595
  def polymorphic_name; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#520
  def source_reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#516
  def through_reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#445
  def type; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#579
  def validate?; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#628
  def automatic_inverse_of; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#664
  def can_find_inverse_of_automatically?(reflection, inverse_reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#685
  def derive_class_name; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#691
  def derive_foreign_key; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#701
  def derive_join_table; end

  # source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#53
  def extract_keys(keys); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#619
  def inverse_name; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#677
  def scope_allows_automatic_inverse_of?(reflection, inverse_reflection); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#650
  def valid_inverse_reflection?(reflection); end
end

# source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#65
class ActiveRecord::Reflection::BelongsToReflection < ::ActiveRecord::Reflection::AssociationReflection
  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#739
  def association_class; end

  # source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#66
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#737
  def belongs_to?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#760
  def join_foreign_key; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#764
  def join_foreign_type; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#756
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#735
  def macro; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#769
  def can_find_inverse_of_automatically?(*_arg0); end
end

# source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#77
class ActiveRecord::Reflection::ThroughReflection < ::ActiveRecord::Reflection::AbstractReflection
  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#788
  def initialize(delegate_reflection); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def active_record(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#785
  def active_record_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1000
  def add_as_polymorphic_through(reflection, seed); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#996
  def add_as_source(seed); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1004
  def add_as_through(seed); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def association_class(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#785
  def association_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://composite_primary_keys//lib/composite_primary_keys/reflection.rb#78
  def association_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def association_scope_cache(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def autosave=(arg); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def belongs_to?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def check_eager_loadable!(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#950
  def check_validity!; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#864
  def clear_association_scope_cache; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#858
  def collect_join_chain; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def collection?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def compute_class(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#990
  def constraints; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def extensions(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#785
  def foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#785
  def foreign_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def has_inverse?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def has_one?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#878
  def has_scope?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#785
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#785
  def join_id_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#902
  def join_primary_key(klass = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def join_primary_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#874
  def join_scopes(table, predicate_builder, klass = T.unsafe(nil), record = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def join_table(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#800
  def klass; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def macro(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#885
  def nested?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def options(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def parent_reflection(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def parent_reflection=(arg); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def plural_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def polymorphic?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def polymorphic_inverse_of(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def polymorphic_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def scope(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def scope_for(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#870
  def scopes; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#942
  def source_options; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#821
  def source_reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#921
  def source_reflection_name; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#917
  def source_reflection_names; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#946
  def through_options; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#837
  def through_reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#796
  def through_reflection?; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#785
  def type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1035
  def validate?(*_arg0, **_arg1, &_arg2); end

  protected

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1009
  def actual_source_reflection; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1016
  def collect_join_reflections(seed); end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1014
  def delegate_reflection; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1027
  def derive_class_name; end

  # source://activerecord/7.0.8.4/lib/active_record/reflection.rb#1025
  def inverse_name; end
end

# source://composite_primary_keys//lib/composite_primary_keys/relation.rb#2
class ActiveRecord::Relation
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::CompositePrimaryKeys::Predicates

  # @return [Relation] a new instance of Relation
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#4
  def initialize(klass, table: T.unsafe(nil), predicate_builder: T.unsafe(nil), values: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#766
  def ==(other); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#432
  def _exec_scope(*_arg0, **_arg1, &_arg2); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#15
  def add_cpk_support; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#811
  def alias_tracker(joins = T.unsafe(nil), aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#284
  def any?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#43
  def bind_attribute(name, value); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#782
  def blank?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#66
  def build(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#320
  def cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#399
  def cache_key_with_version; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#347
  def cache_version(timestamp_column = T.unsafe(nil)); end

  # CPK. This is an alternative to IN subqueries. It is used by sqlserver.
  # Example query:
  #
  # UPDATE reference_codes
  # SET ...
  # WHERE EXISTS
  #  (SELECT 1
  #  FROM reference_codes cpk_child
  #  WHERE reference_codes.reference_type_id = cpk_child.reference_type_id AND
  #        reference_codes.reference_code = cpk_child.reference_code)
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#145
  def cpk_exists_subquery(stmt); end

  # Used by postgresql, sqlite, mariadb and oracle. Example query:
  #
  # UPDATE reference_codes
  # SET ...
  # WHERE (reference_codes.reference_type_id, reference_codes.reference_code) IN
  #      (SELECT reference_codes.reference_type_id, reference_codes.reference_code
  #       FROM reference_codes)
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#121
  def cpk_in_subquery(stmt); end

  # CPK. This is the old way CPK created subqueries and is used by MySql.
  # MySQL does not support referencing the same table that is being UPDATEd or
  # DELETEd in a subquery so we obfuscate it. The ugly query looks like this:
  #
  # UPDATE `reference_codes`
  # SET ...
  # WHERE (reference_codes.reference_type_id, reference_codes.reference_code) IN
  #  (SELECT reference_type_id,reference_code
  #   FROM (SELECT DISTINCT `reference_codes`.`reference_type_id`, `reference_codes`.`reference_code`
  #         FROM `reference_codes`) __active_record_temp)
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#180
  def cpk_mysql_subquery(stmt); end

  # CPK
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#96
  def cpk_subquery(stmt); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#95
  def create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#110
  def create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#209
  def create_or_find_by(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#218
  def create_or_find_by!(attributes, &block); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#58
  def delete_all; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#642
  def delete_by(*args); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#579
  def destroy_all; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#629
  def destroy_by(*args); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#751
  def eager_loading?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#269
  def empty?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#803
  def empty_scope?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#255
  def encode_with(coder); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#239
  def explain; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#168
  def find_or_create_by(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#175
  def find_or_create_by!(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#226
  def find_or_initialize_by(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#119
  def first_or_create(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#123
  def first_or_create!(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#127
  def first_or_initialize(attributes = T.unsafe(nil), &block); end

  # source://groupdate/6.2.0/lib/groupdate/relation.rb#8
  def groupdate_values; end

  # source://groupdate/6.2.0/lib/groupdate/relation.rb#8
  def groupdate_values=(_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#807
  def has_limit_or_offset?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#794
  def inspect; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#761
  def joined_includes_values; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#21
  def klass; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#693
  def load(&block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#664
  def load_async; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#21
  def loaded; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#21
  def loaded?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/query_methods.rb#147
  def locked?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#297
  def many?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#21
  def model; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#66
  def new(attributes = T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#278
  def none?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#290
  def one?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#21
  def predicate_builder; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#825
  def preload_associations(records); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#777
  def pretty_print(q); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#249
  def records; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#703
  def reload; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#708
  def reset; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#683
  def scheduled?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#744
  def scope_for_create; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#421
  def scoping(all_queries: T.unsafe(nil), &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#260
  def size; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#22
  def skip_preloading_value; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#22
  def skip_preloading_value=(_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#21
  def table; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#244
  def to_a; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#244
  def to_ary; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#724
  def to_sql; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#559
  def touch_all(*names, time: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#488
  def update(id = T.unsafe(nil), attributes); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#496
  def update!(id = T.unsafe(nil), attributes); end

  # @raise [ArgumentError]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#19
  def update_all(updates); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#516
  def update_counters(counters); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#786
  def values; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#790
  def values_for_queries; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#740
  def where_values_hash(relation_table_name = T.unsafe(nil)); end

  protected

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#835
  def load_records(records); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#840
  def null_relation?; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#865
  def _create(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#869
  def _create!(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#900
  def _increment_attribute(attribute, value = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#861
  def _new(attributes, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#873
  def _scoping(scope, registry, all_queries = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#889
  def _substitute_values(values); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#845
  def already_in_scope?(registry); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#325
  def compute_cache_key(timestamp_column = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#354
  def compute_cache_version(timestamp_column); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#853
  def current_scope_restoring_block(&block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#927
  def exec_main_query(async: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#907
  def exec_queries(&block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#849
  def global_scope?(registry); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation.rb#10
  def initialize_copy(other); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#38
  def initialize_copy_without_cpk(other); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#27
  def initialize_without_cpk(klass, table: T.unsafe(nil), predicate_builder: T.unsafe(nil), values: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#947
  def instantiate_records(rows, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#990
  def limited_count; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#966
  def references_eager_loaded_tables?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#958
  def skip_query_cache_if_necessary(&block); end

  # source://activerecord/7.0.8.4/lib/active_record/relation.rb#983
  def tables_in_string(string); end
end

# source://composite_primary_keys//lib/composite_primary_keys/relation/where_clause.rb#3
class ActiveRecord::Relation::WhereClause
  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#10
  def initialize(predicates); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#14
  def +(other); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#18
  def -(other); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#75
  def ==(other); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#8
  def any?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#70
  def ast; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#99
  def contradiction?; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#8
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#75
  def eql?(other); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#36
  def except(*columns); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#110
  def extract_attributes; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#81
  def hash; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#85
  def invert; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#26
  def merge(other, rewhere = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#40
  def or(other); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/where_clause.rb#4
  def to_h(table_name = T.unsafe(nil), equality_only: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#22
  def |(other); end

  protected

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#117
  def predicates; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#119
  def referenced_columns; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#126
  def each_attributes; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#145
  def equalities(predicates, equality_only); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#171
  def equality_node?(node); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#186
  def except_predicates(columns); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#136
  def extract_attribute(node); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#221
  def extract_node_value(node); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#175
  def invert_predicate(node); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#210
  def non_empty_predicates; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#159
  def predicates_unreferenced_by(other); end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#199
  def predicates_with_wrapped_sql_literals; end

  # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#214
  def wrap_sql_literal(node); end

  class << self
    # source://activerecord/7.0.8.4/lib/active_record/relation/where_clause.rb#95
    def empty; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/sanitization.rb#2
module ActiveRecord::Sanitization
  mixes_in_class_methods ::ActiveRecord::Sanitization::ClassMethods
end

# source://composite_primary_keys//lib/composite_primary_keys/sanitization.rb#3
module ActiveRecord::Sanitization::ClassMethods
  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#138
  def disallow_raw_sql!(args, permit: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#22
  def sanitize_sql(condition); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#125
  def sanitize_sql_array(ary); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#46
  def sanitize_sql_for_assignment(assignments, default_table_name = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#22
  def sanitize_sql_for_conditions(condition); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#62
  def sanitize_sql_for_order(condition); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#85
  def sanitize_sql_hash_for_assignment(attrs, table); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#109
  def sanitize_sql_like(string, escape_character = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#187
  def quote_bound_value(value, c = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#201
  def raise_if_bind_arity_mismatch(statement, expected, provided); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#167
  def replace_bind_variable(value, c = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#158
  def replace_bind_variables(statement, values); end

  # source://activerecord/7.0.8.4/lib/active_record/sanitization.rb#175
  def replace_named_bind_variables(statement, bind_vars); end
end

# source://composite_primary_keys//lib/composite_primary_keys/table_metadata.rb#4
class ActiveRecord::TableMetadata
  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#7
  def initialize(klass, arel_table, reflection = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#65
  def aggregated_with?(aggregation_name); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#80
  def arel_table; end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#29
  def associated_table(table_name); end

  # @return [Boolean]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/table_metadata.rb#5
  def associated_with?(table_name); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#21
  def has_column?(column_name); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#5
  def join_foreign_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#5
  def join_foreign_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#5
  def join_primary_key(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#5
  def join_primary_type(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#53
  def polymorphic_association?; end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#57
  def polymorphic_name_association; end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#70
  def predicate_builder; end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#13
  def primary_key; end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#65
  def reflect_on_aggregation(aggregation_name); end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#61
  def through_association?; end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#17
  def type(column_name); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#83
  def klass; end

  # source://activerecord/7.0.8.4/lib/active_record/table_metadata.rb#83
  def reflection; end
end

# source://composite_primary_keys//lib/composite_primary_keys/transactions.rb#2
module ActiveRecord::Transactions
  mixes_in_class_methods ::ActiveRecord::Transactions::ClassMethods

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#309
  def before_committed!; end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#317
  def committed!(should_run_callbacks: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#293
  def destroy; end

  # Restore the new record state and id of a record that was previously saved by a call to save_record_state.
  #
  # source://composite_primary_keys//lib/composite_primary_keys/transactions.rb#4
  def restore_transaction_record_state(force_restore_state = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#329
  def rolledback!(force_restore_state: T.unsafe(nil), should_run_callbacks: T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#297
  def save(**_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#301
  def save!(**_arg0); end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#305
  def touch(*_arg0, **_arg1); end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#289
  def transaction(**options, &block); end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#360
  def trigger_transactional_callbacks?; end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#345
  def with_transaction_returning_status; end

  private

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#366
  def _committed_already_called; end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#366
  def _trigger_destroy_callback; end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#366
  def _trigger_update_callback; end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#433
  def add_to_transaction(ensure_finalize = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#389
  def clear_transaction_record_state; end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#437
  def has_transactional_callbacks?; end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#369
  def remember_transaction_record_state; end

  # source://activerecord/7.0.8.4/lib/active_record/transactions.rb#418
  def transaction_include_any_action?(actions); end
end

# source://composite_primary_keys//lib/composite_primary_keys/validations/uniqueness.rb#2
module ActiveRecord::Validations
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveRecord::Validations::ClassMethods

  # source://activerecord/7.0.8.4/lib/active_record/validations.rb#46
  def save(**options); end

  # source://activerecord/7.0.8.4/lib/active_record/validations.rb#52
  def save!(**options); end

  # source://activerecord/7.0.8.4/lib/active_record/validations.rb#66
  def valid?(context = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/validations.rb#66
  def validate(context = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/validations.rb#75
  def default_validation_context; end

  # source://activerecord/7.0.8.4/lib/active_record/validations.rb#83
  def perform_validations(options = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/active_record/validations.rb#79
  def raise_validation_error; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/validations/uniqueness.rb#3
class ActiveRecord::Validations::UniquenessValidator < ::ActiveModel::EachValidator
  # source://activerecord/7.0.8.4/lib/active_record/validations/uniqueness.rb#6
  def initialize(options); end

  # source://composite_primary_keys//lib/composite_primary_keys/validations/uniqueness.rb#4
  def validate_each(record, attribute, value); end

  private

  # source://activerecord/7.0.8.4/lib/active_record/validations/uniqueness.rb#67
  def build_relation(klass, attribute, value); end

  # source://activerecord/7.0.8.4/lib/active_record/validations/uniqueness.rb#57
  def find_finder_class_for(record); end

  # source://activerecord/7.0.8.4/lib/active_record/validations/uniqueness.rb#98
  def map_enum_attribute(klass, attribute, value); end

  # source://activerecord/7.0.8.4/lib/active_record/validations/uniqueness.rb#85
  def scope_relation(record, relation); end
end

# source://composite_primary_keys//lib/composite_primary_keys/arel/to_sql.rb#1
module Arel
  class << self
    # source://activerecord/7.0.8.4/lib/arel.rb#46
    def arel_node?(value); end

    # source://activerecord/7.0.8.4/lib/arel.rb#50
    def fetch_attribute(value, &block); end

    # source://activerecord/7.0.8.4/lib/arel.rb#38
    def sql(raw_sql); end

    # source://activerecord/7.0.8.4/lib/arel.rb#42
    def star; end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/arel/to_sql.rb#2
module Arel::Visitors; end

# source://composite_primary_keys//lib/composite_primary_keys/arel/sqlserver.rb#3
class Arel::Visitors::SQLServer < ::Arel::Visitors::ToSql
  # source://composite_primary_keys//lib/composite_primary_keys/arel/sqlserver.rb#4
  def make_Fetch_Possible_And_Deterministic(o); end

  # source://composite_primary_keys//lib/composite_primary_keys/arel/sqlserver.rb#17
  def primary_Key_From_Table(t); end
end

# source://composite_primary_keys//lib/composite_primary_keys/arel/to_sql.rb#3
class Arel::Visitors::ToSql < ::Arel::Visitors::Visitor
  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#12
  def initialize(connection); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#17
  def compile(node, collector = T.unsafe(nil)); end

  # source://composite_primary_keys//lib/composite_primary_keys/arel/to_sql.rb#4
  def visit_CompositePrimaryKeys_CompositeKeys(o, collector); end

  private

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#906
  def aggregate(name, o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#740
  def bind_block; end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#869
  def build_subselect(key, o); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#933
  def collect_ctes(children, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#176
  def collect_nodes_for(nodes, collector, spacer, connector = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#814
  def collect_optimizer_hints(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#844
  def has_group_by_and_having?(o); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#836
  def has_join_sources?(o); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#840
  def has_limit_or_offset_or_orders?(o); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#883
  def infix_value(o, collector, value); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#889
  def infix_value_with_paren(o, collector, value, suppress_parens = T.unsafe(nil)); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#824
  def inject_join(list, collector, join_str); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#920
  def is_distinct_from(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#818
  def maybe_visit(thing, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#851
  def prepare_delete_statement(o); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#851
  def prepare_update_statement(o); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#794
  def quote(value); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#804
  def quote_column_name(name); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#799
  def quote_table_name(name); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#809
  def sanitize_as_sql_comment(value); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#832
  def unboundable?(value); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def unsupported(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#742
  def visit_ActiveModel_Attribute(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_ActiveSupport_Multibyte_Chars(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_ActiveSupport_StringInquirer(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#732
  def visit_Arel_Attributes_Attribute(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#611
  def visit_Arel_Nodes_And(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#693
  def visit_Arel_Nodes_As(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#361
  def visit_Arel_Nodes_Ascending(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#630
  def visit_Arel_Nodes_Assignment(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#418
  def visit_Arel_Nodes_Avg(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#428
  def visit_Arel_Nodes_Between(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#183
  def visit_Arel_Nodes_Bin(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#746
  def visit_Arel_Nodes_BindParam(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#699
  def visit_Arel_Nodes_Case(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#84
  def visit_Arel_Nodes_Casted(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#172
  def visit_Arel_Nodes_Comment(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#402
  def visit_Arel_Nodes_Count(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#293
  def visit_Arel_Nodes_CurrentRow(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#22
  def visit_Arel_Nodes_DeleteStatement(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#365
  def visit_Arel_Nodes_Descending(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#187
  def visit_Arel_Nodes_Distinct(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#191
  def visit_Arel_Nodes_DistinctOn(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#494
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#723
  def visit_Arel_Nodes_Else(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#643
  def visit_Arel_Nodes_Equality(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#218
  def visit_Arel_Nodes_Except(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#73
  def visit_Arel_Nodes_Exists(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#397
  def visit_Arel_Nodes_Extract(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#93
  def visit_Arel_Nodes_False(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#248
  def visit_Arel_Nodes_Filter(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#283
  def visit_Arel_Nodes_Following(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#529
  def visit_Arel_Nodes_FullOuterJoin(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#446
  def visit_Arel_Nodes_GreaterThan(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#434
  def visit_Arel_Nodes_GreaterThanOrEqual(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#380
  def visit_Arel_Nodes_Group(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#324
  def visit_Arel_Nodes_Grouping(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#333
  def visit_Arel_Nodes_HomogeneousIn(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#579
  def visit_Arel_Nodes_In(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#778
  def visit_Arel_Nodes_InfixOperation(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#550
  def visit_Arel_Nodes_InnerJoin(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#51
  def visit_Arel_Nodes_InsertStatement(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#213
  def visit_Arel_Nodes_Intersect(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#668
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#658
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#506
  def visit_Arel_Nodes_JoinSource(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#470
  def visit_Arel_Nodes_LessThan(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#458
  def visit_Arel_Nodes_LessThanOrEqual(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#315
  def visit_Arel_Nodes_Limit(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#320
  def visit_Arel_Nodes_Lock(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#482
  def visit_Arel_Nodes_Matches(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#410
  def visit_Arel_Nodes_Max(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#414
  def visit_Arel_Nodes_Min(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#384
  def visit_Arel_Nodes_NamedFunction(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#223
  def visit_Arel_Nodes_NamedWindow(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#566
  def visit_Arel_Nodes_Not(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#678
  def visit_Arel_Nodes_NotEqual(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#595
  def visit_Arel_Nodes_NotIn(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#521
  def visit_Arel_Nodes_NotRegexp(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#370
  def visit_Arel_Nodes_NullsFirst(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#375
  def visit_Arel_Nodes_NullsLast(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#310
  def visit_Arel_Nodes_Offset(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#561
  def visit_Arel_Nodes_On(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#167
  def visit_Arel_Nodes_OptimizerHints(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#615
  def visit_Arel_Nodes_Or(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#536
  def visit_Arel_Nodes_OuterJoin(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#297
  def visit_Arel_Nodes_Over(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#273
  def visit_Arel_Nodes_Preceding(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#84
  def visit_Arel_Nodes_Quoted(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#264
  def visit_Arel_Nodes_Range(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#517
  def visit_Arel_Nodes_Regexp(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#543
  def visit_Arel_Nodes_RightOuterJoin(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#255
  def visit_Arel_Nodes_Rows(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#146
  def visit_Arel_Nodes_SelectCore(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#140
  def visit_Arel_Nodes_SelectOptions(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#117
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#750
  def visit_Arel_Nodes_SqlLiteral(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#525
  def visit_Arel_Nodes_StringJoin(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#406
  def visit_Arel_Nodes_Sum(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#422
  def visit_Arel_Nodes_TableAlias(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#89
  def visit_Arel_Nodes_True(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#784
  def visit_Arel_Nodes_UnaryOperation(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#205
  def visit_Arel_Nodes_Union(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#209
  def visit_Arel_Nodes_UnionAll(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#728
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#39
  def visit_Arel_Nodes_UpdateStatement(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#97
  def visit_Arel_Nodes_ValuesList(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#716
  def visit_Arel_Nodes_When(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#229
  def visit_Arel_Nodes_Window(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#195
  def visit_Arel_Nodes_With(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#200
  def visit_Arel_Nodes_WithRecursive(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#356
  def visit_Arel_SelectManager(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#571
  def visit_Arel_Table(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#789
  def visit_Array(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_BigDecimal(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_Class(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_Date(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_DateTime(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_FalseClass(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_Float(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_Hash(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#755
  def visit_Integer(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_NilClass(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#789
  def visit_Set(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_String(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_Symbol(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_Time(o, collector); end

  # source://activerecord/7.0.8.4/lib/arel/visitors/to_sql.rb#759
  def visit_TrueClass(o, collector); end
end

class Array
  include ::Enumerable
  include ::CompositePrimaryKeys::ArrayExtension
end

# source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#1
module CompositePrimaryKeys
  class << self
    # Convert mixed representation of CPKs (by strings or arrays) to normalized
    # representation (just by arrays).
    #
    # `ids` is Array that may contain:
    # 1. A CPK represented by an array or a string.
    # 2. An array of CPKs represented by arrays or strings.
    #
    # There is an issue. Let `ids` contain an array with serveral strings. We can't distinguish case 1
    # from case 2 there in general. E.g. the item can be an array containing appropriate number of strings,
    # and each string can contain appropriate number of commas. We consider case 2 to win there.
    #
    # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#22
    def normalize(ids, cpk_size); end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/relation/batches.rb#2
module CompositePrimaryKeys::ActiveRecord; end

# source://composite_primary_keys//lib/composite_primary_keys/relation/batches.rb#3
module CompositePrimaryKeys::ActiveRecord::Batches
  # source://composite_primary_keys//lib/composite_primary_keys/relation/batches.rb#4
  def in_batches(of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil), load: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil)); end

  private

  # source://composite_primary_keys//lib/composite_primary_keys/relation/batches.rb#106
  def batch_order(order); end

  # CPK Helper method to collect prefixes of an array:
  # prefixes([:a, :b, :c]) => [[:a], [:a, :b], [:a, :b, :c]]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation/batches.rb#102
  def prefixes(ary); end
end

# source://composite_primary_keys//lib/composite_primary_keys/relation/calculations.rb#3
module CompositePrimaryKeys::ActiveRecord::Calculations
  # source://composite_primary_keys//lib/composite_primary_keys/relation/calculations.rb#4
  def aggregate_column(column_name); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/calculations.rb#60
  def build_count_subquery(relation, column_name, distinct); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/calculations.rb#82
  def calculate(operation, column_name); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/calculations.rb#18
  def execute_simple_calculation(operation, column_name, distinct); end
end

# source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#3
module CompositePrimaryKeys::ActiveRecord::FinderMethods
  # source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#4
  def apply_join_dependency(eager_loading: T.unsafe(nil)); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#50
  def construct_relation_for_exists(conditions); end

  # def last(limit = nil)
  #   return find_last(limit) if loaded? || has_limit_or_offset?
  #
  #   result = limit(limit || 1)
  #   # CPK
  #   # result.order!(table[primary_key]) if order_values.empty? && primary_key
  #   if order_values.empty? && primary_key
  #     if composite?
  #       result.order!(primary_keys.map { |pk| table[pk].asc })
  #     elsif
  #       result.order!(table[primary_key])
  #     end
  #   end
  #
  #   result = result.reverse_order!
  #
  #   limit ? result.reverse : result.first
  # rescue ::ActiveRecord::IrreversibleOrderError
  #   ActiveSupport::Deprecation.warn(<<-WARNING.squish)
  #       Finding a last element by loading the relation when SQL ORDER
  #       can not be reversed is deprecated.
  #       Rails 5.1 will raise ActiveRecord::IrreversibleOrderError in this case.
  #       Please call `to_a.last` if you still want to load the relation.
  #   WARNING
  #   find_last(limit)
  # end
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#135
  def find_one(id); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#153
  def find_some(ids); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#192
  def find_some_ordered(ids); end

  # @raise [UnknownPrimaryKey]
  #
  # source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#81
  def find_with_ids(*ids); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#26
  def limited_ids_for(relation); end

  # source://composite_primary_keys//lib/composite_primary_keys/relation/finder_methods.rb#224
  def ordered_relation; end
end

# source://composite_primary_keys//lib/composite_primary_keys/relation/query_methods.rb#3
module CompositePrimaryKeys::ActiveRecord::QueryMethods
  # source://composite_primary_keys//lib/composite_primary_keys/relation/query_methods.rb#4
  def reverse_sql_order(order_query); end
end

# source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#6
module CompositePrimaryKeys::ArrayExtension
  # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#7
  def to_composite_keys; end
end

# source://composite_primary_keys//lib/composite_primary_keys/associations/collection_association.rb#2
module CompositePrimaryKeys::CollectionAssociation
  # source://composite_primary_keys//lib/composite_primary_keys/associations/collection_association.rb#3
  def ids_writer(ids); end
end

# source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#39
class CompositePrimaryKeys::CompositeKeys < ::Array
  # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#52
  def to_param; end

  # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#52
  def to_s; end

  class << self
    # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#41
    def parse(value); end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/composite_relation.rb#2
module CompositePrimaryKeys::CompositeRelation
  include ::CompositePrimaryKeys::ActiveRecord::Batches
  include ::CompositePrimaryKeys::ActiveRecord::Calculations
  include ::CompositePrimaryKeys::ActiveRecord::FinderMethods
  include ::CompositePrimaryKeys::ActiveRecord::QueryMethods

  # source://composite_primary_keys//lib/composite_primary_keys/composite_relation.rb#8
  def destroy(id_or_array); end
end

# source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#4
CompositePrimaryKeys::ESCAPE_CHAR = T.let(T.unsafe(nil), String)

# source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#2
CompositePrimaryKeys::ID_SEP = T.let(T.unsafe(nil), String)

# source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#3
CompositePrimaryKeys::ID_SET_SEP = T.let(T.unsafe(nil), String)

# source://composite_primary_keys//lib/composite_primary_keys/composite_predicates.rb#2
module CompositePrimaryKeys::Predicates
  extend ::CompositePrimaryKeys::Predicates

  # source://composite_primary_keys//lib/composite_primary_keys/composite_predicates.rb#7
  def cpk_and_predicate(predicates); end

  # source://composite_primary_keys//lib/composite_primary_keys/composite_predicates.rb#34
  def cpk_id_predicate(table, keys, values); end

  # source://composite_primary_keys//lib/composite_primary_keys/composite_predicates.rb#53
  def cpk_in_predicate(table, primary_keys, ids); end

  # source://composite_primary_keys//lib/composite_primary_keys/composite_predicates.rb#69
  def cpk_in_predicate_with_grouped_keys(table, primary_keys, ids); end

  # source://composite_primary_keys//lib/composite_primary_keys/composite_predicates.rb#61
  def cpk_in_predicate_with_non_grouped_keys(table, primary_keys, ids); end

  # source://composite_primary_keys//lib/composite_primary_keys/composite_predicates.rb#42
  def cpk_join_predicate(table1, key1, table2, key2); end

  # source://composite_primary_keys//lib/composite_primary_keys/composite_predicates.rb#15
  def cpk_or_predicate(predicates, group = T.unsafe(nil)); end
end

# source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#60
module CompositePrimaryKeys::Utils
  class << self
    # @return [Boolean]
    #
    # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#75
    def cpk_as_array?(value, pk_size); end

    # @return [Boolean]
    #
    # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#80
    def cpk_as_string?(value, pk_size); end

    # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#62
    def escape_string_key(key); end

    # source://composite_primary_keys//lib/composite_primary_keys/composite_arrays.rb#68
    def unescape_string_key(key); end
  end
end

# source://composite_primary_keys//lib/composite_primary_keys/version.rb#2
module CompositePrimaryKeys::VERSION; end

# source://composite_primary_keys//lib/composite_primary_keys/version.rb#3
CompositePrimaryKeys::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://composite_primary_keys//lib/composite_primary_keys/version.rb#4
CompositePrimaryKeys::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://composite_primary_keys//lib/composite_primary_keys/version.rb#6
CompositePrimaryKeys::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://composite_primary_keys//lib/composite_primary_keys/version.rb#5
CompositePrimaryKeys::VERSION::TINY = T.let(T.unsafe(nil), Integer)
