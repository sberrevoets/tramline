# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `stateoscope` gem.
# Please instead update this file by running `bin/tapioca gem stateoscope`.


# source://stateoscope//lib/stateoscope/core_ext/class.rb#1
class Class < ::Module
  # @return [Boolean]
  #
  # source://stateoscope//lib/stateoscope/core_ext/class.rb#2
  def inherits_from?(superclass_name); end
end

# source://stateoscope//lib/stateoscope/version.rb#1
module Stateoscope
  class << self
    # source://stateoscope//lib/stateoscope.rb#28
    def filename_for(adapter, output_format); end

    # source://stateoscope//lib/stateoscope.rb#13
    def visualize(klass, options = T.unsafe(nil)); end
  end
end

# source://stateoscope//lib/stateoscope/errors.rb#4
class Stateoscope::AbstractMethodError < ::Stateoscope::Error; end

# source://stateoscope//lib/stateoscope/adapter.rb#4
module Stateoscope::Adapter
  # source://stateoscope//lib/stateoscope/adapter.rb#5
  def registry; end

  # source://stateoscope//lib/stateoscope/adapter.rb#5
  def registry=(val); end

  class << self
    # source://stateoscope//lib/stateoscope/adapter.rb#13
    def new_for(klass, state_machine_name); end

    # source://stateoscope//lib/stateoscope/adapter.rb#9
    def register(adapter); end

    # source://stateoscope//lib/stateoscope/adapter.rb#5
    def registry; end

    # source://stateoscope//lib/stateoscope/adapter.rb#5
    def registry=(val); end
  end
end

# source://stateoscope//lib/stateoscope/adapter/aasm.rb#3
class Stateoscope::Adapter::AASM < ::Stateoscope::Adapter::Base
  # source://stateoscope//lib/stateoscope/adapter/aasm.rb#8
  def build_graph; end

  # source://stateoscope//lib/stateoscope/adapter/aasm.rb#15
  def full_state_machine_name; end

  private

  # source://stateoscope//lib/stateoscope/adapter/aasm.rb#29
  def add_initial_state; end

  # source://stateoscope//lib/stateoscope/adapter/aasm.rb#33
  def add_states; end

  # source://stateoscope//lib/stateoscope/adapter/aasm.rb#39
  def add_transitions; end

  # source://stateoscope//lib/stateoscope/adapter/aasm.rb#25
  def state_machine; end

  class << self
    # @return [Boolean]
    #
    # source://stateoscope//lib/stateoscope/adapter/aasm.rb#4
    def handle?(klass, _state_machine_name); end
  end
end

# source://stateoscope//lib/stateoscope/adapter/base.rb#5
class Stateoscope::Adapter::Base
  # @return [Base] a new instance of Base
  #
  # source://stateoscope//lib/stateoscope/adapter/base.rb#11
  def initialize(klass, state_machine_name); end

  # source://stateoscope//lib/stateoscope/adapter/base.rb#17
  def build_graph; end

  # source://stateoscope//lib/stateoscope/adapter/base.rb#21
  def full_state_machine_name; end

  # Returns the value of attribute graph.
  #
  # source://stateoscope//lib/stateoscope/adapter/base.rb#6
  def graph; end

  # Sets the attribute graph
  #
  # @param value the value to set the attribute graph to.
  #
  # source://stateoscope//lib/stateoscope/adapter/base.rb#6
  def graph=(_arg0); end

  # Returns the value of attribute klass.
  #
  # source://stateoscope//lib/stateoscope/adapter/base.rb#6
  def klass; end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://stateoscope//lib/stateoscope/adapter/base.rb#6
  def klass=(_arg0); end

  # Returns the value of attribute state_machine_name.
  #
  # source://stateoscope//lib/stateoscope/adapter/base.rb#6
  def state_machine_name; end

  # Sets the attribute state_machine_name
  #
  # @param value the value to set the attribute state_machine_name to.
  #
  # source://stateoscope//lib/stateoscope/adapter/base.rb#6
  def state_machine_name=(_arg0); end

  class << self
    # @return [Boolean]
    #
    # source://stateoscope//lib/stateoscope/adapter/base.rb#7
    def handle?(_klass, _state_machine_name); end
  end
end

# source://stateoscope//lib/stateoscope/adapter_registry.rb#2
class Stateoscope::AdapterRegistry < ::Struct
  # @return [AdapterRegistry] a new instance of AdapterRegistry
  #
  # source://stateoscope//lib/stateoscope/adapter_registry.rb#3
  def initialize; end

  # Returns the value of attribute adapters
  #
  # @return [Object] the current value of adapters
  def adapters; end

  # Sets the attribute adapters
  #
  # @param value [Object] the value to set the attribute adapters to.
  # @return [Object] the newly set value
  def adapters=(_); end

  # source://stateoscope//lib/stateoscope/adapter_registry.rb#11
  def find(klass, state_machine_name); end

  # source://stateoscope//lib/stateoscope/adapter_registry.rb#17
  def find!(klass, state_machine_name); end

  # source://stateoscope//lib/stateoscope/adapter_registry.rb#7
  def register(adapter); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://stateoscope//lib/stateoscope/visualizer.rb#19
Stateoscope::ENTRY_POINT = T.let(T.unsafe(nil), String)

# source://stateoscope//lib/stateoscope/errors.rb#2
class Stateoscope::Error < ::StandardError; end

# source://stateoscope//lib/stateoscope/graph.rb#4
class Stateoscope::Graph
  # @return [Graph] a new instance of Graph
  #
  # source://stateoscope//lib/stateoscope/graph.rb#7
  def initialize; end

  # source://stateoscope//lib/stateoscope/graph.rb#13
  def add_state(state); end

  # source://stateoscope//lib/stateoscope/graph.rb#17
  def add_transition(from, to, event = T.unsafe(nil)); end

  # source://stateoscope//lib/stateoscope/graph.rb#21
  def detect_final_states!; end

  # @return [Boolean]
  #
  # source://stateoscope//lib/stateoscope/graph.rb#25
  def final_state?(state); end

  # Returns the value of attribute final_states.
  #
  # source://stateoscope//lib/stateoscope/graph.rb#5
  def final_states; end

  # Sets the attribute final_states
  #
  # @param value the value to set the attribute final_states to.
  #
  # source://stateoscope//lib/stateoscope/graph.rb#5
  def final_states=(_arg0); end

  # Returns the value of attribute initial_state.
  #
  # source://stateoscope//lib/stateoscope/graph.rb#5
  def initial_state; end

  # Sets the attribute initial_state
  #
  # @param value the value to set the attribute initial_state to.
  #
  # source://stateoscope//lib/stateoscope/graph.rb#5
  def initial_state=(_arg0); end

  # Returns the value of attribute states.
  #
  # source://stateoscope//lib/stateoscope/graph.rb#5
  def states; end

  # Sets the attribute states
  #
  # @param value the value to set the attribute states to.
  #
  # source://stateoscope//lib/stateoscope/graph.rb#5
  def states=(_arg0); end

  # Returns the value of attribute transitions.
  #
  # source://stateoscope//lib/stateoscope/graph.rb#5
  def transitions; end

  # Sets the attribute transitions
  #
  # @param value the value to set the attribute transitions to.
  #
  # source://stateoscope//lib/stateoscope/graph.rb#5
  def transitions=(_arg0); end
end

# source://stateoscope//lib/stateoscope/errors.rb#5
class Stateoscope::MissingAdapterError < ::Stateoscope::Error; end

# source://stateoscope//lib/stateoscope/railtie.rb#2
class Stateoscope::Railtie < ::Rails::Railtie; end

# source://stateoscope//lib/stateoscope/version.rb#2
Stateoscope::VERSION = T.let(T.unsafe(nil), String)

# source://stateoscope//lib/stateoscope/visualizer.rb#4
class Stateoscope::Visualizer < ::Struct
  # Returns the value of attribute graph
  #
  # @return [Object] the current value of graph
  def graph; end

  # Sets the attribute graph
  #
  # @param value [Object] the value to set the attribute graph to.
  # @return [Object] the newly set value
  def graph=(_); end

  # source://stateoscope//lib/stateoscope/visualizer.rb#13
  def output(filename, output_format); end

  # source://stateoscope//lib/stateoscope/visualizer.rb#5
  def parse_graph(current_state); end

  private

  # source://stateoscope//lib/stateoscope/visualizer.rb#51
  def add_edge(from, to, label = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://stateoscope//lib/stateoscope/visualizer.rb#21
  def add_entry_point; end

  # source://stateoscope//lib/stateoscope/visualizer.rb#34
  def add_entry_point_transition; end

  # source://stateoscope//lib/stateoscope/visualizer.rb#45
  def add_node(label, options = T.unsafe(nil)); end

  # source://stateoscope//lib/stateoscope/visualizer.rb#39
  def add_state_transitions; end

  # source://stateoscope//lib/stateoscope/visualizer.rb#26
  def add_states(current_state); end

  # source://stateoscope//lib/stateoscope/visualizer.rb#58
  def global_options; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end
